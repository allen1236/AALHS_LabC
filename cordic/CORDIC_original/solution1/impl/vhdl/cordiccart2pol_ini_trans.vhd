-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cordiccart2pol_ini_trans is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inStream_x_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    inStream_x_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_x_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_x_empty_n : IN STD_LOGIC;
    inStream_x_read : OUT STD_LOGIC;
    inStream_y_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    inStream_y_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_y_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_y_empty_n : IN STD_LOGIC;
    inStream_y_read : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of cordiccart2pol_ini_trans is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_D : STD_LOGIC_VECTOR (11 downto 0) := "000000001101";
    constant ap_const_lv12_FF3 : STD_LOGIC_VECTOR (11 downto 0) := "111111110011";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_E : STD_LOGIC_VECTOR (11 downto 0) := "000000001110";
    constant ap_const_lv12_FF1 : STD_LOGIC_VECTOR (11 downto 0) := "111111110001";
    constant ap_const_lv12_35 : STD_LOGIC_VECTOR (11 downto 0) := "000000110101";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv54_3FFFFFFFFFFFFF : STD_LOGIC_VECTOR (53 downto 0) := "111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv11_7F2 : STD_LOGIC_VECTOR (10 downto 0) := "11111110010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_3244 : STD_LOGIC_VECTOR (15 downto 0) := "0011001001000100";
    constant ap_const_lv16_CDBC : STD_LOGIC_VECTOR (15 downto 0) := "1100110110111100";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ini_phase_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal ini_phase_V_ce0 : STD_LOGIC;
    signal ini_phase_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal inStream_x_blk_n : STD_LOGIC;
    signal inStream_y_blk_n : STD_LOGIC;
    signal inStream_x_read_reg_901 : STD_LOGIC_VECTOR (31 downto 0);
    signal inStream_y_read_reg_907 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln590_fu_131_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln590_reg_923 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_Result_10_reg_928 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_reg_934 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln600_fu_153_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln600_reg_939 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln590_1_fu_161_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln590_1_reg_944 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_12_reg_949 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_1_reg_955 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln600_1_fu_183_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln600_1_reg_960 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln604_fu_197_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln604_reg_965 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal man_V_2_fu_201_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_970 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln606_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln606_reg_975 : STD_LOGIC_VECTOR (0 downto 0);
    signal F2_fu_212_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_reg_982 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln610_fu_218_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln610_reg_991 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln616_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln616_reg_996 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln630_fu_228_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln630_reg_1002 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln604_1_fu_242_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln604_1_reg_1007 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_3_fu_246_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_3_reg_1012 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln606_1_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln606_1_reg_1017 : STD_LOGIC_VECTOR (0 downto 0);
    signal F2_1_fu_257_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_1_reg_1024 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln610_1_fu_263_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln610_1_reg_1033 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln616_1_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln616_1_reg_1038 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln630_1_fu_273_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln630_1_reg_1044 : STD_LOGIC_VECTOR (5 downto 0);
    signal man_V_5_fu_277_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_5_reg_1049 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sh_amt_fu_292_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1056 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln617_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln617_reg_1062 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln618_fu_304_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln618_reg_1068 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln626_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln626_reg_1074 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln638_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln638_reg_1079 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln629_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln629_reg_1084 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln630_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln630_reg_1089 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln630_fu_346_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln630_reg_1094 : STD_LOGIC_VECTOR (5 downto 0);
    signal man_V_fu_351_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_reg_1099 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_amt_1_fu_366_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_1_reg_1106 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln617_1_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln617_1_reg_1112 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln618_1_fu_378_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln618_1_reg_1118 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln626_1_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln626_1_reg_1124 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln638_1_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln638_1_reg_1129 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln629_1_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln629_1_reg_1134 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln630_2_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln630_2_reg_1139 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln630_1_fu_420_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln630_1_reg_1144 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln620_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln620_reg_1149 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln630_1_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln630_1_reg_1164 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln620_1_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln620_1_reg_1169 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln630_3_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln630_3_reg_1184 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_437_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln621_reg_1189 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_446_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln639_reg_1194 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_490_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln621_1_reg_1199 : STD_LOGIC_VECTOR (53 downto 0);
    signal grp_fu_499_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln639_1_reg_1204 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_fu_549_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_reg_1209 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln626_fu_566_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln626_reg_1214 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln420_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln420_reg_1219 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln617_fu_591_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln617_reg_1224 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_5_fu_616_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_5_reg_1229 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln626_1_fu_633_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln626_1_reg_1234 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln420_1_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln420_1_reg_1239 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln617_1_fu_658_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln617_1_reg_1244 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln606_fu_717_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln606_reg_1249 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_Val2_6_fu_776_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_reg_1259 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_1268 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_3_fu_791_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_3_reg_1273 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln1696_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1696_reg_1278 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1696_1_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1696_1_reg_1286 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln42_fu_810_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_113_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_116_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_113_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_fu_127_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_116_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_1_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_11_fu_190_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln501_fu_187_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_13_fu_235_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln501_1_fu_232_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln616_fu_282_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln616_fu_287_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_314_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln630_fu_335_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln616_1_fu_356_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln616_1_fu_361_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_fu_388_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln630_1_fu_409_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln616_fu_425_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_437_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal grp_fu_446_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln630_fu_451_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln630_fu_457_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal lshr_ln630_fu_461_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_3_fu_467_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln616_1_fu_478_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_490_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal grp_fu_499_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln630_1_fu_504_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln630_1_fu_510_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal lshr_ln630_1_fu_514_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_8_fu_520_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_3_fu_531_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln621_fu_546_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln623_fu_538_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_4_fu_556_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln606_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln617_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln638_fu_560_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_598_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln621_1_fu_613_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln623_1_fu_605_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_9_fu_623_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_1_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln606_1_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln617_1_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln638_1_fu_627_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln626_fu_665_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_668_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_fu_675_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln420_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln423_fu_686_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln617_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln617_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln616_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln423_fu_690_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln616_fu_710_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln626_1_fu_724_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_fu_727_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_1_fu_734_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln420_1_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln423_1_fu_745_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln617_1_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln617_1_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln616_1_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln423_1_fu_749_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln616_2_fu_769_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln42_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal r_2_fu_815_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln1696_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1696_fu_842_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_4_fu_825_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1696_2_fu_855_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_7_fu_820_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1696_4_fu_868_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln42_fu_831_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1696_3_fu_861_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1696_1_fu_848_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1696_5_fu_876_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cordiccart2pol_fpext_32ns_64_3_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cordiccart2pol_ashr_54ns_32ns_54_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (53 downto 0);
        din1 : IN STD_LOGIC_VECTOR (53 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (53 downto 0) );
    end component;


    component cordiccart2pol_shl_16ns_16ns_16_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component cordiccart2pol_ini_trans_ini_phase_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    ini_phase_V_U : component cordiccart2pol_ini_trans_ini_phase_V_ROM_AUTO_1R
    generic map (
        DataWidth => 16,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ini_phase_V_address0,
        ce0 => ini_phase_V_ce0,
        q0 => ini_phase_V_q0);

    fpext_32ns_64_3_no_dsp_1_U5 : component cordiccart2pol_fpext_32ns_64_3_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_113_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_113_p1);

    fpext_32ns_64_3_no_dsp_1_U6 : component cordiccart2pol_fpext_32ns_64_3_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_116_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_116_p1);

    ashr_54ns_32ns_54_2_1_U7 : component cordiccart2pol_ashr_54ns_32ns_54_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 2,
        din0_WIDTH => 54,
        din1_WIDTH => 32,
        dout_WIDTH => 54)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => man_V_5_reg_1049,
        din1 => grp_fu_437_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_437_p2);

    shl_16ns_16ns_16_2_1_U8 : component cordiccart2pol_shl_16ns_16ns_16_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 0,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln618_reg_1068,
        din1 => grp_fu_446_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_446_p2);

    ashr_54ns_32ns_54_2_1_U9 : component cordiccart2pol_ashr_54ns_32ns_54_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 2,
        din0_WIDTH => 54,
        din1_WIDTH => 32,
        dout_WIDTH => 54)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => man_V_reg_1099,
        din1 => grp_fu_490_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_490_p2);

    shl_16ns_16ns_16_2_1_U10 : component cordiccart2pol_shl_16ns_16ns_16_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 0,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln618_1_reg_1118,
        din1 => grp_fu_499_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_499_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                F2_1_reg_1024 <= F2_1_fu_257_p2;
                F2_reg_982 <= F2_fu_212_p2;
                icmp_ln606_1_reg_1017 <= icmp_ln606_1_fu_252_p2;
                icmp_ln606_reg_975 <= icmp_ln606_fu_207_p2;
                icmp_ln616_1_reg_1038 <= icmp_ln616_1_fu_267_p2;
                icmp_ln616_reg_996 <= icmp_ln616_fu_222_p2;
                trunc_ln610_1_reg_1033 <= trunc_ln610_1_fu_263_p1;
                trunc_ln610_reg_991 <= trunc_ln610_fu_218_p1;
                trunc_ln630_1_reg_1044 <= trunc_ln630_1_fu_273_p1;
                trunc_ln630_reg_1002 <= trunc_ln630_fu_228_p1;
                    zext_ln604_1_reg_1007(51 downto 0) <= zext_ln604_1_fu_242_p1(51 downto 0);
                    zext_ln604_reg_965(51 downto 0) <= zext_ln604_fu_197_p1(51 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln626_1_reg_1124 = ap_const_lv1_0) and (icmp_ln606_1_reg_1017 = ap_const_lv1_0))) then
                add_ln626_1_reg_1234 <= add_ln626_1_fu_633_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln626_reg_1074 = ap_const_lv1_0) and (icmp_ln606_reg_975 = ap_const_lv1_0))) then
                add_ln626_reg_1214 <= add_ln626_fu_566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln606_1_reg_1017 = ap_const_lv1_0))) then
                ashr_ln621_1_reg_1199 <= grp_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln606_reg_975 = ap_const_lv1_0))) then
                ashr_ln621_reg_1189 <= grp_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                exp_tmp_1_reg_955 <= ireg_1_fu_157_p1(62 downto 52);
                exp_tmp_reg_934 <= ireg_fu_127_p1(62 downto 52);
                p_Result_10_reg_928 <= ireg_fu_127_p1(63 downto 63);
                p_Result_12_reg_949 <= ireg_1_fu_157_p1(63 downto 63);
                trunc_ln590_1_reg_944 <= trunc_ln590_1_fu_161_p1;
                trunc_ln590_reg_923 <= trunc_ln590_fu_131_p1;
                trunc_ln600_1_reg_960 <= trunc_ln600_1_fu_183_p1;
                trunc_ln600_reg_939 <= trunc_ln600_fu_153_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                icmp_ln1696_1_reg_1286 <= icmp_ln1696_1_fu_801_p2;
                icmp_ln1696_reg_1278 <= icmp_ln1696_fu_796_p2;
                r_3_reg_1273 <= r_3_fu_791_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln606_1_reg_1017 = ap_const_lv1_0))) then
                icmp_ln617_1_reg_1112 <= icmp_ln617_1_fu_373_p2;
                icmp_ln626_1_reg_1124 <= icmp_ln626_1_fu_382_p2;
                icmp_ln629_1_reg_1134 <= icmp_ln629_1_fu_404_p2;
                icmp_ln630_2_reg_1139 <= icmp_ln630_2_fu_414_p2;
                icmp_ln638_1_reg_1129 <= icmp_ln638_1_fu_398_p2;
                man_V_reg_1099 <= man_V_fu_351_p3;
                sh_amt_1_reg_1106 <= sh_amt_1_fu_366_p3;
                sub_ln630_1_reg_1144 <= sub_ln630_1_fu_420_p2;
                trunc_ln618_1_reg_1118 <= trunc_ln618_1_fu_378_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln606_reg_975 = ap_const_lv1_0))) then
                icmp_ln617_reg_1062 <= icmp_ln617_fu_299_p2;
                icmp_ln626_reg_1074 <= icmp_ln626_fu_308_p2;
                icmp_ln629_reg_1084 <= icmp_ln629_fu_330_p2;
                icmp_ln630_reg_1089 <= icmp_ln630_fu_340_p2;
                icmp_ln638_reg_1079 <= icmp_ln638_fu_324_p2;
                man_V_5_reg_1049 <= man_V_5_fu_277_p3;
                sh_amt_reg_1056 <= sh_amt_fu_292_p3;
                sub_ln630_reg_1094 <= sub_ln630_fu_346_p2;
                trunc_ln618_reg_1068 <= trunc_ln618_fu_304_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln606_1_reg_1017 = ap_const_lv1_0))) then
                icmp_ln620_1_reg_1169 <= icmp_ln620_1_fu_481_p2;
                icmp_ln630_3_reg_1184 <= icmp_ln630_3_fu_525_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln606_reg_975 = ap_const_lv1_0))) then
                icmp_ln620_reg_1149 <= icmp_ln620_fu_428_p2;
                icmp_ln630_1_reg_1164 <= icmp_ln630_1_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                inStream_x_read_reg_901 <= inStream_x_dout;
                inStream_y_read_reg_907 <= inStream_y_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_Result_10_reg_928 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                man_V_2_reg_970 <= man_V_2_fu_201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_Result_12_reg_949 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                man_V_3_reg_1012 <= man_V_3_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln606_1_reg_1017 = ap_const_lv1_0))) then
                or_ln420_1_reg_1239 <= or_ln420_1_fu_642_p2;
                p_Val2_5_reg_1229 <= p_Val2_5_fu_616_p3;
                select_ln617_1_reg_1244 <= select_ln617_1_fu_658_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln606_reg_975 = ap_const_lv1_0))) then
                or_ln420_reg_1219 <= or_ln420_fu_575_p2;
                p_Val2_2_reg_1209 <= p_Val2_2_fu_549_p3;
                select_ln617_reg_1224 <= select_ln617_fu_591_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Val2_6_reg_1259 <= p_Val2_6_fu_776_p3;
                select_ln606_reg_1249 <= select_ln606_fu_717_p3;
                tmp_9_reg_1268 <= p_Val2_6_fu_776_p3(15 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln638_1_reg_1129 = ap_const_lv1_1) and (icmp_ln606_1_reg_1017 = ap_const_lv1_0))) then
                shl_ln639_1_reg_1204 <= grp_fu_499_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln638_reg_1079 = ap_const_lv1_1) and (icmp_ln606_reg_975 = ap_const_lv1_0))) then
                shl_ln639_reg_1194 <= grp_fu_446_p2;
            end if;
        end if;
    end process;
    zext_ln604_reg_965(53 downto 52) <= "01";
    zext_ln604_1_reg_1007(53 downto 52) <= "01";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, inStream_x_empty_n, inStream_y_empty_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((inStream_y_empty_n = ap_const_logic_0) or (inStream_x_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    F2_1_fu_257_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln501_1_fu_232_p1));
    F2_fu_212_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln501_fu_187_p1));
    add_ln423_1_fu_749_p2 <= std_logic_vector(unsigned(p_Val2_5_reg_1229) + unsigned(zext_ln423_1_fu_745_p1));
    add_ln423_fu_690_p2 <= std_logic_vector(unsigned(p_Val2_2_reg_1209) + unsigned(zext_ln423_fu_686_p1));
    add_ln616_1_fu_356_p2 <= std_logic_vector(unsigned(F2_1_reg_1024) + unsigned(ap_const_lv12_FF3));
    add_ln616_fu_282_p2 <= std_logic_vector(unsigned(F2_reg_982) + unsigned(ap_const_lv12_FF3));
    add_ln626_1_fu_633_p2 <= std_logic_vector(unsigned(trunc_ln610_1_reg_1033) + unsigned(ap_const_lv11_7F2));
    add_ln626_fu_566_p2 <= std_logic_vector(unsigned(trunc_ln610_reg_991) + unsigned(ap_const_lv11_7F2));
    add_ln630_1_fu_409_p2 <= std_logic_vector(unsigned(F2_1_reg_1024) + unsigned(ap_const_lv12_FF1));
    add_ln630_fu_335_p2 <= std_logic_vector(unsigned(F2_reg_982) + unsigned(ap_const_lv12_FF1));
    and_ln1696_fu_838_p2 <= (icmp_ln1696_reg_1278 and icmp_ln1696_1_reg_1286);
    and_ln420_1_fu_740_p2 <= (qb_1_fu_734_p3 and or_ln420_1_reg_1239);
    and_ln420_fu_681_p2 <= (qb_fu_675_p3 and or_ln420_reg_1219);
    and_ln616_1_fu_764_p2 <= (xor_ln617_1_fu_758_p2 and icmp_ln616_1_reg_1038);
    and_ln616_fu_705_p2 <= (xor_ln617_fu_699_p2 and icmp_ln616_reg_996);
    and_ln617_1_fu_653_p2 <= (xor_ln606_1_fu_648_p2 and icmp_ln617_1_reg_1112);
    and_ln617_fu_586_p2 <= (xor_ln606_fu_581_p2 and icmp_ln617_reg_1062);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, inStream_x_empty_n, inStream_y_empty_n)
    begin
        if (((inStream_y_empty_n = ap_const_logic_0) or (inStream_x_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, inStream_x_empty_n, inStream_y_empty_n)
    begin
                ap_block_state1 <= ((inStream_y_empty_n = ap_const_logic_0) or (inStream_x_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= select_ln1696_3_fu_861_p3;
    ap_return_1 <= select_ln1696_1_fu_848_p3;
    ap_return_2 <= select_ln1696_5_fu_876_p3;
    grp_fu_113_p0 <= inStream_x_read_reg_901;
    grp_fu_116_p0 <= inStream_y_read_reg_907;
    grp_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln616_fu_425_p1),54));
    grp_fu_446_p1 <= sext_ln616_fu_425_p1(16 - 1 downto 0);
    grp_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln616_1_fu_478_p1),54));
    grp_fu_499_p1 <= sext_ln616_1_fu_478_p1(16 - 1 downto 0);
    icmp_ln1696_1_fu_801_p2 <= "1" when (signed(select_ln606_reg_1249) < signed(p_Val2_6_reg_1259)) else "0";
    icmp_ln1696_fu_796_p2 <= "1" when (signed(select_ln606_reg_1249) < signed(r_3_fu_791_p2)) else "0";
    icmp_ln606_1_fu_252_p2 <= "1" when (trunc_ln590_1_reg_944 = ap_const_lv63_0) else "0";
    icmp_ln606_fu_207_p2 <= "1" when (trunc_ln590_reg_923 = ap_const_lv63_0) else "0";
    icmp_ln616_1_fu_267_p2 <= "1" when (signed(F2_1_fu_257_p2) > signed(ap_const_lv12_D)) else "0";
    icmp_ln616_fu_222_p2 <= "1" when (signed(F2_fu_212_p2) > signed(ap_const_lv12_D)) else "0";
    icmp_ln617_1_fu_373_p2 <= "1" when (F2_1_reg_1024 = ap_const_lv12_D) else "0";
    icmp_ln617_fu_299_p2 <= "1" when (F2_reg_982 = ap_const_lv12_D) else "0";
    icmp_ln620_1_fu_481_p2 <= "1" when (unsigned(sh_amt_1_reg_1106) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln620_fu_428_p2 <= "1" when (unsigned(sh_amt_reg_1056) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln626_1_fu_382_p2 <= "1" when (signed(add_ln616_1_fu_356_p2) > signed(ap_const_lv12_36)) else "0";
    icmp_ln626_fu_308_p2 <= "1" when (signed(add_ln616_fu_282_p2) > signed(ap_const_lv12_36)) else "0";
    icmp_ln629_1_fu_404_p2 <= "1" when (signed(F2_1_reg_1024) > signed(ap_const_lv12_E)) else "0";
    icmp_ln629_fu_330_p2 <= "1" when (signed(F2_reg_982) > signed(ap_const_lv12_E)) else "0";
    icmp_ln630_1_fu_472_p2 <= "0" when (p_Result_3_fu_467_p2 = ap_const_lv54_0) else "1";
    icmp_ln630_2_fu_414_p2 <= "1" when (signed(add_ln630_1_fu_409_p2) > signed(ap_const_lv12_35)) else "0";
    icmp_ln630_3_fu_525_p2 <= "0" when (p_Result_8_fu_520_p2 = ap_const_lv54_0) else "1";
    icmp_ln630_fu_340_p2 <= "1" when (signed(add_ln630_fu_335_p2) > signed(ap_const_lv12_35)) else "0";
    icmp_ln638_1_fu_398_p2 <= "1" when (tmp_8_fu_388_p4 = ap_const_lv8_0) else "0";
    icmp_ln638_fu_324_p2 <= "1" when (tmp_4_fu_314_p4 = ap_const_lv8_0) else "0";

    inStream_x_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inStream_x_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            inStream_x_blk_n <= inStream_x_empty_n;
        else 
            inStream_x_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inStream_x_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inStream_x_empty_n, inStream_y_empty_n)
    begin
        if ((not(((inStream_y_empty_n = ap_const_logic_0) or (inStream_x_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            inStream_x_read <= ap_const_logic_1;
        else 
            inStream_x_read <= ap_const_logic_0;
        end if; 
    end process;


    inStream_y_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inStream_y_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            inStream_y_blk_n <= inStream_y_empty_n;
        else 
            inStream_y_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inStream_y_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inStream_x_empty_n, inStream_y_empty_n)
    begin
        if ((not(((inStream_y_empty_n = ap_const_logic_0) or (inStream_x_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            inStream_y_read <= ap_const_logic_1;
        else 
            inStream_y_read <= ap_const_logic_0;
        end if; 
    end process;

    ini_phase_V_address0 <= zext_ln42_fu_810_p1(2 - 1 downto 0);

    ini_phase_V_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ini_phase_V_ce0 <= ap_const_logic_1;
        else 
            ini_phase_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ireg_1_fu_157_p1 <= grp_fu_116_p1;
    ireg_fu_127_p1 <= grp_fu_113_p1;
    lshr_ln630_1_fu_514_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv54_3FFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln630_1_fu_510_p1(31-1 downto 0)))));
    lshr_ln630_fu_461_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv54_3FFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln630_fu_457_p1(31-1 downto 0)))));
    man_V_2_fu_201_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln604_fu_197_p1));
    man_V_3_fu_246_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln604_1_fu_242_p1));
    man_V_5_fu_277_p3 <= 
        man_V_2_reg_970 when (p_Result_10_reg_928(0) = '1') else 
        zext_ln604_reg_965;
    man_V_fu_351_p3 <= 
        man_V_3_reg_1012 when (p_Result_12_reg_949(0) = '1') else 
        zext_ln604_1_reg_1007;
    or_ln420_1_fu_642_p2 <= (r_1_fu_638_p2 or p_Result_9_fu_623_p1);
    or_ln420_fu_575_p2 <= (r_fu_571_p2 or p_Result_4_fu_556_p1);
    or_ln617_1_fu_754_p2 <= (icmp_ln617_1_reg_1112 or icmp_ln606_1_reg_1017);
    or_ln617_fu_695_p2 <= (icmp_ln617_reg_1062 or icmp_ln606_reg_975);
    p_Result_11_fu_190_p3 <= (ap_const_lv1_1 & trunc_ln600_reg_939);
    p_Result_13_fu_235_p3 <= (ap_const_lv1_1 & trunc_ln600_1_reg_960);
    p_Result_3_fu_467_p2 <= (man_V_5_reg_1049 and lshr_ln630_fu_461_p2);
    p_Result_4_fu_556_p1 <= p_Val2_2_fu_549_p3(1 - 1 downto 0);
    p_Result_5_fu_727_p3 <= man_V_reg_1099(to_integer(unsigned(zext_ln626_1_fu_724_p1)) downto to_integer(unsigned(zext_ln626_1_fu_724_p1))) when (to_integer(unsigned(zext_ln626_1_fu_724_p1)) >= 0 and to_integer(unsigned(zext_ln626_1_fu_724_p1)) <=53) else "-";
    p_Result_8_fu_520_p2 <= (man_V_reg_1099 and lshr_ln630_1_fu_514_p2);
    p_Result_9_fu_623_p1 <= p_Val2_5_fu_616_p3(1 - 1 downto 0);
    p_Result_s_fu_668_p3 <= man_V_5_reg_1049(to_integer(unsigned(zext_ln626_fu_665_p1)) downto to_integer(unsigned(zext_ln626_fu_665_p1))) when (to_integer(unsigned(zext_ln626_fu_665_p1)) >= 0 and to_integer(unsigned(zext_ln626_fu_665_p1)) <=53) else "-";
    p_Val2_2_fu_549_p3 <= 
        trunc_ln621_fu_546_p1 when (icmp_ln620_reg_1149(0) = '1') else 
        select_ln623_fu_538_p3;
    p_Val2_5_fu_616_p3 <= 
        trunc_ln621_1_fu_613_p1 when (icmp_ln620_1_reg_1169(0) = '1') else 
        select_ln623_1_fu_605_p3;
    p_Val2_6_fu_776_p3 <= 
        ap_const_lv16_0 when (icmp_ln606_1_reg_1017(0) = '1') else 
        select_ln616_2_fu_769_p3;
    p_Val2_7_fu_820_p3 <= 
        p_Val2_6_reg_1259 when (icmp_ln1696_1_reg_1286(0) = '1') else 
        select_ln606_reg_1249;
    qb_1_fu_734_p3 <= 
        p_Result_12_reg_949 when (icmp_ln626_1_reg_1124(0) = '1') else 
        p_Result_5_fu_727_p3;
    qb_fu_675_p3 <= 
        p_Result_10_reg_928 when (icmp_ln626_reg_1074(0) = '1') else 
        p_Result_s_fu_668_p3;
    r_1_fu_638_p2 <= (icmp_ln630_3_reg_1184 and icmp_ln629_1_reg_1134);
    r_2_fu_815_p2 <= (select_ln606_reg_1249 xor ap_const_lv16_FFFF);
    r_3_fu_791_p2 <= (p_Val2_6_reg_1259 xor ap_const_lv16_FFFF);
    r_4_fu_825_p3 <= 
        r_2_fu_815_p2 when (icmp_ln1696_1_reg_1286(0) = '1') else 
        p_Val2_6_reg_1259;
    r_fu_571_p2 <= (icmp_ln630_1_reg_1164 and icmp_ln629_reg_1084);
    select_ln1696_1_fu_848_p3 <= 
        select_ln1696_fu_842_p3 when (icmp_ln1696_reg_1278(0) = '1') else 
        r_4_fu_825_p3;
    select_ln1696_2_fu_855_p3 <= 
        select_ln606_reg_1249 when (and_ln1696_fu_838_p2(0) = '1') else 
        r_3_reg_1273;
    select_ln1696_3_fu_861_p3 <= 
        select_ln1696_2_fu_855_p3 when (icmp_ln1696_reg_1278(0) = '1') else 
        p_Val2_7_fu_820_p3;
    select_ln1696_4_fu_868_p3 <= 
        ini_phase_V_q0 when (and_ln1696_fu_838_p2(0) = '1') else 
        ap_const_lv16_CDBC;
    select_ln1696_5_fu_876_p3 <= 
        select_ln1696_4_fu_868_p3 when (icmp_ln1696_reg_1278(0) = '1') else 
        select_ln42_fu_831_p3;
    select_ln1696_fu_842_p3 <= 
        p_Val2_6_reg_1259 when (and_ln1696_fu_838_p2(0) = '1') else 
        select_ln606_reg_1249;
    select_ln42_fu_831_p3 <= 
        ap_const_lv16_3244 when (icmp_ln1696_1_reg_1286(0) = '1') else 
        ap_const_lv16_0;
    select_ln606_fu_717_p3 <= 
        ap_const_lv16_0 when (icmp_ln606_reg_975(0) = '1') else 
        select_ln616_fu_710_p3;
    select_ln616_2_fu_769_p3 <= 
        add_ln423_1_fu_749_p2 when (and_ln616_1_fu_764_p2(0) = '1') else 
        select_ln617_1_reg_1244;
    select_ln616_fu_710_p3 <= 
        add_ln423_fu_690_p2 when (and_ln616_fu_705_p2(0) = '1') else 
        select_ln617_reg_1224;
    select_ln617_1_fu_658_p3 <= 
        trunc_ln618_1_reg_1118 when (and_ln617_1_fu_653_p2(0) = '1') else 
        select_ln638_1_fu_627_p3;
    select_ln617_fu_591_p3 <= 
        trunc_ln618_reg_1068 when (and_ln617_fu_586_p2(0) = '1') else 
        select_ln638_fu_560_p3;
    select_ln623_1_fu_605_p3 <= 
        ap_const_lv16_FFFF when (tmp_7_fu_598_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln623_fu_538_p3 <= 
        ap_const_lv16_FFFF when (tmp_3_fu_531_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln630_1_fu_504_p3 <= 
        ap_const_lv6_0 when (icmp_ln630_2_reg_1139(0) = '1') else 
        sub_ln630_1_reg_1144;
    select_ln630_fu_451_p3 <= 
        ap_const_lv6_0 when (icmp_ln630_reg_1089(0) = '1') else 
        sub_ln630_reg_1094;
    select_ln638_1_fu_627_p3 <= 
        shl_ln639_1_reg_1204 when (icmp_ln638_1_reg_1129(0) = '1') else 
        ap_const_lv16_0;
    select_ln638_fu_560_p3 <= 
        shl_ln639_reg_1194 when (icmp_ln638_reg_1079(0) = '1') else 
        ap_const_lv16_0;
        sext_ln616_1_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_reg_1106),32));

        sext_ln616_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1056),32));

    sh_amt_1_fu_366_p3 <= 
        add_ln616_1_fu_356_p2 when (icmp_ln616_1_reg_1038(0) = '1') else 
        sub_ln616_1_fu_361_p2;
    sh_amt_fu_292_p3 <= 
        add_ln616_fu_282_p2 when (icmp_ln616_reg_996(0) = '1') else 
        sub_ln616_fu_287_p2;
    sub_ln616_1_fu_361_p2 <= std_logic_vector(unsigned(ap_const_lv12_D) - unsigned(F2_1_reg_1024));
    sub_ln616_fu_287_p2 <= std_logic_vector(unsigned(ap_const_lv12_D) - unsigned(F2_reg_982));
    sub_ln630_1_fu_420_p2 <= std_logic_vector(unsigned(ap_const_lv6_4) - unsigned(trunc_ln630_1_reg_1044));
    sub_ln630_fu_346_p2 <= std_logic_vector(unsigned(ap_const_lv6_4) - unsigned(trunc_ln630_reg_1002));
    tmp_3_fu_531_p3 <= inStream_x_read_reg_901(31 downto 31);
    tmp_4_fu_314_p4 <= sh_amt_fu_292_p3(11 downto 4);
    tmp_7_fu_598_p3 <= inStream_y_read_reg_907(31 downto 31);
    tmp_8_fu_388_p4 <= sh_amt_1_fu_366_p3(11 downto 4);
    trunc_ln590_1_fu_161_p1 <= ireg_1_fu_157_p1(63 - 1 downto 0);
    trunc_ln590_fu_131_p1 <= ireg_fu_127_p1(63 - 1 downto 0);
    trunc_ln600_1_fu_183_p1 <= ireg_1_fu_157_p1(52 - 1 downto 0);
    trunc_ln600_fu_153_p1 <= ireg_fu_127_p1(52 - 1 downto 0);
    trunc_ln610_1_fu_263_p1 <= F2_1_fu_257_p2(11 - 1 downto 0);
    trunc_ln610_fu_218_p1 <= F2_fu_212_p2(11 - 1 downto 0);
    trunc_ln618_1_fu_378_p1 <= man_V_fu_351_p3(16 - 1 downto 0);
    trunc_ln618_fu_304_p1 <= man_V_5_fu_277_p3(16 - 1 downto 0);
    trunc_ln621_1_fu_613_p1 <= ashr_ln621_1_reg_1199(16 - 1 downto 0);
    trunc_ln621_fu_546_p1 <= ashr_ln621_reg_1189(16 - 1 downto 0);
    trunc_ln630_1_fu_273_p1 <= F2_1_fu_257_p2(6 - 1 downto 0);
    trunc_ln630_fu_228_p1 <= F2_fu_212_p2(6 - 1 downto 0);
    xor_ln42_fu_805_p2 <= (tmp_9_reg_1268 xor ap_const_lv1_1);
    xor_ln606_1_fu_648_p2 <= (icmp_ln606_1_reg_1017 xor ap_const_lv1_1);
    xor_ln606_fu_581_p2 <= (icmp_ln606_reg_975 xor ap_const_lv1_1);
    xor_ln617_1_fu_758_p2 <= (or_ln617_1_fu_754_p2 xor ap_const_lv1_1);
    xor_ln617_fu_699_p2 <= (or_ln617_fu_695_p2 xor ap_const_lv1_1);
    zext_ln423_1_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln420_1_fu_740_p2),16));
    zext_ln423_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln420_fu_681_p2),16));
    zext_ln42_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln42_fu_805_p2),64));
    zext_ln501_1_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_1_reg_955),12));
    zext_ln501_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_reg_934),12));
    zext_ln604_1_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_13_fu_235_p3),54));
    zext_ln604_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_11_fu_190_p3),54));
    zext_ln626_1_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln626_1_reg_1234),32));
    zext_ln626_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln626_reg_1214),32));
    zext_ln630_1_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln630_1_fu_504_p3),54));
    zext_ln630_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln630_fu_451_p3),54));
end behav;
