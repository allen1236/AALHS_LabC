-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cordiccart2pol is
port (
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    y : IN STD_LOGIC_VECTOR (31 downto 0);
    r : OUT STD_LOGIC_VECTOR (31 downto 0);
    theta : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    r_ap_vld : OUT STD_LOGIC;
    theta_ap_vld : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of cordiccart2pol is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cordiccart2pol_cordiccart2pol,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.350000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.903000,HLS_SYN_LAT=42,HLS_SYN_TPT=18,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=6922,HLS_SYN_LUT=7495,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal Block_entry39_proc9_U0_ap_start : STD_LOGIC;
    signal Block_entry39_proc9_U0_ap_done : STD_LOGIC;
    signal Block_entry39_proc9_U0_ap_continue : STD_LOGIC;
    signal Block_entry39_proc9_U0_ap_idle : STD_LOGIC;
    signal Block_entry39_proc9_U0_ap_ready : STD_LOGIC;
    signal Block_entry39_proc9_U0_start_out : STD_LOGIC;
    signal Block_entry39_proc9_U0_start_write : STD_LOGIC;
    signal Block_entry39_proc9_U0_inStream_x_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry39_proc9_U0_inStream_x_write : STD_LOGIC;
    signal Block_entry39_proc9_U0_inStream_y_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry39_proc9_U0_inStream_y_write : STD_LOGIC;
    signal ini_trans_U0_ap_start : STD_LOGIC;
    signal ini_trans_U0_ap_done : STD_LOGIC;
    signal ini_trans_U0_ap_continue : STD_LOGIC;
    signal ini_trans_U0_ap_idle : STD_LOGIC;
    signal ini_trans_U0_ap_ready : STD_LOGIC;
    signal ini_trans_U0_inStream_x_read : STD_LOGIC;
    signal ini_trans_U0_inStream_y_read : STD_LOGIC;
    signal ini_trans_U0_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ini_trans_U0_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ini_trans_U0_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_theta_pip_V_0_c_channel : STD_LOGIC;
    signal theta_pip_V_0_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_theta_pip_V_0_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_theta_pip_V_0_c_channel : STD_LOGIC;
    signal ap_channel_done_y_pip_V_0_c_channel : STD_LOGIC;
    signal y_pip_V_0_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_y_pip_V_0_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_y_pip_V_0_c_channel : STD_LOGIC;
    signal ap_channel_done_x_pip_V_0_c_channel : STD_LOGIC;
    signal x_pip_V_0_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_x_pip_V_0_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_x_pip_V_0_c_channel : STD_LOGIC;
    signal cordic_cr_unsigned_short_1_U0_ap_start : STD_LOGIC;
    signal cordic_cr_unsigned_short_1_U0_ap_done : STD_LOGIC;
    signal cordic_cr_unsigned_short_1_U0_ap_continue : STD_LOGIC;
    signal cordic_cr_unsigned_short_1_U0_ap_idle : STD_LOGIC;
    signal cordic_cr_unsigned_short_1_U0_ap_ready : STD_LOGIC;
    signal cordic_cr_unsigned_short_1_U0_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal cordic_cr_unsigned_short_1_U0_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal cordic_cr_unsigned_short_1_U0_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_theta_pip_V_1_c_channel : STD_LOGIC;
    signal theta_pip_V_1_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_theta_pip_V_1_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_theta_pip_V_1_c_channel : STD_LOGIC;
    signal ap_channel_done_y_pip_V_1_c_channel : STD_LOGIC;
    signal y_pip_V_1_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_y_pip_V_1_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_y_pip_V_1_c_channel : STD_LOGIC;
    signal ap_channel_done_x_pip_V_1_c_channel : STD_LOGIC;
    signal x_pip_V_1_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_x_pip_V_1_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_x_pip_V_1_c_channel : STD_LOGIC;
    signal cordic_cr_unsigned_short_2_U0_ap_start : STD_LOGIC;
    signal cordic_cr_unsigned_short_2_U0_ap_done : STD_LOGIC;
    signal cordic_cr_unsigned_short_2_U0_ap_continue : STD_LOGIC;
    signal cordic_cr_unsigned_short_2_U0_ap_idle : STD_LOGIC;
    signal cordic_cr_unsigned_short_2_U0_ap_ready : STD_LOGIC;
    signal cordic_cr_unsigned_short_2_U0_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal cordic_cr_unsigned_short_2_U0_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal cordic_cr_unsigned_short_2_U0_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_theta_pip_V_2_c_channel : STD_LOGIC;
    signal theta_pip_V_2_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_theta_pip_V_2_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_theta_pip_V_2_c_channel : STD_LOGIC;
    signal ap_channel_done_y_pip_V_2_c_channel : STD_LOGIC;
    signal y_pip_V_2_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_y_pip_V_2_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_y_pip_V_2_c_channel : STD_LOGIC;
    signal ap_channel_done_x_pip_V_2_c_channel : STD_LOGIC;
    signal x_pip_V_2_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_x_pip_V_2_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_x_pip_V_2_c_channel : STD_LOGIC;
    signal cordic_cr_unsigned_short_3_U0_ap_start : STD_LOGIC;
    signal cordic_cr_unsigned_short_3_U0_ap_done : STD_LOGIC;
    signal cordic_cr_unsigned_short_3_U0_ap_continue : STD_LOGIC;
    signal cordic_cr_unsigned_short_3_U0_ap_idle : STD_LOGIC;
    signal cordic_cr_unsigned_short_3_U0_ap_ready : STD_LOGIC;
    signal cordic_cr_unsigned_short_3_U0_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal cordic_cr_unsigned_short_3_U0_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal cordic_cr_unsigned_short_3_U0_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_theta_pip_V_3_c_channel : STD_LOGIC;
    signal theta_pip_V_3_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_theta_pip_V_3_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_theta_pip_V_3_c_channel : STD_LOGIC;
    signal ap_channel_done_y_pip_V_3_c_channel : STD_LOGIC;
    signal y_pip_V_3_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_y_pip_V_3_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_y_pip_V_3_c_channel : STD_LOGIC;
    signal ap_channel_done_x_pip_V_3_c_channel : STD_LOGIC;
    signal x_pip_V_3_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_x_pip_V_3_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_x_pip_V_3_c_channel : STD_LOGIC;
    signal cordic_cr_unsigned_short_4_U0_ap_start : STD_LOGIC;
    signal cordic_cr_unsigned_short_4_U0_ap_done : STD_LOGIC;
    signal cordic_cr_unsigned_short_4_U0_ap_continue : STD_LOGIC;
    signal cordic_cr_unsigned_short_4_U0_ap_idle : STD_LOGIC;
    signal cordic_cr_unsigned_short_4_U0_ap_ready : STD_LOGIC;
    signal cordic_cr_unsigned_short_4_U0_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal cordic_cr_unsigned_short_4_U0_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal cordic_cr_unsigned_short_4_U0_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_theta_pip_V_4_c_channel : STD_LOGIC;
    signal theta_pip_V_4_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_theta_pip_V_4_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_theta_pip_V_4_c_channel : STD_LOGIC;
    signal ap_channel_done_y_pip_V_4_c_channel : STD_LOGIC;
    signal y_pip_V_4_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_y_pip_V_4_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_y_pip_V_4_c_channel : STD_LOGIC;
    signal ap_channel_done_x_pip_V_4_c_channel : STD_LOGIC;
    signal x_pip_V_4_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_x_pip_V_4_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_x_pip_V_4_c_channel : STD_LOGIC;
    signal cordic_cr_unsigned_short_5_U0_ap_start : STD_LOGIC;
    signal cordic_cr_unsigned_short_5_U0_ap_done : STD_LOGIC;
    signal cordic_cr_unsigned_short_5_U0_ap_continue : STD_LOGIC;
    signal cordic_cr_unsigned_short_5_U0_ap_idle : STD_LOGIC;
    signal cordic_cr_unsigned_short_5_U0_ap_ready : STD_LOGIC;
    signal cordic_cr_unsigned_short_5_U0_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal cordic_cr_unsigned_short_5_U0_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal cordic_cr_unsigned_short_5_U0_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_theta_pip_V_5_c_channel : STD_LOGIC;
    signal theta_pip_V_5_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_theta_pip_V_5_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_theta_pip_V_5_c_channel : STD_LOGIC;
    signal ap_channel_done_y_pip_V_5_c_channel : STD_LOGIC;
    signal y_pip_V_5_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_y_pip_V_5_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_y_pip_V_5_c_channel : STD_LOGIC;
    signal ap_channel_done_x_pip_V_5_c_channel : STD_LOGIC;
    signal x_pip_V_5_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_x_pip_V_5_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_x_pip_V_5_c_channel : STD_LOGIC;
    signal cordic_cr_unsigned_short_6_U0_ap_start : STD_LOGIC;
    signal cordic_cr_unsigned_short_6_U0_ap_done : STD_LOGIC;
    signal cordic_cr_unsigned_short_6_U0_ap_continue : STD_LOGIC;
    signal cordic_cr_unsigned_short_6_U0_ap_idle : STD_LOGIC;
    signal cordic_cr_unsigned_short_6_U0_ap_ready : STD_LOGIC;
    signal cordic_cr_unsigned_short_6_U0_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal cordic_cr_unsigned_short_6_U0_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal cordic_cr_unsigned_short_6_U0_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_theta_pip_V_6_c_channel : STD_LOGIC;
    signal theta_pip_V_6_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_theta_pip_V_6_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_theta_pip_V_6_c_channel : STD_LOGIC;
    signal ap_channel_done_y_pip_V_6_c_channel : STD_LOGIC;
    signal y_pip_V_6_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_y_pip_V_6_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_y_pip_V_6_c_channel : STD_LOGIC;
    signal ap_channel_done_x_pip_V_6_c_channel : STD_LOGIC;
    signal x_pip_V_6_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_x_pip_V_6_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_x_pip_V_6_c_channel : STD_LOGIC;
    signal Block_entry3947_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry3947_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry3947_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry3947_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry3947_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry3947_proc_U0_r : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry3947_proc_U0_r_ap_vld : STD_LOGIC;
    signal Block_entry3947_proc_U0_theta : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry3947_proc_U0_theta_ap_vld : STD_LOGIC;
    signal inStream_x_full_n : STD_LOGIC;
    signal inStream_x_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal inStream_x_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_x_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_x_empty_n : STD_LOGIC;
    signal inStream_y_full_n : STD_LOGIC;
    signal inStream_y_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal inStream_y_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_y_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_y_empty_n : STD_LOGIC;
    signal x_pip_V_0_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal x_pip_V_0_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal x_pip_V_0_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal x_pip_V_0_c_channel_empty_n : STD_LOGIC;
    signal y_pip_V_0_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal y_pip_V_0_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal y_pip_V_0_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal y_pip_V_0_c_channel_empty_n : STD_LOGIC;
    signal theta_pip_V_0_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal theta_pip_V_0_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal theta_pip_V_0_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal theta_pip_V_0_c_channel_empty_n : STD_LOGIC;
    signal x_pip_V_1_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal x_pip_V_1_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal x_pip_V_1_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal x_pip_V_1_c_channel_empty_n : STD_LOGIC;
    signal y_pip_V_1_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal y_pip_V_1_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal y_pip_V_1_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal y_pip_V_1_c_channel_empty_n : STD_LOGIC;
    signal theta_pip_V_1_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal theta_pip_V_1_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal theta_pip_V_1_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal theta_pip_V_1_c_channel_empty_n : STD_LOGIC;
    signal x_pip_V_2_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal x_pip_V_2_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal x_pip_V_2_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal x_pip_V_2_c_channel_empty_n : STD_LOGIC;
    signal y_pip_V_2_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal y_pip_V_2_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal y_pip_V_2_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal y_pip_V_2_c_channel_empty_n : STD_LOGIC;
    signal theta_pip_V_2_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal theta_pip_V_2_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal theta_pip_V_2_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal theta_pip_V_2_c_channel_empty_n : STD_LOGIC;
    signal x_pip_V_3_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal x_pip_V_3_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal x_pip_V_3_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal x_pip_V_3_c_channel_empty_n : STD_LOGIC;
    signal y_pip_V_3_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal y_pip_V_3_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal y_pip_V_3_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal y_pip_V_3_c_channel_empty_n : STD_LOGIC;
    signal theta_pip_V_3_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal theta_pip_V_3_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal theta_pip_V_3_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal theta_pip_V_3_c_channel_empty_n : STD_LOGIC;
    signal x_pip_V_4_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal x_pip_V_4_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal x_pip_V_4_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal x_pip_V_4_c_channel_empty_n : STD_LOGIC;
    signal y_pip_V_4_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal y_pip_V_4_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal y_pip_V_4_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal y_pip_V_4_c_channel_empty_n : STD_LOGIC;
    signal theta_pip_V_4_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal theta_pip_V_4_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal theta_pip_V_4_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal theta_pip_V_4_c_channel_empty_n : STD_LOGIC;
    signal x_pip_V_5_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal x_pip_V_5_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal x_pip_V_5_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal x_pip_V_5_c_channel_empty_n : STD_LOGIC;
    signal y_pip_V_5_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal y_pip_V_5_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal y_pip_V_5_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal y_pip_V_5_c_channel_empty_n : STD_LOGIC;
    signal theta_pip_V_5_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal theta_pip_V_5_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal theta_pip_V_5_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal theta_pip_V_5_c_channel_empty_n : STD_LOGIC;
    signal x_pip_V_6_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal x_pip_V_6_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal x_pip_V_6_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal x_pip_V_6_c_channel_empty_n : STD_LOGIC;
    signal y_pip_V_6_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal y_pip_V_6_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal y_pip_V_6_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal y_pip_V_6_c_channel_empty_n : STD_LOGIC;
    signal theta_pip_V_6_c_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal theta_pip_V_6_c_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal theta_pip_V_6_c_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal theta_pip_V_6_c_channel_empty_n : STD_LOGIC;
    signal start_for_ini_trans_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ini_trans_U0_full_n : STD_LOGIC;
    signal start_for_ini_trans_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ini_trans_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cordiccart2pol_Block_entry39_proc9 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        y : IN STD_LOGIC_VECTOR (31 downto 0);
        inStream_x_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        inStream_x_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream_x_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream_x_full_n : IN STD_LOGIC;
        inStream_x_write : OUT STD_LOGIC;
        inStream_y_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        inStream_y_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream_y_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream_y_full_n : IN STD_LOGIC;
        inStream_y_write : OUT STD_LOGIC );
    end component;


    component cordiccart2pol_ini_trans IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inStream_x_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inStream_x_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream_x_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream_x_empty_n : IN STD_LOGIC;
        inStream_x_read : OUT STD_LOGIC;
        inStream_y_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inStream_y_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream_y_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream_y_empty_n : IN STD_LOGIC;
        inStream_y_read : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component cordiccart2pol_cordic_cr_unsigned_short_1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component cordiccart2pol_cordic_cr_unsigned_short_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component cordiccart2pol_cordic_cr_unsigned_short_3_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component cordiccart2pol_cordic_cr_unsigned_short_4_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component cordiccart2pol_cordic_cr_unsigned_short_5_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component cordiccart2pol_cordic_cr_unsigned_short_6_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component cordiccart2pol_Block_entry3947_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
        r : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_ap_vld : OUT STD_LOGIC;
        theta : OUT STD_LOGIC_VECTOR (31 downto 0);
        theta_ap_vld : OUT STD_LOGIC );
    end component;


    component cordiccart2pol_fifo_w32_d1_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component cordiccart2pol_fifo_w16_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component cordiccart2pol_start_for_ini_trans_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    Block_entry39_proc9_U0 : component cordiccart2pol_Block_entry39_proc9
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry39_proc9_U0_ap_start,
        start_full_n => start_for_ini_trans_U0_full_n,
        ap_done => Block_entry39_proc9_U0_ap_done,
        ap_continue => Block_entry39_proc9_U0_ap_continue,
        ap_idle => Block_entry39_proc9_U0_ap_idle,
        ap_ready => Block_entry39_proc9_U0_ap_ready,
        start_out => Block_entry39_proc9_U0_start_out,
        start_write => Block_entry39_proc9_U0_start_write,
        x => x,
        y => y,
        inStream_x_din => Block_entry39_proc9_U0_inStream_x_din,
        inStream_x_num_data_valid => inStream_x_num_data_valid,
        inStream_x_fifo_cap => inStream_x_fifo_cap,
        inStream_x_full_n => inStream_x_full_n,
        inStream_x_write => Block_entry39_proc9_U0_inStream_x_write,
        inStream_y_din => Block_entry39_proc9_U0_inStream_y_din,
        inStream_y_num_data_valid => inStream_y_num_data_valid,
        inStream_y_fifo_cap => inStream_y_fifo_cap,
        inStream_y_full_n => inStream_y_full_n,
        inStream_y_write => Block_entry39_proc9_U0_inStream_y_write);

    ini_trans_U0 : component cordiccart2pol_ini_trans
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ini_trans_U0_ap_start,
        ap_done => ini_trans_U0_ap_done,
        ap_continue => ini_trans_U0_ap_continue,
        ap_idle => ini_trans_U0_ap_idle,
        ap_ready => ini_trans_U0_ap_ready,
        inStream_x_dout => inStream_x_dout,
        inStream_x_num_data_valid => inStream_x_num_data_valid,
        inStream_x_fifo_cap => inStream_x_fifo_cap,
        inStream_x_empty_n => inStream_x_empty_n,
        inStream_x_read => ini_trans_U0_inStream_x_read,
        inStream_y_dout => inStream_y_dout,
        inStream_y_num_data_valid => inStream_y_num_data_valid,
        inStream_y_fifo_cap => inStream_y_fifo_cap,
        inStream_y_empty_n => inStream_y_empty_n,
        inStream_y_read => ini_trans_U0_inStream_y_read,
        ap_return_0 => ini_trans_U0_ap_return_0,
        ap_return_1 => ini_trans_U0_ap_return_1,
        ap_return_2 => ini_trans_U0_ap_return_2);

    cordic_cr_unsigned_short_1_U0 : component cordiccart2pol_cordic_cr_unsigned_short_1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => cordic_cr_unsigned_short_1_U0_ap_start,
        ap_done => cordic_cr_unsigned_short_1_U0_ap_done,
        ap_continue => cordic_cr_unsigned_short_1_U0_ap_continue,
        ap_idle => cordic_cr_unsigned_short_1_U0_ap_idle,
        ap_ready => cordic_cr_unsigned_short_1_U0_ap_ready,
        p_read => x_pip_V_0_c_channel_dout,
        p_read1 => y_pip_V_0_c_channel_dout,
        p_read2 => theta_pip_V_0_c_channel_dout,
        ap_return_0 => cordic_cr_unsigned_short_1_U0_ap_return_0,
        ap_return_1 => cordic_cr_unsigned_short_1_U0_ap_return_1,
        ap_return_2 => cordic_cr_unsigned_short_1_U0_ap_return_2);

    cordic_cr_unsigned_short_2_U0 : component cordiccart2pol_cordic_cr_unsigned_short_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => cordic_cr_unsigned_short_2_U0_ap_start,
        ap_done => cordic_cr_unsigned_short_2_U0_ap_done,
        ap_continue => cordic_cr_unsigned_short_2_U0_ap_continue,
        ap_idle => cordic_cr_unsigned_short_2_U0_ap_idle,
        ap_ready => cordic_cr_unsigned_short_2_U0_ap_ready,
        p_read => x_pip_V_1_c_channel_dout,
        p_read1 => y_pip_V_1_c_channel_dout,
        p_read2 => theta_pip_V_1_c_channel_dout,
        ap_return_0 => cordic_cr_unsigned_short_2_U0_ap_return_0,
        ap_return_1 => cordic_cr_unsigned_short_2_U0_ap_return_1,
        ap_return_2 => cordic_cr_unsigned_short_2_U0_ap_return_2);

    cordic_cr_unsigned_short_3_U0 : component cordiccart2pol_cordic_cr_unsigned_short_3_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => cordic_cr_unsigned_short_3_U0_ap_start,
        ap_done => cordic_cr_unsigned_short_3_U0_ap_done,
        ap_continue => cordic_cr_unsigned_short_3_U0_ap_continue,
        ap_idle => cordic_cr_unsigned_short_3_U0_ap_idle,
        ap_ready => cordic_cr_unsigned_short_3_U0_ap_ready,
        p_read => x_pip_V_2_c_channel_dout,
        p_read1 => y_pip_V_2_c_channel_dout,
        p_read2 => theta_pip_V_2_c_channel_dout,
        ap_return_0 => cordic_cr_unsigned_short_3_U0_ap_return_0,
        ap_return_1 => cordic_cr_unsigned_short_3_U0_ap_return_1,
        ap_return_2 => cordic_cr_unsigned_short_3_U0_ap_return_2);

    cordic_cr_unsigned_short_4_U0 : component cordiccart2pol_cordic_cr_unsigned_short_4_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => cordic_cr_unsigned_short_4_U0_ap_start,
        ap_done => cordic_cr_unsigned_short_4_U0_ap_done,
        ap_continue => cordic_cr_unsigned_short_4_U0_ap_continue,
        ap_idle => cordic_cr_unsigned_short_4_U0_ap_idle,
        ap_ready => cordic_cr_unsigned_short_4_U0_ap_ready,
        p_read => x_pip_V_3_c_channel_dout,
        p_read1 => y_pip_V_3_c_channel_dout,
        p_read2 => theta_pip_V_3_c_channel_dout,
        ap_return_0 => cordic_cr_unsigned_short_4_U0_ap_return_0,
        ap_return_1 => cordic_cr_unsigned_short_4_U0_ap_return_1,
        ap_return_2 => cordic_cr_unsigned_short_4_U0_ap_return_2);

    cordic_cr_unsigned_short_5_U0 : component cordiccart2pol_cordic_cr_unsigned_short_5_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => cordic_cr_unsigned_short_5_U0_ap_start,
        ap_done => cordic_cr_unsigned_short_5_U0_ap_done,
        ap_continue => cordic_cr_unsigned_short_5_U0_ap_continue,
        ap_idle => cordic_cr_unsigned_short_5_U0_ap_idle,
        ap_ready => cordic_cr_unsigned_short_5_U0_ap_ready,
        p_read => x_pip_V_4_c_channel_dout,
        p_read1 => y_pip_V_4_c_channel_dout,
        p_read2 => theta_pip_V_4_c_channel_dout,
        ap_return_0 => cordic_cr_unsigned_short_5_U0_ap_return_0,
        ap_return_1 => cordic_cr_unsigned_short_5_U0_ap_return_1,
        ap_return_2 => cordic_cr_unsigned_short_5_U0_ap_return_2);

    cordic_cr_unsigned_short_6_U0 : component cordiccart2pol_cordic_cr_unsigned_short_6_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => cordic_cr_unsigned_short_6_U0_ap_start,
        ap_done => cordic_cr_unsigned_short_6_U0_ap_done,
        ap_continue => cordic_cr_unsigned_short_6_U0_ap_continue,
        ap_idle => cordic_cr_unsigned_short_6_U0_ap_idle,
        ap_ready => cordic_cr_unsigned_short_6_U0_ap_ready,
        p_read => x_pip_V_5_c_channel_dout,
        p_read1 => y_pip_V_5_c_channel_dout,
        p_read2 => theta_pip_V_5_c_channel_dout,
        ap_return_0 => cordic_cr_unsigned_short_6_U0_ap_return_0,
        ap_return_1 => cordic_cr_unsigned_short_6_U0_ap_return_1,
        ap_return_2 => cordic_cr_unsigned_short_6_U0_ap_return_2);

    Block_entry3947_proc_U0 : component cordiccart2pol_Block_entry3947_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry3947_proc_U0_ap_start,
        ap_done => Block_entry3947_proc_U0_ap_done,
        ap_continue => Block_entry3947_proc_U0_ap_continue,
        ap_idle => Block_entry3947_proc_U0_ap_idle,
        ap_ready => Block_entry3947_proc_U0_ap_ready,
        p_read => x_pip_V_6_c_channel_dout,
        p_read1 => y_pip_V_6_c_channel_dout,
        p_read2 => theta_pip_V_6_c_channel_dout,
        r => Block_entry3947_proc_U0_r,
        r_ap_vld => Block_entry3947_proc_U0_r_ap_vld,
        theta => Block_entry3947_proc_U0_theta,
        theta_ap_vld => Block_entry3947_proc_U0_theta_ap_vld);

    inStream_x_U : component cordiccart2pol_fifo_w32_d1_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry39_proc9_U0_inStream_x_din,
        if_full_n => inStream_x_full_n,
        if_write => Block_entry39_proc9_U0_inStream_x_write,
        if_dout => inStream_x_dout,
        if_num_data_valid => inStream_x_num_data_valid,
        if_fifo_cap => inStream_x_fifo_cap,
        if_empty_n => inStream_x_empty_n,
        if_read => ini_trans_U0_inStream_x_read);

    inStream_y_U : component cordiccart2pol_fifo_w32_d1_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry39_proc9_U0_inStream_y_din,
        if_full_n => inStream_y_full_n,
        if_write => Block_entry39_proc9_U0_inStream_y_write,
        if_dout => inStream_y_dout,
        if_num_data_valid => inStream_y_num_data_valid,
        if_fifo_cap => inStream_y_fifo_cap,
        if_empty_n => inStream_y_empty_n,
        if_read => ini_trans_U0_inStream_y_read);

    x_pip_V_0_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ini_trans_U0_ap_return_0,
        if_full_n => x_pip_V_0_c_channel_full_n,
        if_write => ap_channel_done_x_pip_V_0_c_channel,
        if_dout => x_pip_V_0_c_channel_dout,
        if_num_data_valid => x_pip_V_0_c_channel_num_data_valid,
        if_fifo_cap => x_pip_V_0_c_channel_fifo_cap,
        if_empty_n => x_pip_V_0_c_channel_empty_n,
        if_read => cordic_cr_unsigned_short_1_U0_ap_ready);

    y_pip_V_0_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ini_trans_U0_ap_return_1,
        if_full_n => y_pip_V_0_c_channel_full_n,
        if_write => ap_channel_done_y_pip_V_0_c_channel,
        if_dout => y_pip_V_0_c_channel_dout,
        if_num_data_valid => y_pip_V_0_c_channel_num_data_valid,
        if_fifo_cap => y_pip_V_0_c_channel_fifo_cap,
        if_empty_n => y_pip_V_0_c_channel_empty_n,
        if_read => cordic_cr_unsigned_short_1_U0_ap_ready);

    theta_pip_V_0_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ini_trans_U0_ap_return_2,
        if_full_n => theta_pip_V_0_c_channel_full_n,
        if_write => ap_channel_done_theta_pip_V_0_c_channel,
        if_dout => theta_pip_V_0_c_channel_dout,
        if_num_data_valid => theta_pip_V_0_c_channel_num_data_valid,
        if_fifo_cap => theta_pip_V_0_c_channel_fifo_cap,
        if_empty_n => theta_pip_V_0_c_channel_empty_n,
        if_read => cordic_cr_unsigned_short_1_U0_ap_ready);

    x_pip_V_1_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cordic_cr_unsigned_short_1_U0_ap_return_0,
        if_full_n => x_pip_V_1_c_channel_full_n,
        if_write => ap_channel_done_x_pip_V_1_c_channel,
        if_dout => x_pip_V_1_c_channel_dout,
        if_num_data_valid => x_pip_V_1_c_channel_num_data_valid,
        if_fifo_cap => x_pip_V_1_c_channel_fifo_cap,
        if_empty_n => x_pip_V_1_c_channel_empty_n,
        if_read => cordic_cr_unsigned_short_2_U0_ap_ready);

    y_pip_V_1_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cordic_cr_unsigned_short_1_U0_ap_return_1,
        if_full_n => y_pip_V_1_c_channel_full_n,
        if_write => ap_channel_done_y_pip_V_1_c_channel,
        if_dout => y_pip_V_1_c_channel_dout,
        if_num_data_valid => y_pip_V_1_c_channel_num_data_valid,
        if_fifo_cap => y_pip_V_1_c_channel_fifo_cap,
        if_empty_n => y_pip_V_1_c_channel_empty_n,
        if_read => cordic_cr_unsigned_short_2_U0_ap_ready);

    theta_pip_V_1_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cordic_cr_unsigned_short_1_U0_ap_return_2,
        if_full_n => theta_pip_V_1_c_channel_full_n,
        if_write => ap_channel_done_theta_pip_V_1_c_channel,
        if_dout => theta_pip_V_1_c_channel_dout,
        if_num_data_valid => theta_pip_V_1_c_channel_num_data_valid,
        if_fifo_cap => theta_pip_V_1_c_channel_fifo_cap,
        if_empty_n => theta_pip_V_1_c_channel_empty_n,
        if_read => cordic_cr_unsigned_short_2_U0_ap_ready);

    x_pip_V_2_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cordic_cr_unsigned_short_2_U0_ap_return_0,
        if_full_n => x_pip_V_2_c_channel_full_n,
        if_write => ap_channel_done_x_pip_V_2_c_channel,
        if_dout => x_pip_V_2_c_channel_dout,
        if_num_data_valid => x_pip_V_2_c_channel_num_data_valid,
        if_fifo_cap => x_pip_V_2_c_channel_fifo_cap,
        if_empty_n => x_pip_V_2_c_channel_empty_n,
        if_read => cordic_cr_unsigned_short_3_U0_ap_ready);

    y_pip_V_2_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cordic_cr_unsigned_short_2_U0_ap_return_1,
        if_full_n => y_pip_V_2_c_channel_full_n,
        if_write => ap_channel_done_y_pip_V_2_c_channel,
        if_dout => y_pip_V_2_c_channel_dout,
        if_num_data_valid => y_pip_V_2_c_channel_num_data_valid,
        if_fifo_cap => y_pip_V_2_c_channel_fifo_cap,
        if_empty_n => y_pip_V_2_c_channel_empty_n,
        if_read => cordic_cr_unsigned_short_3_U0_ap_ready);

    theta_pip_V_2_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cordic_cr_unsigned_short_2_U0_ap_return_2,
        if_full_n => theta_pip_V_2_c_channel_full_n,
        if_write => ap_channel_done_theta_pip_V_2_c_channel,
        if_dout => theta_pip_V_2_c_channel_dout,
        if_num_data_valid => theta_pip_V_2_c_channel_num_data_valid,
        if_fifo_cap => theta_pip_V_2_c_channel_fifo_cap,
        if_empty_n => theta_pip_V_2_c_channel_empty_n,
        if_read => cordic_cr_unsigned_short_3_U0_ap_ready);

    x_pip_V_3_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cordic_cr_unsigned_short_3_U0_ap_return_0,
        if_full_n => x_pip_V_3_c_channel_full_n,
        if_write => ap_channel_done_x_pip_V_3_c_channel,
        if_dout => x_pip_V_3_c_channel_dout,
        if_num_data_valid => x_pip_V_3_c_channel_num_data_valid,
        if_fifo_cap => x_pip_V_3_c_channel_fifo_cap,
        if_empty_n => x_pip_V_3_c_channel_empty_n,
        if_read => cordic_cr_unsigned_short_4_U0_ap_ready);

    y_pip_V_3_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cordic_cr_unsigned_short_3_U0_ap_return_1,
        if_full_n => y_pip_V_3_c_channel_full_n,
        if_write => ap_channel_done_y_pip_V_3_c_channel,
        if_dout => y_pip_V_3_c_channel_dout,
        if_num_data_valid => y_pip_V_3_c_channel_num_data_valid,
        if_fifo_cap => y_pip_V_3_c_channel_fifo_cap,
        if_empty_n => y_pip_V_3_c_channel_empty_n,
        if_read => cordic_cr_unsigned_short_4_U0_ap_ready);

    theta_pip_V_3_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cordic_cr_unsigned_short_3_U0_ap_return_2,
        if_full_n => theta_pip_V_3_c_channel_full_n,
        if_write => ap_channel_done_theta_pip_V_3_c_channel,
        if_dout => theta_pip_V_3_c_channel_dout,
        if_num_data_valid => theta_pip_V_3_c_channel_num_data_valid,
        if_fifo_cap => theta_pip_V_3_c_channel_fifo_cap,
        if_empty_n => theta_pip_V_3_c_channel_empty_n,
        if_read => cordic_cr_unsigned_short_4_U0_ap_ready);

    x_pip_V_4_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cordic_cr_unsigned_short_4_U0_ap_return_0,
        if_full_n => x_pip_V_4_c_channel_full_n,
        if_write => ap_channel_done_x_pip_V_4_c_channel,
        if_dout => x_pip_V_4_c_channel_dout,
        if_num_data_valid => x_pip_V_4_c_channel_num_data_valid,
        if_fifo_cap => x_pip_V_4_c_channel_fifo_cap,
        if_empty_n => x_pip_V_4_c_channel_empty_n,
        if_read => cordic_cr_unsigned_short_5_U0_ap_ready);

    y_pip_V_4_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cordic_cr_unsigned_short_4_U0_ap_return_1,
        if_full_n => y_pip_V_4_c_channel_full_n,
        if_write => ap_channel_done_y_pip_V_4_c_channel,
        if_dout => y_pip_V_4_c_channel_dout,
        if_num_data_valid => y_pip_V_4_c_channel_num_data_valid,
        if_fifo_cap => y_pip_V_4_c_channel_fifo_cap,
        if_empty_n => y_pip_V_4_c_channel_empty_n,
        if_read => cordic_cr_unsigned_short_5_U0_ap_ready);

    theta_pip_V_4_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cordic_cr_unsigned_short_4_U0_ap_return_2,
        if_full_n => theta_pip_V_4_c_channel_full_n,
        if_write => ap_channel_done_theta_pip_V_4_c_channel,
        if_dout => theta_pip_V_4_c_channel_dout,
        if_num_data_valid => theta_pip_V_4_c_channel_num_data_valid,
        if_fifo_cap => theta_pip_V_4_c_channel_fifo_cap,
        if_empty_n => theta_pip_V_4_c_channel_empty_n,
        if_read => cordic_cr_unsigned_short_5_U0_ap_ready);

    x_pip_V_5_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cordic_cr_unsigned_short_5_U0_ap_return_0,
        if_full_n => x_pip_V_5_c_channel_full_n,
        if_write => ap_channel_done_x_pip_V_5_c_channel,
        if_dout => x_pip_V_5_c_channel_dout,
        if_num_data_valid => x_pip_V_5_c_channel_num_data_valid,
        if_fifo_cap => x_pip_V_5_c_channel_fifo_cap,
        if_empty_n => x_pip_V_5_c_channel_empty_n,
        if_read => cordic_cr_unsigned_short_6_U0_ap_ready);

    y_pip_V_5_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cordic_cr_unsigned_short_5_U0_ap_return_1,
        if_full_n => y_pip_V_5_c_channel_full_n,
        if_write => ap_channel_done_y_pip_V_5_c_channel,
        if_dout => y_pip_V_5_c_channel_dout,
        if_num_data_valid => y_pip_V_5_c_channel_num_data_valid,
        if_fifo_cap => y_pip_V_5_c_channel_fifo_cap,
        if_empty_n => y_pip_V_5_c_channel_empty_n,
        if_read => cordic_cr_unsigned_short_6_U0_ap_ready);

    theta_pip_V_5_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cordic_cr_unsigned_short_5_U0_ap_return_2,
        if_full_n => theta_pip_V_5_c_channel_full_n,
        if_write => ap_channel_done_theta_pip_V_5_c_channel,
        if_dout => theta_pip_V_5_c_channel_dout,
        if_num_data_valid => theta_pip_V_5_c_channel_num_data_valid,
        if_fifo_cap => theta_pip_V_5_c_channel_fifo_cap,
        if_empty_n => theta_pip_V_5_c_channel_empty_n,
        if_read => cordic_cr_unsigned_short_6_U0_ap_ready);

    x_pip_V_6_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cordic_cr_unsigned_short_6_U0_ap_return_0,
        if_full_n => x_pip_V_6_c_channel_full_n,
        if_write => ap_channel_done_x_pip_V_6_c_channel,
        if_dout => x_pip_V_6_c_channel_dout,
        if_num_data_valid => x_pip_V_6_c_channel_num_data_valid,
        if_fifo_cap => x_pip_V_6_c_channel_fifo_cap,
        if_empty_n => x_pip_V_6_c_channel_empty_n,
        if_read => Block_entry3947_proc_U0_ap_ready);

    y_pip_V_6_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cordic_cr_unsigned_short_6_U0_ap_return_1,
        if_full_n => y_pip_V_6_c_channel_full_n,
        if_write => ap_channel_done_y_pip_V_6_c_channel,
        if_dout => y_pip_V_6_c_channel_dout,
        if_num_data_valid => y_pip_V_6_c_channel_num_data_valid,
        if_fifo_cap => y_pip_V_6_c_channel_fifo_cap,
        if_empty_n => y_pip_V_6_c_channel_empty_n,
        if_read => Block_entry3947_proc_U0_ap_ready);

    theta_pip_V_6_c_channel_U : component cordiccart2pol_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cordic_cr_unsigned_short_6_U0_ap_return_2,
        if_full_n => theta_pip_V_6_c_channel_full_n,
        if_write => ap_channel_done_theta_pip_V_6_c_channel,
        if_dout => theta_pip_V_6_c_channel_dout,
        if_num_data_valid => theta_pip_V_6_c_channel_num_data_valid,
        if_fifo_cap => theta_pip_V_6_c_channel_fifo_cap,
        if_empty_n => theta_pip_V_6_c_channel_empty_n,
        if_read => Block_entry3947_proc_U0_ap_ready);

    start_for_ini_trans_U0_U : component cordiccart2pol_start_for_ini_trans_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_ini_trans_U0_din,
        if_full_n => start_for_ini_trans_U0_full_n,
        if_write => Block_entry39_proc9_U0_start_write,
        if_dout => start_for_ini_trans_U0_dout,
        if_empty_n => start_for_ini_trans_U0_empty_n,
        if_read => ini_trans_U0_ap_ready);





    ap_sync_reg_channel_write_theta_pip_V_0_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_theta_pip_V_0_c_channel <= ap_const_logic_0;
            else
                if (((ini_trans_U0_ap_done and ini_trans_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_theta_pip_V_0_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_theta_pip_V_0_c_channel <= ap_sync_channel_write_theta_pip_V_0_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_theta_pip_V_1_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_theta_pip_V_1_c_channel <= ap_const_logic_0;
            else
                if (((cordic_cr_unsigned_short_1_U0_ap_done and cordic_cr_unsigned_short_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_theta_pip_V_1_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_theta_pip_V_1_c_channel <= ap_sync_channel_write_theta_pip_V_1_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_theta_pip_V_2_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_theta_pip_V_2_c_channel <= ap_const_logic_0;
            else
                if (((cordic_cr_unsigned_short_2_U0_ap_done and cordic_cr_unsigned_short_2_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_theta_pip_V_2_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_theta_pip_V_2_c_channel <= ap_sync_channel_write_theta_pip_V_2_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_theta_pip_V_3_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_theta_pip_V_3_c_channel <= ap_const_logic_0;
            else
                if (((cordic_cr_unsigned_short_3_U0_ap_done and cordic_cr_unsigned_short_3_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_theta_pip_V_3_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_theta_pip_V_3_c_channel <= ap_sync_channel_write_theta_pip_V_3_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_theta_pip_V_4_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_theta_pip_V_4_c_channel <= ap_const_logic_0;
            else
                if (((cordic_cr_unsigned_short_4_U0_ap_done and cordic_cr_unsigned_short_4_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_theta_pip_V_4_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_theta_pip_V_4_c_channel <= ap_sync_channel_write_theta_pip_V_4_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_theta_pip_V_5_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_theta_pip_V_5_c_channel <= ap_const_logic_0;
            else
                if (((cordic_cr_unsigned_short_5_U0_ap_done and cordic_cr_unsigned_short_5_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_theta_pip_V_5_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_theta_pip_V_5_c_channel <= ap_sync_channel_write_theta_pip_V_5_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_theta_pip_V_6_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_theta_pip_V_6_c_channel <= ap_const_logic_0;
            else
                if (((cordic_cr_unsigned_short_6_U0_ap_done and cordic_cr_unsigned_short_6_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_theta_pip_V_6_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_theta_pip_V_6_c_channel <= ap_sync_channel_write_theta_pip_V_6_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_x_pip_V_0_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_x_pip_V_0_c_channel <= ap_const_logic_0;
            else
                if (((ini_trans_U0_ap_done and ini_trans_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_x_pip_V_0_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_x_pip_V_0_c_channel <= ap_sync_channel_write_x_pip_V_0_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_x_pip_V_1_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_x_pip_V_1_c_channel <= ap_const_logic_0;
            else
                if (((cordic_cr_unsigned_short_1_U0_ap_done and cordic_cr_unsigned_short_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_x_pip_V_1_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_x_pip_V_1_c_channel <= ap_sync_channel_write_x_pip_V_1_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_x_pip_V_2_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_x_pip_V_2_c_channel <= ap_const_logic_0;
            else
                if (((cordic_cr_unsigned_short_2_U0_ap_done and cordic_cr_unsigned_short_2_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_x_pip_V_2_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_x_pip_V_2_c_channel <= ap_sync_channel_write_x_pip_V_2_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_x_pip_V_3_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_x_pip_V_3_c_channel <= ap_const_logic_0;
            else
                if (((cordic_cr_unsigned_short_3_U0_ap_done and cordic_cr_unsigned_short_3_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_x_pip_V_3_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_x_pip_V_3_c_channel <= ap_sync_channel_write_x_pip_V_3_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_x_pip_V_4_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_x_pip_V_4_c_channel <= ap_const_logic_0;
            else
                if (((cordic_cr_unsigned_short_4_U0_ap_done and cordic_cr_unsigned_short_4_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_x_pip_V_4_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_x_pip_V_4_c_channel <= ap_sync_channel_write_x_pip_V_4_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_x_pip_V_5_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_x_pip_V_5_c_channel <= ap_const_logic_0;
            else
                if (((cordic_cr_unsigned_short_5_U0_ap_done and cordic_cr_unsigned_short_5_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_x_pip_V_5_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_x_pip_V_5_c_channel <= ap_sync_channel_write_x_pip_V_5_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_x_pip_V_6_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_x_pip_V_6_c_channel <= ap_const_logic_0;
            else
                if (((cordic_cr_unsigned_short_6_U0_ap_done and cordic_cr_unsigned_short_6_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_x_pip_V_6_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_x_pip_V_6_c_channel <= ap_sync_channel_write_x_pip_V_6_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_y_pip_V_0_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_y_pip_V_0_c_channel <= ap_const_logic_0;
            else
                if (((ini_trans_U0_ap_done and ini_trans_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_y_pip_V_0_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_y_pip_V_0_c_channel <= ap_sync_channel_write_y_pip_V_0_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_y_pip_V_1_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_y_pip_V_1_c_channel <= ap_const_logic_0;
            else
                if (((cordic_cr_unsigned_short_1_U0_ap_done and cordic_cr_unsigned_short_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_y_pip_V_1_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_y_pip_V_1_c_channel <= ap_sync_channel_write_y_pip_V_1_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_y_pip_V_2_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_y_pip_V_2_c_channel <= ap_const_logic_0;
            else
                if (((cordic_cr_unsigned_short_2_U0_ap_done and cordic_cr_unsigned_short_2_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_y_pip_V_2_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_y_pip_V_2_c_channel <= ap_sync_channel_write_y_pip_V_2_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_y_pip_V_3_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_y_pip_V_3_c_channel <= ap_const_logic_0;
            else
                if (((cordic_cr_unsigned_short_3_U0_ap_done and cordic_cr_unsigned_short_3_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_y_pip_V_3_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_y_pip_V_3_c_channel <= ap_sync_channel_write_y_pip_V_3_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_y_pip_V_4_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_y_pip_V_4_c_channel <= ap_const_logic_0;
            else
                if (((cordic_cr_unsigned_short_4_U0_ap_done and cordic_cr_unsigned_short_4_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_y_pip_V_4_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_y_pip_V_4_c_channel <= ap_sync_channel_write_y_pip_V_4_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_y_pip_V_5_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_y_pip_V_5_c_channel <= ap_const_logic_0;
            else
                if (((cordic_cr_unsigned_short_5_U0_ap_done and cordic_cr_unsigned_short_5_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_y_pip_V_5_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_y_pip_V_5_c_channel <= ap_sync_channel_write_y_pip_V_5_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_y_pip_V_6_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_y_pip_V_6_c_channel <= ap_const_logic_0;
            else
                if (((cordic_cr_unsigned_short_6_U0_ap_done and cordic_cr_unsigned_short_6_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_y_pip_V_6_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_y_pip_V_6_c_channel <= ap_sync_channel_write_y_pip_V_6_c_channel;
                end if; 
            end if;
        end if;
    end process;

    Block_entry3947_proc_U0_ap_continue <= ap_continue;
    Block_entry3947_proc_U0_ap_start <= (y_pip_V_6_c_channel_empty_n and x_pip_V_6_c_channel_empty_n and theta_pip_V_6_c_channel_empty_n);
    Block_entry39_proc9_U0_ap_continue <= ap_const_logic_1;
    Block_entry39_proc9_U0_ap_start <= ap_start;
    ap_channel_done_theta_pip_V_0_c_channel <= (ini_trans_U0_ap_done and (ap_sync_reg_channel_write_theta_pip_V_0_c_channel xor ap_const_logic_1));
    ap_channel_done_theta_pip_V_1_c_channel <= ((ap_sync_reg_channel_write_theta_pip_V_1_c_channel xor ap_const_logic_1) and cordic_cr_unsigned_short_1_U0_ap_done);
    ap_channel_done_theta_pip_V_2_c_channel <= ((ap_sync_reg_channel_write_theta_pip_V_2_c_channel xor ap_const_logic_1) and cordic_cr_unsigned_short_2_U0_ap_done);
    ap_channel_done_theta_pip_V_3_c_channel <= ((ap_sync_reg_channel_write_theta_pip_V_3_c_channel xor ap_const_logic_1) and cordic_cr_unsigned_short_3_U0_ap_done);
    ap_channel_done_theta_pip_V_4_c_channel <= ((ap_sync_reg_channel_write_theta_pip_V_4_c_channel xor ap_const_logic_1) and cordic_cr_unsigned_short_4_U0_ap_done);
    ap_channel_done_theta_pip_V_5_c_channel <= ((ap_sync_reg_channel_write_theta_pip_V_5_c_channel xor ap_const_logic_1) and cordic_cr_unsigned_short_5_U0_ap_done);
    ap_channel_done_theta_pip_V_6_c_channel <= ((ap_sync_reg_channel_write_theta_pip_V_6_c_channel xor ap_const_logic_1) and cordic_cr_unsigned_short_6_U0_ap_done);
    ap_channel_done_x_pip_V_0_c_channel <= (ini_trans_U0_ap_done and (ap_sync_reg_channel_write_x_pip_V_0_c_channel xor ap_const_logic_1));
    ap_channel_done_x_pip_V_1_c_channel <= ((ap_sync_reg_channel_write_x_pip_V_1_c_channel xor ap_const_logic_1) and cordic_cr_unsigned_short_1_U0_ap_done);
    ap_channel_done_x_pip_V_2_c_channel <= ((ap_sync_reg_channel_write_x_pip_V_2_c_channel xor ap_const_logic_1) and cordic_cr_unsigned_short_2_U0_ap_done);
    ap_channel_done_x_pip_V_3_c_channel <= ((ap_sync_reg_channel_write_x_pip_V_3_c_channel xor ap_const_logic_1) and cordic_cr_unsigned_short_3_U0_ap_done);
    ap_channel_done_x_pip_V_4_c_channel <= ((ap_sync_reg_channel_write_x_pip_V_4_c_channel xor ap_const_logic_1) and cordic_cr_unsigned_short_4_U0_ap_done);
    ap_channel_done_x_pip_V_5_c_channel <= ((ap_sync_reg_channel_write_x_pip_V_5_c_channel xor ap_const_logic_1) and cordic_cr_unsigned_short_5_U0_ap_done);
    ap_channel_done_x_pip_V_6_c_channel <= ((ap_sync_reg_channel_write_x_pip_V_6_c_channel xor ap_const_logic_1) and cordic_cr_unsigned_short_6_U0_ap_done);
    ap_channel_done_y_pip_V_0_c_channel <= (ini_trans_U0_ap_done and (ap_sync_reg_channel_write_y_pip_V_0_c_channel xor ap_const_logic_1));
    ap_channel_done_y_pip_V_1_c_channel <= ((ap_sync_reg_channel_write_y_pip_V_1_c_channel xor ap_const_logic_1) and cordic_cr_unsigned_short_1_U0_ap_done);
    ap_channel_done_y_pip_V_2_c_channel <= ((ap_sync_reg_channel_write_y_pip_V_2_c_channel xor ap_const_logic_1) and cordic_cr_unsigned_short_2_U0_ap_done);
    ap_channel_done_y_pip_V_3_c_channel <= ((ap_sync_reg_channel_write_y_pip_V_3_c_channel xor ap_const_logic_1) and cordic_cr_unsigned_short_3_U0_ap_done);
    ap_channel_done_y_pip_V_4_c_channel <= ((ap_sync_reg_channel_write_y_pip_V_4_c_channel xor ap_const_logic_1) and cordic_cr_unsigned_short_4_U0_ap_done);
    ap_channel_done_y_pip_V_5_c_channel <= ((ap_sync_reg_channel_write_y_pip_V_5_c_channel xor ap_const_logic_1) and cordic_cr_unsigned_short_5_U0_ap_done);
    ap_channel_done_y_pip_V_6_c_channel <= ((ap_sync_reg_channel_write_y_pip_V_6_c_channel xor ap_const_logic_1) and cordic_cr_unsigned_short_6_U0_ap_done);
    ap_done <= Block_entry3947_proc_U0_ap_done;
    ap_idle <= (ini_trans_U0_ap_idle and (theta_pip_V_6_c_channel_empty_n xor ap_const_logic_1) and (y_pip_V_6_c_channel_empty_n xor ap_const_logic_1) and (x_pip_V_6_c_channel_empty_n xor ap_const_logic_1) and (theta_pip_V_5_c_channel_empty_n xor ap_const_logic_1) and (y_pip_V_5_c_channel_empty_n xor ap_const_logic_1) and (x_pip_V_5_c_channel_empty_n xor ap_const_logic_1) and (theta_pip_V_4_c_channel_empty_n xor ap_const_logic_1) and (y_pip_V_4_c_channel_empty_n xor ap_const_logic_1) and (x_pip_V_4_c_channel_empty_n xor ap_const_logic_1) and (theta_pip_V_3_c_channel_empty_n xor ap_const_logic_1) and (y_pip_V_3_c_channel_empty_n xor ap_const_logic_1) and (x_pip_V_3_c_channel_empty_n xor ap_const_logic_1) and (theta_pip_V_2_c_channel_empty_n xor ap_const_logic_1) and (y_pip_V_2_c_channel_empty_n xor ap_const_logic_1) and (x_pip_V_2_c_channel_empty_n xor ap_const_logic_1) and (theta_pip_V_1_c_channel_empty_n xor ap_const_logic_1) and (y_pip_V_1_c_channel_empty_n xor ap_const_logic_1) and (x_pip_V_1_c_channel_empty_n xor ap_const_logic_1) and (theta_pip_V_0_c_channel_empty_n xor ap_const_logic_1) and (y_pip_V_0_c_channel_empty_n xor ap_const_logic_1) and (x_pip_V_0_c_channel_empty_n xor ap_const_logic_1) and cordic_cr_unsigned_short_6_U0_ap_idle and cordic_cr_unsigned_short_5_U0_ap_idle and cordic_cr_unsigned_short_4_U0_ap_idle and cordic_cr_unsigned_short_3_U0_ap_idle and cordic_cr_unsigned_short_2_U0_ap_idle and cordic_cr_unsigned_short_1_U0_ap_idle and Block_entry39_proc9_U0_ap_idle and Block_entry3947_proc_U0_ap_idle);
    ap_ready <= Block_entry39_proc9_U0_ap_ready;
    ap_sync_channel_write_theta_pip_V_0_c_channel <= ((theta_pip_V_0_c_channel_full_n and ap_channel_done_theta_pip_V_0_c_channel) or ap_sync_reg_channel_write_theta_pip_V_0_c_channel);
    ap_sync_channel_write_theta_pip_V_1_c_channel <= ((theta_pip_V_1_c_channel_full_n and ap_channel_done_theta_pip_V_1_c_channel) or ap_sync_reg_channel_write_theta_pip_V_1_c_channel);
    ap_sync_channel_write_theta_pip_V_2_c_channel <= ((theta_pip_V_2_c_channel_full_n and ap_channel_done_theta_pip_V_2_c_channel) or ap_sync_reg_channel_write_theta_pip_V_2_c_channel);
    ap_sync_channel_write_theta_pip_V_3_c_channel <= ((theta_pip_V_3_c_channel_full_n and ap_channel_done_theta_pip_V_3_c_channel) or ap_sync_reg_channel_write_theta_pip_V_3_c_channel);
    ap_sync_channel_write_theta_pip_V_4_c_channel <= ((theta_pip_V_4_c_channel_full_n and ap_channel_done_theta_pip_V_4_c_channel) or ap_sync_reg_channel_write_theta_pip_V_4_c_channel);
    ap_sync_channel_write_theta_pip_V_5_c_channel <= ((theta_pip_V_5_c_channel_full_n and ap_channel_done_theta_pip_V_5_c_channel) or ap_sync_reg_channel_write_theta_pip_V_5_c_channel);
    ap_sync_channel_write_theta_pip_V_6_c_channel <= ((theta_pip_V_6_c_channel_full_n and ap_channel_done_theta_pip_V_6_c_channel) or ap_sync_reg_channel_write_theta_pip_V_6_c_channel);
    ap_sync_channel_write_x_pip_V_0_c_channel <= ((x_pip_V_0_c_channel_full_n and ap_channel_done_x_pip_V_0_c_channel) or ap_sync_reg_channel_write_x_pip_V_0_c_channel);
    ap_sync_channel_write_x_pip_V_1_c_channel <= ((x_pip_V_1_c_channel_full_n and ap_channel_done_x_pip_V_1_c_channel) or ap_sync_reg_channel_write_x_pip_V_1_c_channel);
    ap_sync_channel_write_x_pip_V_2_c_channel <= ((x_pip_V_2_c_channel_full_n and ap_channel_done_x_pip_V_2_c_channel) or ap_sync_reg_channel_write_x_pip_V_2_c_channel);
    ap_sync_channel_write_x_pip_V_3_c_channel <= ((x_pip_V_3_c_channel_full_n and ap_channel_done_x_pip_V_3_c_channel) or ap_sync_reg_channel_write_x_pip_V_3_c_channel);
    ap_sync_channel_write_x_pip_V_4_c_channel <= ((x_pip_V_4_c_channel_full_n and ap_channel_done_x_pip_V_4_c_channel) or ap_sync_reg_channel_write_x_pip_V_4_c_channel);
    ap_sync_channel_write_x_pip_V_5_c_channel <= ((x_pip_V_5_c_channel_full_n and ap_channel_done_x_pip_V_5_c_channel) or ap_sync_reg_channel_write_x_pip_V_5_c_channel);
    ap_sync_channel_write_x_pip_V_6_c_channel <= ((x_pip_V_6_c_channel_full_n and ap_channel_done_x_pip_V_6_c_channel) or ap_sync_reg_channel_write_x_pip_V_6_c_channel);
    ap_sync_channel_write_y_pip_V_0_c_channel <= ((y_pip_V_0_c_channel_full_n and ap_channel_done_y_pip_V_0_c_channel) or ap_sync_reg_channel_write_y_pip_V_0_c_channel);
    ap_sync_channel_write_y_pip_V_1_c_channel <= ((y_pip_V_1_c_channel_full_n and ap_channel_done_y_pip_V_1_c_channel) or ap_sync_reg_channel_write_y_pip_V_1_c_channel);
    ap_sync_channel_write_y_pip_V_2_c_channel <= ((y_pip_V_2_c_channel_full_n and ap_channel_done_y_pip_V_2_c_channel) or ap_sync_reg_channel_write_y_pip_V_2_c_channel);
    ap_sync_channel_write_y_pip_V_3_c_channel <= ((y_pip_V_3_c_channel_full_n and ap_channel_done_y_pip_V_3_c_channel) or ap_sync_reg_channel_write_y_pip_V_3_c_channel);
    ap_sync_channel_write_y_pip_V_4_c_channel <= ((y_pip_V_4_c_channel_full_n and ap_channel_done_y_pip_V_4_c_channel) or ap_sync_reg_channel_write_y_pip_V_4_c_channel);
    ap_sync_channel_write_y_pip_V_5_c_channel <= ((y_pip_V_5_c_channel_full_n and ap_channel_done_y_pip_V_5_c_channel) or ap_sync_reg_channel_write_y_pip_V_5_c_channel);
    ap_sync_channel_write_y_pip_V_6_c_channel <= ((y_pip_V_6_c_channel_full_n and ap_channel_done_y_pip_V_6_c_channel) or ap_sync_reg_channel_write_y_pip_V_6_c_channel);
    cordic_cr_unsigned_short_1_U0_ap_continue <= (ap_sync_channel_write_y_pip_V_1_c_channel and ap_sync_channel_write_x_pip_V_1_c_channel and ap_sync_channel_write_theta_pip_V_1_c_channel);
    cordic_cr_unsigned_short_1_U0_ap_start <= (y_pip_V_0_c_channel_empty_n and x_pip_V_0_c_channel_empty_n and theta_pip_V_0_c_channel_empty_n);
    cordic_cr_unsigned_short_2_U0_ap_continue <= (ap_sync_channel_write_y_pip_V_2_c_channel and ap_sync_channel_write_x_pip_V_2_c_channel and ap_sync_channel_write_theta_pip_V_2_c_channel);
    cordic_cr_unsigned_short_2_U0_ap_start <= (y_pip_V_1_c_channel_empty_n and x_pip_V_1_c_channel_empty_n and theta_pip_V_1_c_channel_empty_n);
    cordic_cr_unsigned_short_3_U0_ap_continue <= (ap_sync_channel_write_y_pip_V_3_c_channel and ap_sync_channel_write_x_pip_V_3_c_channel and ap_sync_channel_write_theta_pip_V_3_c_channel);
    cordic_cr_unsigned_short_3_U0_ap_start <= (y_pip_V_2_c_channel_empty_n and x_pip_V_2_c_channel_empty_n and theta_pip_V_2_c_channel_empty_n);
    cordic_cr_unsigned_short_4_U0_ap_continue <= (ap_sync_channel_write_y_pip_V_4_c_channel and ap_sync_channel_write_x_pip_V_4_c_channel and ap_sync_channel_write_theta_pip_V_4_c_channel);
    cordic_cr_unsigned_short_4_U0_ap_start <= (y_pip_V_3_c_channel_empty_n and x_pip_V_3_c_channel_empty_n and theta_pip_V_3_c_channel_empty_n);
    cordic_cr_unsigned_short_5_U0_ap_continue <= (ap_sync_channel_write_y_pip_V_5_c_channel and ap_sync_channel_write_x_pip_V_5_c_channel and ap_sync_channel_write_theta_pip_V_5_c_channel);
    cordic_cr_unsigned_short_5_U0_ap_start <= (y_pip_V_4_c_channel_empty_n and x_pip_V_4_c_channel_empty_n and theta_pip_V_4_c_channel_empty_n);
    cordic_cr_unsigned_short_6_U0_ap_continue <= (ap_sync_channel_write_y_pip_V_6_c_channel and ap_sync_channel_write_x_pip_V_6_c_channel and ap_sync_channel_write_theta_pip_V_6_c_channel);
    cordic_cr_unsigned_short_6_U0_ap_start <= (y_pip_V_5_c_channel_empty_n and x_pip_V_5_c_channel_empty_n and theta_pip_V_5_c_channel_empty_n);
    ini_trans_U0_ap_continue <= (ap_sync_channel_write_y_pip_V_0_c_channel and ap_sync_channel_write_x_pip_V_0_c_channel and ap_sync_channel_write_theta_pip_V_0_c_channel);
    ini_trans_U0_ap_start <= start_for_ini_trans_U0_empty_n;
    r <= Block_entry3947_proc_U0_r;
    r_ap_vld <= Block_entry3947_proc_U0_r_ap_vld;
    start_for_ini_trans_U0_din <= (0=>ap_const_logic_1, others=>'-');
    theta <= Block_entry3947_proc_U0_theta;
    theta_ap_vld <= Block_entry3947_proc_U0_theta_ap_vld;
end behav;
