// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cordiccart2pol_ini_trans (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        inStream_x_dout,
        inStream_x_num_data_valid,
        inStream_x_fifo_cap,
        inStream_x_empty_n,
        inStream_x_read,
        inStream_y_dout,
        inStream_y_num_data_valid,
        inStream_y_fifo_cap,
        inStream_y_empty_n,
        inStream_y_read,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] inStream_x_dout;
input  [1:0] inStream_x_num_data_valid;
input  [1:0] inStream_x_fifo_cap;
input   inStream_x_empty_n;
output   inStream_x_read;
input  [31:0] inStream_y_dout;
input  [1:0] inStream_y_num_data_valid;
input  [1:0] inStream_y_fifo_cap;
input   inStream_y_empty_n;
output   inStream_y_read;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inStream_x_read;
reg inStream_y_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] ini_phase_V_address0;
reg    ini_phase_V_ce0;
wire   [15:0] ini_phase_V_q0;
reg    inStream_x_blk_n;
reg    inStream_y_blk_n;
reg   [31:0] inStream_x_read_reg_901;
reg   [31:0] inStream_y_read_reg_907;
wire    ap_CS_fsm_state2;
wire   [62:0] trunc_ln590_fu_131_p1;
reg   [62:0] trunc_ln590_reg_923;
wire    ap_CS_fsm_state4;
reg   [0:0] p_Result_10_reg_928;
reg   [10:0] exp_tmp_reg_934;
wire   [51:0] trunc_ln600_fu_153_p1;
reg   [51:0] trunc_ln600_reg_939;
wire   [62:0] trunc_ln590_1_fu_161_p1;
reg   [62:0] trunc_ln590_1_reg_944;
reg   [0:0] p_Result_12_reg_949;
reg   [10:0] exp_tmp_1_reg_955;
wire   [51:0] trunc_ln600_1_fu_183_p1;
reg   [51:0] trunc_ln600_1_reg_960;
wire   [53:0] zext_ln604_fu_197_p1;
reg   [53:0] zext_ln604_reg_965;
wire    ap_CS_fsm_state5;
wire   [53:0] man_V_2_fu_201_p2;
reg   [53:0] man_V_2_reg_970;
wire   [0:0] icmp_ln606_fu_207_p2;
reg   [0:0] icmp_ln606_reg_975;
wire   [11:0] F2_fu_212_p2;
reg   [11:0] F2_reg_982;
wire   [10:0] trunc_ln610_fu_218_p1;
reg   [10:0] trunc_ln610_reg_991;
wire   [0:0] icmp_ln616_fu_222_p2;
reg   [0:0] icmp_ln616_reg_996;
wire   [5:0] trunc_ln630_fu_228_p1;
reg   [5:0] trunc_ln630_reg_1002;
wire   [53:0] zext_ln604_1_fu_242_p1;
reg   [53:0] zext_ln604_1_reg_1007;
wire   [53:0] man_V_3_fu_246_p2;
reg   [53:0] man_V_3_reg_1012;
wire   [0:0] icmp_ln606_1_fu_252_p2;
reg   [0:0] icmp_ln606_1_reg_1017;
wire   [11:0] F2_1_fu_257_p2;
reg   [11:0] F2_1_reg_1024;
wire   [10:0] trunc_ln610_1_fu_263_p1;
reg   [10:0] trunc_ln610_1_reg_1033;
wire   [0:0] icmp_ln616_1_fu_267_p2;
reg   [0:0] icmp_ln616_1_reg_1038;
wire   [5:0] trunc_ln630_1_fu_273_p1;
reg   [5:0] trunc_ln630_1_reg_1044;
wire   [53:0] man_V_5_fu_277_p3;
reg   [53:0] man_V_5_reg_1049;
wire    ap_CS_fsm_state6;
wire  signed [11:0] sh_amt_fu_292_p3;
reg  signed [11:0] sh_amt_reg_1056;
wire   [0:0] icmp_ln617_fu_299_p2;
reg   [0:0] icmp_ln617_reg_1062;
wire   [15:0] trunc_ln618_fu_304_p1;
reg   [15:0] trunc_ln618_reg_1068;
wire   [0:0] icmp_ln626_fu_308_p2;
reg   [0:0] icmp_ln626_reg_1074;
wire   [0:0] icmp_ln638_fu_324_p2;
reg   [0:0] icmp_ln638_reg_1079;
wire   [0:0] icmp_ln629_fu_330_p2;
reg   [0:0] icmp_ln629_reg_1084;
wire   [0:0] icmp_ln630_fu_340_p2;
reg   [0:0] icmp_ln630_reg_1089;
wire   [5:0] sub_ln630_fu_346_p2;
reg   [5:0] sub_ln630_reg_1094;
wire   [53:0] man_V_fu_351_p3;
reg   [53:0] man_V_reg_1099;
wire  signed [11:0] sh_amt_1_fu_366_p3;
reg  signed [11:0] sh_amt_1_reg_1106;
wire   [0:0] icmp_ln617_1_fu_373_p2;
reg   [0:0] icmp_ln617_1_reg_1112;
wire   [15:0] trunc_ln618_1_fu_378_p1;
reg   [15:0] trunc_ln618_1_reg_1118;
wire   [0:0] icmp_ln626_1_fu_382_p2;
reg   [0:0] icmp_ln626_1_reg_1124;
wire   [0:0] icmp_ln638_1_fu_398_p2;
reg   [0:0] icmp_ln638_1_reg_1129;
wire   [0:0] icmp_ln629_1_fu_404_p2;
reg   [0:0] icmp_ln629_1_reg_1134;
wire   [0:0] icmp_ln630_2_fu_414_p2;
reg   [0:0] icmp_ln630_2_reg_1139;
wire   [5:0] sub_ln630_1_fu_420_p2;
reg   [5:0] sub_ln630_1_reg_1144;
wire   [0:0] icmp_ln620_fu_428_p2;
reg   [0:0] icmp_ln620_reg_1149;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln630_1_fu_472_p2;
reg   [0:0] icmp_ln630_1_reg_1164;
wire   [0:0] icmp_ln620_1_fu_481_p2;
reg   [0:0] icmp_ln620_1_reg_1169;
wire   [0:0] icmp_ln630_3_fu_525_p2;
reg   [0:0] icmp_ln630_3_reg_1184;
wire   [53:0] grp_fu_437_p2;
reg   [53:0] ashr_ln621_reg_1189;
wire    ap_CS_fsm_state8;
wire   [15:0] grp_fu_446_p2;
reg   [15:0] shl_ln639_reg_1194;
wire   [53:0] grp_fu_490_p2;
reg   [53:0] ashr_ln621_1_reg_1199;
wire   [15:0] grp_fu_499_p2;
reg   [15:0] shl_ln639_1_reg_1204;
wire   [15:0] p_Val2_2_fu_549_p3;
reg   [15:0] p_Val2_2_reg_1209;
wire    ap_CS_fsm_state9;
wire   [10:0] add_ln626_fu_566_p2;
reg   [10:0] add_ln626_reg_1214;
wire   [0:0] or_ln420_fu_575_p2;
reg   [0:0] or_ln420_reg_1219;
wire   [15:0] select_ln617_fu_591_p3;
reg   [15:0] select_ln617_reg_1224;
wire   [15:0] p_Val2_5_fu_616_p3;
reg   [15:0] p_Val2_5_reg_1229;
wire   [10:0] add_ln626_1_fu_633_p2;
reg   [10:0] add_ln626_1_reg_1234;
wire   [0:0] or_ln420_1_fu_642_p2;
reg   [0:0] or_ln420_1_reg_1239;
wire   [15:0] select_ln617_1_fu_658_p3;
reg   [15:0] select_ln617_1_reg_1244;
wire   [15:0] select_ln606_fu_717_p3;
reg   [15:0] select_ln606_reg_1249;
wire    ap_CS_fsm_state10;
wire   [15:0] p_Val2_6_fu_776_p3;
reg   [15:0] p_Val2_6_reg_1259;
reg   [0:0] tmp_9_reg_1268;
wire   [15:0] r_3_fu_791_p2;
reg   [15:0] r_3_reg_1273;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln1696_fu_796_p2;
reg   [0:0] icmp_ln1696_reg_1278;
wire   [0:0] icmp_ln1696_1_fu_801_p2;
reg   [0:0] icmp_ln1696_1_reg_1286;
wire   [63:0] zext_ln42_fu_810_p1;
reg    ap_block_state1;
wire   [31:0] grp_fu_113_p0;
wire   [31:0] grp_fu_116_p0;
wire   [63:0] grp_fu_113_p1;
wire   [63:0] ireg_fu_127_p1;
wire   [63:0] grp_fu_116_p1;
wire   [63:0] ireg_1_fu_157_p1;
wire   [52:0] p_Result_11_fu_190_p3;
wire   [11:0] zext_ln501_fu_187_p1;
wire   [52:0] p_Result_13_fu_235_p3;
wire   [11:0] zext_ln501_1_fu_232_p1;
wire   [11:0] add_ln616_fu_282_p2;
wire   [11:0] sub_ln616_fu_287_p2;
wire   [7:0] tmp_4_fu_314_p4;
wire   [11:0] add_ln630_fu_335_p2;
wire   [11:0] add_ln616_1_fu_356_p2;
wire   [11:0] sub_ln616_1_fu_361_p2;
wire   [7:0] tmp_8_fu_388_p4;
wire   [11:0] add_ln630_1_fu_409_p2;
wire  signed [31:0] sext_ln616_fu_425_p1;
wire   [53:0] grp_fu_437_p1;
wire   [15:0] grp_fu_446_p1;
wire   [5:0] select_ln630_fu_451_p3;
wire   [53:0] zext_ln630_fu_457_p1;
wire   [53:0] lshr_ln630_fu_461_p2;
wire   [53:0] p_Result_3_fu_467_p2;
wire  signed [31:0] sext_ln616_1_fu_478_p1;
wire   [53:0] grp_fu_490_p1;
wire   [15:0] grp_fu_499_p1;
wire   [5:0] select_ln630_1_fu_504_p3;
wire   [53:0] zext_ln630_1_fu_510_p1;
wire   [53:0] lshr_ln630_1_fu_514_p2;
wire   [53:0] p_Result_8_fu_520_p2;
wire   [0:0] tmp_3_fu_531_p3;
wire   [15:0] trunc_ln621_fu_546_p1;
wire   [15:0] select_ln623_fu_538_p3;
wire   [0:0] p_Result_4_fu_556_p1;
wire   [0:0] r_fu_571_p2;
wire   [0:0] xor_ln606_fu_581_p2;
wire   [0:0] and_ln617_fu_586_p2;
wire   [15:0] select_ln638_fu_560_p3;
wire   [0:0] tmp_7_fu_598_p3;
wire   [15:0] trunc_ln621_1_fu_613_p1;
wire   [15:0] select_ln623_1_fu_605_p3;
wire   [0:0] p_Result_9_fu_623_p1;
wire   [0:0] r_1_fu_638_p2;
wire   [0:0] xor_ln606_1_fu_648_p2;
wire   [0:0] and_ln617_1_fu_653_p2;
wire   [15:0] select_ln638_1_fu_627_p3;
wire   [31:0] zext_ln626_fu_665_p1;
wire   [0:0] p_Result_s_fu_668_p3;
wire   [0:0] qb_fu_675_p3;
wire   [0:0] and_ln420_fu_681_p2;
wire   [15:0] zext_ln423_fu_686_p1;
wire   [0:0] or_ln617_fu_695_p2;
wire   [0:0] xor_ln617_fu_699_p2;
wire   [0:0] and_ln616_fu_705_p2;
wire   [15:0] add_ln423_fu_690_p2;
wire   [15:0] select_ln616_fu_710_p3;
wire   [31:0] zext_ln626_1_fu_724_p1;
wire   [0:0] p_Result_5_fu_727_p3;
wire   [0:0] qb_1_fu_734_p3;
wire   [0:0] and_ln420_1_fu_740_p2;
wire   [15:0] zext_ln423_1_fu_745_p1;
wire   [0:0] or_ln617_1_fu_754_p2;
wire   [0:0] xor_ln617_1_fu_758_p2;
wire   [0:0] and_ln616_1_fu_764_p2;
wire   [15:0] add_ln423_1_fu_749_p2;
wire   [15:0] select_ln616_2_fu_769_p3;
wire   [0:0] xor_ln42_fu_805_p2;
wire    ap_CS_fsm_state12;
wire   [15:0] r_2_fu_815_p2;
wire   [0:0] and_ln1696_fu_838_p2;
wire   [15:0] select_ln1696_fu_842_p3;
wire   [15:0] r_4_fu_825_p3;
wire   [15:0] select_ln1696_2_fu_855_p3;
wire   [15:0] p_Val2_7_fu_820_p3;
wire   [15:0] select_ln1696_4_fu_868_p3;
wire   [15:0] select_ln42_fu_831_p3;
wire   [15:0] select_ln1696_3_fu_861_p3;
wire   [15:0] select_ln1696_1_fu_848_p3;
wire   [15:0] select_ln1696_5_fu_876_p3;
reg   [11:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 12'd1;
end

cordiccart2pol_ini_trans_ini_phase_V_ROM_AUTO_1R #(
    .DataWidth( 16 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
ini_phase_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ini_phase_V_address0),
    .ce0(ini_phase_V_ce0),
    .q0(ini_phase_V_q0)
);

cordiccart2pol_fpext_32ns_64_3_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_3_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_113_p0),
    .ce(1'b1),
    .dout(grp_fu_113_p1)
);

cordiccart2pol_fpext_32ns_64_3_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_3_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_116_p0),
    .ce(1'b1),
    .dout(grp_fu_116_p1)
);

cordiccart2pol_ashr_54ns_32ns_54_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 2 ),
    .din0_WIDTH( 54 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 54 ))
ashr_54ns_32ns_54_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(man_V_5_reg_1049),
    .din1(grp_fu_437_p1),
    .ce(1'b1),
    .dout(grp_fu_437_p2)
);

cordiccart2pol_shl_16ns_16ns_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 0 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
shl_16ns_16ns_16_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln618_reg_1068),
    .din1(grp_fu_446_p1),
    .ce(1'b1),
    .dout(grp_fu_446_p2)
);

cordiccart2pol_ashr_54ns_32ns_54_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 2 ),
    .din0_WIDTH( 54 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 54 ))
ashr_54ns_32ns_54_2_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(man_V_reg_1099),
    .din1(grp_fu_490_p1),
    .ce(1'b1),
    .dout(grp_fu_490_p2)
);

cordiccart2pol_shl_16ns_16ns_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 0 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
shl_16ns_16ns_16_2_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln618_1_reg_1118),
    .din1(grp_fu_499_p1),
    .ce(1'b1),
    .dout(grp_fu_499_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        F2_1_reg_1024 <= F2_1_fu_257_p2;
        F2_reg_982 <= F2_fu_212_p2;
        icmp_ln606_1_reg_1017 <= icmp_ln606_1_fu_252_p2;
        icmp_ln606_reg_975 <= icmp_ln606_fu_207_p2;
        icmp_ln616_1_reg_1038 <= icmp_ln616_1_fu_267_p2;
        icmp_ln616_reg_996 <= icmp_ln616_fu_222_p2;
        trunc_ln610_1_reg_1033 <= trunc_ln610_1_fu_263_p1;
        trunc_ln610_reg_991 <= trunc_ln610_fu_218_p1;
        trunc_ln630_1_reg_1044 <= trunc_ln630_1_fu_273_p1;
        trunc_ln630_reg_1002 <= trunc_ln630_fu_228_p1;
        zext_ln604_1_reg_1007[51 : 0] <= zext_ln604_1_fu_242_p1[51 : 0];
        zext_ln604_reg_965[51 : 0] <= zext_ln604_fu_197_p1[51 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln626_1_reg_1124 == 1'd0) & (icmp_ln606_1_reg_1017 == 1'd0))) begin
        add_ln626_1_reg_1234 <= add_ln626_1_fu_633_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln626_reg_1074 == 1'd0) & (icmp_ln606_reg_975 == 1'd0))) begin
        add_ln626_reg_1214 <= add_ln626_fu_566_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln606_1_reg_1017 == 1'd0))) begin
        ashr_ln621_1_reg_1199 <= grp_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln606_reg_975 == 1'd0))) begin
        ashr_ln621_reg_1189 <= grp_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        exp_tmp_1_reg_955 <= {{ireg_1_fu_157_p1[62:52]}};
        exp_tmp_reg_934 <= {{ireg_fu_127_p1[62:52]}};
        p_Result_10_reg_928 <= ireg_fu_127_p1[32'd63];
        p_Result_12_reg_949 <= ireg_1_fu_157_p1[32'd63];
        trunc_ln590_1_reg_944 <= trunc_ln590_1_fu_161_p1;
        trunc_ln590_reg_923 <= trunc_ln590_fu_131_p1;
        trunc_ln600_1_reg_960 <= trunc_ln600_1_fu_183_p1;
        trunc_ln600_reg_939 <= trunc_ln600_fu_153_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        icmp_ln1696_1_reg_1286 <= icmp_ln1696_1_fu_801_p2;
        icmp_ln1696_reg_1278 <= icmp_ln1696_fu_796_p2;
        r_3_reg_1273 <= r_3_fu_791_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln606_1_reg_1017 == 1'd0))) begin
        icmp_ln617_1_reg_1112 <= icmp_ln617_1_fu_373_p2;
        icmp_ln626_1_reg_1124 <= icmp_ln626_1_fu_382_p2;
        icmp_ln629_1_reg_1134 <= icmp_ln629_1_fu_404_p2;
        icmp_ln630_2_reg_1139 <= icmp_ln630_2_fu_414_p2;
        icmp_ln638_1_reg_1129 <= icmp_ln638_1_fu_398_p2;
        man_V_reg_1099 <= man_V_fu_351_p3;
        sh_amt_1_reg_1106 <= sh_amt_1_fu_366_p3;
        sub_ln630_1_reg_1144 <= sub_ln630_1_fu_420_p2;
        trunc_ln618_1_reg_1118 <= trunc_ln618_1_fu_378_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln606_reg_975 == 1'd0))) begin
        icmp_ln617_reg_1062 <= icmp_ln617_fu_299_p2;
        icmp_ln626_reg_1074 <= icmp_ln626_fu_308_p2;
        icmp_ln629_reg_1084 <= icmp_ln629_fu_330_p2;
        icmp_ln630_reg_1089 <= icmp_ln630_fu_340_p2;
        icmp_ln638_reg_1079 <= icmp_ln638_fu_324_p2;
        man_V_5_reg_1049 <= man_V_5_fu_277_p3;
        sh_amt_reg_1056 <= sh_amt_fu_292_p3;
        sub_ln630_reg_1094 <= sub_ln630_fu_346_p2;
        trunc_ln618_reg_1068 <= trunc_ln618_fu_304_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln606_1_reg_1017 == 1'd0))) begin
        icmp_ln620_1_reg_1169 <= icmp_ln620_1_fu_481_p2;
        icmp_ln630_3_reg_1184 <= icmp_ln630_3_fu_525_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln606_reg_975 == 1'd0))) begin
        icmp_ln620_reg_1149 <= icmp_ln620_fu_428_p2;
        icmp_ln630_1_reg_1164 <= icmp_ln630_1_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        inStream_x_read_reg_901 <= inStream_x_dout;
        inStream_y_read_reg_907 <= inStream_y_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((p_Result_10_reg_928 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        man_V_2_reg_970 <= man_V_2_fu_201_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((p_Result_12_reg_949 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        man_V_3_reg_1012 <= man_V_3_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln606_1_reg_1017 == 1'd0))) begin
        or_ln420_1_reg_1239 <= or_ln420_1_fu_642_p2;
        p_Val2_5_reg_1229 <= p_Val2_5_fu_616_p3;
        select_ln617_1_reg_1244 <= select_ln617_1_fu_658_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln606_reg_975 == 1'd0))) begin
        or_ln420_reg_1219 <= or_ln420_fu_575_p2;
        p_Val2_2_reg_1209 <= p_Val2_2_fu_549_p3;
        select_ln617_reg_1224 <= select_ln617_fu_591_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_6_reg_1259 <= p_Val2_6_fu_776_p3;
        select_ln606_reg_1249 <= select_ln606_fu_717_p3;
        tmp_9_reg_1268 <= p_Val2_6_fu_776_p3[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln638_1_reg_1129 == 1'd1) & (icmp_ln606_1_reg_1017 == 1'd0))) begin
        shl_ln639_1_reg_1204 <= grp_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln638_reg_1079 == 1'd1) & (icmp_ln606_reg_975 == 1'd0))) begin
        shl_ln639_reg_1194 <= grp_fu_446_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if (((inStream_y_empty_n == 1'b0) | (inStream_x_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        inStream_x_blk_n = inStream_x_empty_n;
    end else begin
        inStream_x_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((inStream_y_empty_n == 1'b0) | (inStream_x_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        inStream_x_read = 1'b1;
    end else begin
        inStream_x_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        inStream_y_blk_n = inStream_y_empty_n;
    end else begin
        inStream_y_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((inStream_y_empty_n == 1'b0) | (inStream_x_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        inStream_y_read = 1'b1;
    end else begin
        inStream_y_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ini_phase_V_ce0 = 1'b1;
    end else begin
        ini_phase_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((inStream_y_empty_n == 1'b0) | (inStream_x_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_1_fu_257_p2 = (12'd1075 - zext_ln501_1_fu_232_p1);

assign F2_fu_212_p2 = (12'd1075 - zext_ln501_fu_187_p1);

assign add_ln423_1_fu_749_p2 = (p_Val2_5_reg_1229 + zext_ln423_1_fu_745_p1);

assign add_ln423_fu_690_p2 = (p_Val2_2_reg_1209 + zext_ln423_fu_686_p1);

assign add_ln616_1_fu_356_p2 = ($signed(F2_1_reg_1024) + $signed(12'd4083));

assign add_ln616_fu_282_p2 = ($signed(F2_reg_982) + $signed(12'd4083));

assign add_ln626_1_fu_633_p2 = ($signed(trunc_ln610_1_reg_1033) + $signed(11'd2034));

assign add_ln626_fu_566_p2 = ($signed(trunc_ln610_reg_991) + $signed(11'd2034));

assign add_ln630_1_fu_409_p2 = ($signed(F2_1_reg_1024) + $signed(12'd4081));

assign add_ln630_fu_335_p2 = ($signed(F2_reg_982) + $signed(12'd4081));

assign and_ln1696_fu_838_p2 = (icmp_ln1696_reg_1278 & icmp_ln1696_1_reg_1286);

assign and_ln420_1_fu_740_p2 = (qb_1_fu_734_p3 & or_ln420_1_reg_1239);

assign and_ln420_fu_681_p2 = (qb_fu_675_p3 & or_ln420_reg_1219);

assign and_ln616_1_fu_764_p2 = (xor_ln617_1_fu_758_p2 & icmp_ln616_1_reg_1038);

assign and_ln616_fu_705_p2 = (xor_ln617_fu_699_p2 & icmp_ln616_reg_996);

assign and_ln617_1_fu_653_p2 = (xor_ln606_1_fu_648_p2 & icmp_ln617_1_reg_1112);

assign and_ln617_fu_586_p2 = (xor_ln606_fu_581_p2 & icmp_ln617_reg_1062);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((inStream_y_empty_n == 1'b0) | (inStream_x_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_return_0 = select_ln1696_3_fu_861_p3;

assign ap_return_1 = select_ln1696_1_fu_848_p3;

assign ap_return_2 = select_ln1696_5_fu_876_p3;

assign grp_fu_113_p0 = inStream_x_read_reg_901;

assign grp_fu_116_p0 = inStream_y_read_reg_907;

assign grp_fu_437_p1 = $unsigned(sext_ln616_fu_425_p1);

assign grp_fu_446_p1 = sext_ln616_fu_425_p1[15:0];

assign grp_fu_490_p1 = $unsigned(sext_ln616_1_fu_478_p1);

assign grp_fu_499_p1 = sext_ln616_1_fu_478_p1[15:0];

assign icmp_ln1696_1_fu_801_p2 = (($signed(select_ln606_reg_1249) < $signed(p_Val2_6_reg_1259)) ? 1'b1 : 1'b0);

assign icmp_ln1696_fu_796_p2 = (($signed(select_ln606_reg_1249) < $signed(r_3_fu_791_p2)) ? 1'b1 : 1'b0);

assign icmp_ln606_1_fu_252_p2 = ((trunc_ln590_1_reg_944 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln606_fu_207_p2 = ((trunc_ln590_reg_923 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln616_1_fu_267_p2 = (($signed(F2_1_fu_257_p2) > $signed(12'd13)) ? 1'b1 : 1'b0);

assign icmp_ln616_fu_222_p2 = (($signed(F2_fu_212_p2) > $signed(12'd13)) ? 1'b1 : 1'b0);

assign icmp_ln617_1_fu_373_p2 = ((F2_1_reg_1024 == 12'd13) ? 1'b1 : 1'b0);

assign icmp_ln617_fu_299_p2 = ((F2_reg_982 == 12'd13) ? 1'b1 : 1'b0);

assign icmp_ln620_1_fu_481_p2 = ((sh_amt_1_reg_1106 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln620_fu_428_p2 = ((sh_amt_reg_1056 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln626_1_fu_382_p2 = (($signed(add_ln616_1_fu_356_p2) > $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln626_fu_308_p2 = (($signed(add_ln616_fu_282_p2) > $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln629_1_fu_404_p2 = (($signed(F2_1_reg_1024) > $signed(12'd14)) ? 1'b1 : 1'b0);

assign icmp_ln629_fu_330_p2 = (($signed(F2_reg_982) > $signed(12'd14)) ? 1'b1 : 1'b0);

assign icmp_ln630_1_fu_472_p2 = ((p_Result_3_fu_467_p2 != 54'd0) ? 1'b1 : 1'b0);

assign icmp_ln630_2_fu_414_p2 = (($signed(add_ln630_1_fu_409_p2) > $signed(12'd53)) ? 1'b1 : 1'b0);

assign icmp_ln630_3_fu_525_p2 = ((p_Result_8_fu_520_p2 != 54'd0) ? 1'b1 : 1'b0);

assign icmp_ln630_fu_340_p2 = (($signed(add_ln630_fu_335_p2) > $signed(12'd53)) ? 1'b1 : 1'b0);

assign icmp_ln638_1_fu_398_p2 = ((tmp_8_fu_388_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln638_fu_324_p2 = ((tmp_4_fu_314_p4 == 8'd0) ? 1'b1 : 1'b0);

assign ini_phase_V_address0 = zext_ln42_fu_810_p1;

assign ireg_1_fu_157_p1 = grp_fu_116_p1;

assign ireg_fu_127_p1 = grp_fu_113_p1;

assign lshr_ln630_1_fu_514_p2 = 54'd18014398509481983 >> zext_ln630_1_fu_510_p1;

assign lshr_ln630_fu_461_p2 = 54'd18014398509481983 >> zext_ln630_fu_457_p1;

assign man_V_2_fu_201_p2 = (54'd0 - zext_ln604_fu_197_p1);

assign man_V_3_fu_246_p2 = (54'd0 - zext_ln604_1_fu_242_p1);

assign man_V_5_fu_277_p3 = ((p_Result_10_reg_928[0:0] == 1'b1) ? man_V_2_reg_970 : zext_ln604_reg_965);

assign man_V_fu_351_p3 = ((p_Result_12_reg_949[0:0] == 1'b1) ? man_V_3_reg_1012 : zext_ln604_1_reg_1007);

assign or_ln420_1_fu_642_p2 = (r_1_fu_638_p2 | p_Result_9_fu_623_p1);

assign or_ln420_fu_575_p2 = (r_fu_571_p2 | p_Result_4_fu_556_p1);

assign or_ln617_1_fu_754_p2 = (icmp_ln617_1_reg_1112 | icmp_ln606_1_reg_1017);

assign or_ln617_fu_695_p2 = (icmp_ln617_reg_1062 | icmp_ln606_reg_975);

assign p_Result_11_fu_190_p3 = {{1'd1}, {trunc_ln600_reg_939}};

assign p_Result_13_fu_235_p3 = {{1'd1}, {trunc_ln600_1_reg_960}};

assign p_Result_3_fu_467_p2 = (man_V_5_reg_1049 & lshr_ln630_fu_461_p2);

assign p_Result_4_fu_556_p1 = p_Val2_2_fu_549_p3[0:0];

assign p_Result_5_fu_727_p3 = man_V_reg_1099[zext_ln626_1_fu_724_p1];

assign p_Result_8_fu_520_p2 = (man_V_reg_1099 & lshr_ln630_1_fu_514_p2);

assign p_Result_9_fu_623_p1 = p_Val2_5_fu_616_p3[0:0];

assign p_Result_s_fu_668_p3 = man_V_5_reg_1049[zext_ln626_fu_665_p1];

assign p_Val2_2_fu_549_p3 = ((icmp_ln620_reg_1149[0:0] == 1'b1) ? trunc_ln621_fu_546_p1 : select_ln623_fu_538_p3);

assign p_Val2_5_fu_616_p3 = ((icmp_ln620_1_reg_1169[0:0] == 1'b1) ? trunc_ln621_1_fu_613_p1 : select_ln623_1_fu_605_p3);

assign p_Val2_6_fu_776_p3 = ((icmp_ln606_1_reg_1017[0:0] == 1'b1) ? 16'd0 : select_ln616_2_fu_769_p3);

assign p_Val2_7_fu_820_p3 = ((icmp_ln1696_1_reg_1286[0:0] == 1'b1) ? p_Val2_6_reg_1259 : select_ln606_reg_1249);

assign qb_1_fu_734_p3 = ((icmp_ln626_1_reg_1124[0:0] == 1'b1) ? p_Result_12_reg_949 : p_Result_5_fu_727_p3);

assign qb_fu_675_p3 = ((icmp_ln626_reg_1074[0:0] == 1'b1) ? p_Result_10_reg_928 : p_Result_s_fu_668_p3);

assign r_1_fu_638_p2 = (icmp_ln630_3_reg_1184 & icmp_ln629_1_reg_1134);

assign r_2_fu_815_p2 = (select_ln606_reg_1249 ^ 16'd65535);

assign r_3_fu_791_p2 = (p_Val2_6_reg_1259 ^ 16'd65535);

assign r_4_fu_825_p3 = ((icmp_ln1696_1_reg_1286[0:0] == 1'b1) ? r_2_fu_815_p2 : p_Val2_6_reg_1259);

assign r_fu_571_p2 = (icmp_ln630_1_reg_1164 & icmp_ln629_reg_1084);

assign select_ln1696_1_fu_848_p3 = ((icmp_ln1696_reg_1278[0:0] == 1'b1) ? select_ln1696_fu_842_p3 : r_4_fu_825_p3);

assign select_ln1696_2_fu_855_p3 = ((and_ln1696_fu_838_p2[0:0] == 1'b1) ? select_ln606_reg_1249 : r_3_reg_1273);

assign select_ln1696_3_fu_861_p3 = ((icmp_ln1696_reg_1278[0:0] == 1'b1) ? select_ln1696_2_fu_855_p3 : p_Val2_7_fu_820_p3);

assign select_ln1696_4_fu_868_p3 = ((and_ln1696_fu_838_p2[0:0] == 1'b1) ? ini_phase_V_q0 : 16'd52668);

assign select_ln1696_5_fu_876_p3 = ((icmp_ln1696_reg_1278[0:0] == 1'b1) ? select_ln1696_4_fu_868_p3 : select_ln42_fu_831_p3);

assign select_ln1696_fu_842_p3 = ((and_ln1696_fu_838_p2[0:0] == 1'b1) ? p_Val2_6_reg_1259 : select_ln606_reg_1249);

assign select_ln42_fu_831_p3 = ((icmp_ln1696_1_reg_1286[0:0] == 1'b1) ? 16'd12868 : 16'd0);

assign select_ln606_fu_717_p3 = ((icmp_ln606_reg_975[0:0] == 1'b1) ? 16'd0 : select_ln616_fu_710_p3);

assign select_ln616_2_fu_769_p3 = ((and_ln616_1_fu_764_p2[0:0] == 1'b1) ? add_ln423_1_fu_749_p2 : select_ln617_1_reg_1244);

assign select_ln616_fu_710_p3 = ((and_ln616_fu_705_p2[0:0] == 1'b1) ? add_ln423_fu_690_p2 : select_ln617_reg_1224);

assign select_ln617_1_fu_658_p3 = ((and_ln617_1_fu_653_p2[0:0] == 1'b1) ? trunc_ln618_1_reg_1118 : select_ln638_1_fu_627_p3);

assign select_ln617_fu_591_p3 = ((and_ln617_fu_586_p2[0:0] == 1'b1) ? trunc_ln618_reg_1068 : select_ln638_fu_560_p3);

assign select_ln623_1_fu_605_p3 = ((tmp_7_fu_598_p3[0:0] == 1'b1) ? 16'd65535 : 16'd0);

assign select_ln623_fu_538_p3 = ((tmp_3_fu_531_p3[0:0] == 1'b1) ? 16'd65535 : 16'd0);

assign select_ln630_1_fu_504_p3 = ((icmp_ln630_2_reg_1139[0:0] == 1'b1) ? 6'd0 : sub_ln630_1_reg_1144);

assign select_ln630_fu_451_p3 = ((icmp_ln630_reg_1089[0:0] == 1'b1) ? 6'd0 : sub_ln630_reg_1094);

assign select_ln638_1_fu_627_p3 = ((icmp_ln638_1_reg_1129[0:0] == 1'b1) ? shl_ln639_1_reg_1204 : 16'd0);

assign select_ln638_fu_560_p3 = ((icmp_ln638_reg_1079[0:0] == 1'b1) ? shl_ln639_reg_1194 : 16'd0);

assign sext_ln616_1_fu_478_p1 = sh_amt_1_reg_1106;

assign sext_ln616_fu_425_p1 = sh_amt_reg_1056;

assign sh_amt_1_fu_366_p3 = ((icmp_ln616_1_reg_1038[0:0] == 1'b1) ? add_ln616_1_fu_356_p2 : sub_ln616_1_fu_361_p2);

assign sh_amt_fu_292_p3 = ((icmp_ln616_reg_996[0:0] == 1'b1) ? add_ln616_fu_282_p2 : sub_ln616_fu_287_p2);

assign sub_ln616_1_fu_361_p2 = (12'd13 - F2_1_reg_1024);

assign sub_ln616_fu_287_p2 = (12'd13 - F2_reg_982);

assign sub_ln630_1_fu_420_p2 = (6'd4 - trunc_ln630_1_reg_1044);

assign sub_ln630_fu_346_p2 = (6'd4 - trunc_ln630_reg_1002);

assign tmp_3_fu_531_p3 = inStream_x_read_reg_901[32'd31];

assign tmp_4_fu_314_p4 = {{sh_amt_fu_292_p3[11:4]}};

assign tmp_7_fu_598_p3 = inStream_y_read_reg_907[32'd31];

assign tmp_8_fu_388_p4 = {{sh_amt_1_fu_366_p3[11:4]}};

assign trunc_ln590_1_fu_161_p1 = ireg_1_fu_157_p1[62:0];

assign trunc_ln590_fu_131_p1 = ireg_fu_127_p1[62:0];

assign trunc_ln600_1_fu_183_p1 = ireg_1_fu_157_p1[51:0];

assign trunc_ln600_fu_153_p1 = ireg_fu_127_p1[51:0];

assign trunc_ln610_1_fu_263_p1 = F2_1_fu_257_p2[10:0];

assign trunc_ln610_fu_218_p1 = F2_fu_212_p2[10:0];

assign trunc_ln618_1_fu_378_p1 = man_V_fu_351_p3[15:0];

assign trunc_ln618_fu_304_p1 = man_V_5_fu_277_p3[15:0];

assign trunc_ln621_1_fu_613_p1 = ashr_ln621_1_reg_1199[15:0];

assign trunc_ln621_fu_546_p1 = ashr_ln621_reg_1189[15:0];

assign trunc_ln630_1_fu_273_p1 = F2_1_fu_257_p2[5:0];

assign trunc_ln630_fu_228_p1 = F2_fu_212_p2[5:0];

assign xor_ln42_fu_805_p2 = (tmp_9_reg_1268 ^ 1'd1);

assign xor_ln606_1_fu_648_p2 = (icmp_ln606_1_reg_1017 ^ 1'd1);

assign xor_ln606_fu_581_p2 = (icmp_ln606_reg_975 ^ 1'd1);

assign xor_ln617_1_fu_758_p2 = (or_ln617_1_fu_754_p2 ^ 1'd1);

assign xor_ln617_fu_699_p2 = (or_ln617_fu_695_p2 ^ 1'd1);

assign zext_ln423_1_fu_745_p1 = and_ln420_1_fu_740_p2;

assign zext_ln423_fu_686_p1 = and_ln420_fu_681_p2;

assign zext_ln42_fu_810_p1 = xor_ln42_fu_805_p2;

assign zext_ln501_1_fu_232_p1 = exp_tmp_1_reg_955;

assign zext_ln501_fu_187_p1 = exp_tmp_reg_934;

assign zext_ln604_1_fu_242_p1 = p_Result_13_fu_235_p3;

assign zext_ln604_fu_197_p1 = p_Result_11_fu_190_p3;

assign zext_ln626_1_fu_724_p1 = add_ln626_1_reg_1234;

assign zext_ln626_fu_665_p1 = add_ln626_reg_1214;

assign zext_ln630_1_fu_510_p1 = select_ln630_1_fu_504_p3;

assign zext_ln630_fu_457_p1 = select_ln630_fu_451_p3;

always @ (posedge ap_clk) begin
    zext_ln604_reg_965[53:52] <= 2'b01;
    zext_ln604_1_reg_1007[53:52] <= 2'b01;
end

endmodule //cordiccart2pol_ini_trans
