-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cordiccart2pol_Block_entry3947_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
    r : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_ap_vld : OUT STD_LOGIC;
    theta : OUT STD_LOGIC_VECTOR (31 downto 0);
    theta_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cordiccart2pol_Block_entry3947_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv16_FFC0 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111000000";
    constant ap_const_lv16_40 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_FFE8 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111101000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv26_36F : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001101101111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Repl2_s_reg_928 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_941 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_3_reg_946 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_reg_951 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_V_fu_243_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_reg_961 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln859_13_fu_260_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln859_13_reg_966 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln859_14_fu_267_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln859_14_reg_971 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_15_fu_278_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_15_reg_976 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_909_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_4_reg_986 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln874_fu_286_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln874_reg_993 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln423_fu_333_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln423_reg_998 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_V_6_reg_1003 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_Result_29_reg_1010 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_8_reg_1016 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_32_reg_1023 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_355_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_reg_1029 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_V_4_fu_360_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_4_reg_1034 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1136_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1136_reg_1039 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_V_7_fu_370_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_7_reg_1044 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1145_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1145_reg_1051 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1145_fu_411_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1145_reg_1058 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1148_fu_415_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1148_reg_1063 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1144_fu_419_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1144_reg_1068 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1136_1_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1136_1_reg_1073 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_9_fu_428_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_9_reg_1078 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1145_1_fu_463_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1145_1_reg_1085 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1145_1_fu_469_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1145_1_reg_1092 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1148_1_fu_473_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1148_1_reg_1097 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1144_1_fu_477_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1144_1_reg_1102 : STD_LOGIC_VECTOR (7 downto 0);
    signal lsb_index_fu_481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_reg_1107 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_27_reg_1113 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln1148_fu_496_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1148_reg_1118 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1159_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1159_reg_1123 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1160_fu_506_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1160_reg_1128 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_1_fu_511_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_1_reg_1133 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_reg_1139 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln1148_1_fu_526_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1148_1_reg_1144 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1159_1_fu_531_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1159_1_reg_1149 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1160_1_fu_536_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1160_1_reg_1154 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_i_fu_609_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln_i_reg_1159 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln1158_fu_617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1159_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1159_reg_1170 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1150_1_i_fu_711_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln1150_1_i_reg_1185 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln1158_1_fu_719_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1159_1_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1159_1_reg_1196 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_628_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln1159_reg_1211 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_637_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1160_reg_1216 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_730_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln1159_1_reg_1221 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_739_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1160_1_reg_1226 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_9_reg_1231 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal p_Result_19_reg_1236 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_10_reg_1241 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_26_reg_1246 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1144_fu_809_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1144_reg_1251 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal select_ln1144_1_fu_816_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1144_1_reg_1256 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln809_fu_855_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln809_reg_1261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal trunc_ln809_1_fu_891_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln809_1_reg_1266 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal outStream_theta_full_n : STD_LOGIC;
    signal outStream_theta_write : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal outStream_r_full_n : STD_LOGIC;
    signal outStream_r_write : STD_LOGIC;
    signal ap_block_state8 : BOOLEAN;
    signal outStream_r_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal outStream_r_empty_n : STD_LOGIC;
    signal outStream_r_read : STD_LOGIC;
    signal outStream_theta_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal outStream_theta_empty_n : STD_LOGIC;
    signal outStream_theta_read : STD_LOGIC;
    signal ap_block_state9 : BOOLEAN;
    signal select_ln1136_fu_895_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal select_ln1136_1_fu_902_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal theta_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal y_sft_V_fu_218_p9 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln859_fu_233_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_fu_238_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1534_fu_230_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_13_fu_250_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln859_7_fu_255_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_14_fu_274_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_289_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_5_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln420_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_28_fu_305_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln420_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_fu_296_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln423_fu_329_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_15_fu_375_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_30_fu_385_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1244_fu_393_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_397_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_22_fu_433_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_33_fu_443_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1244_1_fu_451_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_1_fu_455_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1148_fu_546_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln1148_fu_549_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_17_fu_555_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1147_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1148_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_572_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1150_fu_585_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_18_fu_590_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1150_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1150_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1150_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1148_1_fu_648_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln1148_1_fu_651_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_24_fu_657_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1147_1_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1148_1_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_674_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1150_1_fu_687_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_fu_692_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1150_1_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1150_1_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_1_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1150_1_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_739_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_745_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1162_fu_750_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_fu_753_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_7_fu_777_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1162_1_fu_782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_8_fu_785_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1165_fu_826_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1170_fu_831_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1163_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_i_fu_836_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_31_fu_843_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1165_1_fu_862_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1170_1_fu_867_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1163_1_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_i_fu_872_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_34_fu_879_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_909_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cordiccart2pol_lshr_64ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cordiccart2pol_shl_64ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cordiccart2pol_mul_mul_16s_10ns_26_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component cordiccart2pol_fifo_w16_d1_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    lshr_64ns_32ns_64_2_1_U35 : component cordiccart2pol_lshr_64ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => zext_ln1158_fu_617_p1,
        din1 => grp_fu_628_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_628_p2);

    shl_64ns_32ns_64_2_1_U36 : component cordiccart2pol_shl_64ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 0,
        din0_WIDTH => 64,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => zext_ln1158_fu_617_p1,
        din1 => grp_fu_637_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_637_p2);

    lshr_64ns_32ns_64_2_1_U37 : component cordiccart2pol_lshr_64ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => zext_ln1158_1_fu_719_p1,
        din1 => grp_fu_730_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_730_p2);

    shl_64ns_32ns_64_2_1_U38 : component cordiccart2pol_shl_64ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 0,
        din0_WIDTH => 64,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => zext_ln1158_1_fu_719_p1,
        din1 => grp_fu_739_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_739_p2);

    mul_mul_16s_10ns_26_4_1_U39 : component cordiccart2pol_mul_mul_16s_10ns_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => r_V_reg_961,
        din1 => grp_fu_909_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_909_p2);

    outStream_r_fifo_U : component cordiccart2pol_fifo_w16_d1_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => add_ln423_reg_998,
        if_full_n => outStream_r_full_n,
        if_write => outStream_r_write,
        if_dout => outStream_r_dout,
        if_empty_n => outStream_r_empty_n,
        if_read => outStream_r_read);

    outStream_theta_fifo_U : component cordiccart2pol_fifo_w16_d1_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => add_ln859_15_reg_976,
        if_full_n => outStream_theta_full_n,
        if_write => outStream_theta_write,
        if_dout => outStream_theta_dout,
        if_empty_n => outStream_theta_empty_n,
        if_read => outStream_theta_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    r_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                r_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    r_preg <= select_ln1136_fu_895_p3;
                end if; 
            end if;
        end if;
    end process;


    theta_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                theta_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    theta_preg <= select_ln1136_1_fu_902_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln1136_1_reg_1073 = ap_const_lv1_0))) then
                add_ln1159_1_reg_1149 <= add_ln1159_1_fu_531_p2;
                lsb_index_1_reg_1133 <= lsb_index_1_fu_511_p2;
                sub_ln1148_1_reg_1144 <= sub_ln1148_1_fu_526_p2;
                sub_ln1160_1_reg_1154 <= sub_ln1160_1_fu_536_p2;
                tmp_31_reg_1139 <= lsb_index_1_fu_511_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln1136_reg_1039 = ap_const_lv1_0))) then
                add_ln1159_reg_1123 <= add_ln1159_fu_501_p2;
                lsb_index_reg_1107 <= lsb_index_fu_481_p2;
                sub_ln1148_reg_1118 <= sub_ln1148_fu_496_p2;
                sub_ln1160_reg_1128 <= sub_ln1160_fu_506_p2;
                tmp_27_reg_1113 <= lsb_index_fu_481_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln423_reg_998 <= add_ln423_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln859_15_reg_976 <= add_ln859_15_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                icmp_ln1136_1_reg_1073 <= icmp_ln1136_1_fu_423_p2;
                icmp_ln1136_reg_1039 <= icmp_ln1136_fu_365_p2;
                sub_ln1145_1_reg_1085 <= sub_ln1145_1_fu_463_p2;
                sub_ln1145_reg_1051 <= sub_ln1145_fu_405_p2;
                tmp_V_7_reg_1044 <= tmp_V_7_fu_370_p3;
                tmp_V_9_reg_1078 <= tmp_V_9_fu_428_p3;
                trunc_ln1144_1_reg_1102 <= trunc_ln1144_1_fu_477_p1;
                trunc_ln1144_reg_1068 <= trunc_ln1144_fu_419_p1;
                trunc_ln1145_1_reg_1092 <= trunc_ln1145_1_fu_469_p1;
                trunc_ln1145_reg_1058 <= trunc_ln1145_fu_411_p1;
                trunc_ln1148_1_reg_1097 <= trunc_ln1148_1_fu_473_p1;
                trunc_ln1148_reg_1063 <= trunc_ln1148_fu_415_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln1136_1_reg_1073 = ap_const_lv1_0))) then
                icmp_ln1159_1_reg_1196 <= icmp_ln1159_1_fu_722_p2;
                    or_ln1150_1_i_reg_1185(0) <= or_ln1150_1_i_fu_711_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln1136_reg_1039 = ap_const_lv1_0))) then
                icmp_ln1159_reg_1170 <= icmp_ln1159_fu_620_p2;
                    or_ln_i_reg_1159(0) <= or_ln_i_fu_609_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln1136_1_reg_1073 = ap_const_lv1_0))) then
                lshr_ln1159_1_reg_1221 <= grp_fu_730_p2;
                shl_ln1160_1_reg_1226 <= grp_fu_739_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln1136_reg_1039 = ap_const_lv1_0))) then
                lshr_ln1159_reg_1211 <= grp_fu_628_p2;
                shl_ln1160_reg_1216 <= grp_fu_637_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln1136_1_reg_1073 = ap_const_lv1_0))) then
                m_10_reg_1241 <= m_8_fu_785_p2(63 downto 1);
                p_Result_26_reg_1246 <= m_8_fu_785_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln1136_reg_1039 = ap_const_lv1_0))) then
                m_9_reg_1231 <= m_3_fu_753_p2(63 downto 1);
                p_Result_19_reg_1236 <= m_3_fu_753_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                p_Repl2_s_reg_928 <= p_read1(15 downto 15);
                r_V_3_reg_946 <= p_read(15 downto 7);
                tmp_23_reg_951 <= p_read1(15 downto 15);
                tmp_reg_941 <= p_read1(15 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_Result_29_reg_1010 <= outStream_r_dout(15 downto 15);
                p_Result_32_reg_1023 <= outStream_theta_dout(15 downto 15);
                tmp_V_6_reg_1003 <= outStream_r_dout;
                tmp_V_8_reg_1016 <= outStream_theta_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                r_V_4_reg_986 <= grp_fu_909_p2;
                trunc_ln874_reg_993 <= trunc_ln874_fu_286_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_V_reg_961 <= r_V_fu_243_p3;
                select_ln859_13_reg_966 <= select_ln859_13_fu_260_p3;
                    select_ln859_14_reg_971(15 downto 7) <= select_ln859_14_fu_267_p3(15 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln1136_1_reg_1073 = ap_const_lv1_0))) then
                    select_ln1144_1_reg_1256(0) <= select_ln1144_1_fu_816_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln1136_reg_1039 = ap_const_lv1_0))) then
                    select_ln1144_reg_1251(0) <= select_ln1144_fu_809_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (p_Result_32_reg_1023 = ap_const_lv1_1))) then
                tmp_V_4_reg_1034 <= tmp_V_4_fu_360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (p_Result_29_reg_1010 = ap_const_lv1_1))) then
                tmp_V_reg_1029 <= tmp_V_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln1136_1_reg_1073 = ap_const_lv1_0))) then
                trunc_ln809_1_reg_1266 <= trunc_ln809_1_fu_891_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln1136_reg_1039 = ap_const_lv1_0))) then
                trunc_ln809_reg_1261 <= trunc_ln809_fu_855_p1;
            end if;
        end if;
    end process;
    select_ln859_14_reg_971(6 downto 0) <= "1000000";
    or_ln_i_reg_1159(1) <= '0';
    or_ln1150_1_i_reg_1185(1) <= '0';
    select_ln1144_reg_1251(7 downto 1) <= "0111111";
    select_ln1144_1_reg_1256(7 downto 1) <= "0111111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state9, outStream_theta_full_n, ap_CS_fsm_state8, outStream_r_full_n, outStream_r_empty_n, outStream_theta_empty_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if ((not(((outStream_r_full_n = ap_const_logic_0) or (outStream_theta_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((outStream_theta_empty_n = ap_const_logic_0) or (outStream_r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_1_fu_668_p2 <= (icmp_ln1148_1_fu_662_p2 and icmp_ln1147_1_fu_643_p2);
    a_fu_566_p2 <= (icmp_ln1148_fu_560_p2 and icmp_ln1147_fu_541_p2);
    add_ln1150_1_fu_687_p2 <= std_logic_vector(unsigned(trunc_ln1145_1_reg_1092) + unsigned(ap_const_lv16_FFE8));
    add_ln1150_fu_585_p2 <= std_logic_vector(unsigned(trunc_ln1145_reg_1058) + unsigned(ap_const_lv16_FFE8));
    add_ln1159_1_fu_531_p2 <= std_logic_vector(unsigned(sub_ln1145_1_reg_1085) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln1159_fu_501_p2 <= std_logic_vector(unsigned(sub_ln1145_reg_1051) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln1170_1_fu_867_p2 <= std_logic_vector(unsigned(sub_ln1165_1_fu_862_p2) + unsigned(select_ln1144_1_reg_1256));
    add_ln1170_fu_831_p2 <= std_logic_vector(unsigned(sub_ln1165_fu_826_p2) + unsigned(select_ln1144_reg_1251));
    add_ln423_fu_333_p2 <= std_logic_vector(unsigned(p_Val2_8_fu_296_p4) + unsigned(zext_ln423_fu_329_p1));
    add_ln859_13_fu_250_p2 <= std_logic_vector(signed(sext_ln1534_fu_230_p1) + signed(p_read1));
    add_ln859_14_fu_274_p2 <= std_logic_vector(unsigned(select_ln859_14_reg_971) + unsigned(p_read2));
    add_ln859_15_fu_278_p2 <= std_logic_vector(unsigned(select_ln859_13_reg_966) + unsigned(add_ln859_14_fu_274_p2));
    add_ln859_fu_238_p2 <= std_logic_vector(unsigned(y_sft_V_fu_218_p9) + unsigned(p_read));
    and_ln1150_1_fu_699_p2 <= (xor_ln1150_1_fu_681_p2 and p_Result_25_fu_692_p3);
    and_ln1150_fu_597_p2 <= (xor_ln1150_fu_579_p2 and p_Result_18_fu_590_p3);
    and_ln420_fu_323_p2 <= (p_Result_28_fu_305_p3 and or_ln420_fu_317_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(outStream_theta_full_n, outStream_r_full_n)
    begin
        if (((outStream_r_full_n = ap_const_logic_0) or (outStream_theta_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(outStream_r_empty_n, outStream_theta_empty_n)
    begin
        if (((outStream_theta_empty_n = ap_const_logic_0) or (outStream_r_empty_n = ap_const_logic_0))) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(outStream_theta_full_n, outStream_r_full_n)
    begin
                ap_block_state8 <= ((outStream_r_full_n = ap_const_logic_0) or (outStream_theta_full_n = ap_const_logic_0));
    end process;


    ap_block_state9_assign_proc : process(outStream_r_empty_n, outStream_theta_empty_n)
    begin
                ap_block_state9 <= ((outStream_theta_empty_n = ap_const_logic_0) or (outStream_r_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1159_reg_1123),64));
    grp_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1160_reg_1128),64));
    grp_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1159_1_reg_1149),64));
    grp_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1160_1_reg_1154),64));
    grp_fu_909_p1 <= ap_const_lv26_36F(10 - 1 downto 0);
    icmp_ln1136_1_fu_423_p2 <= "1" when (tmp_V_8_reg_1016 = ap_const_lv16_0) else "0";
    icmp_ln1136_fu_365_p2 <= "1" when (tmp_V_6_reg_1003 = ap_const_lv16_0) else "0";
    icmp_ln1147_1_fu_643_p2 <= "1" when (signed(tmp_31_reg_1139) > signed(ap_const_lv31_0)) else "0";
    icmp_ln1147_fu_541_p2 <= "1" when (signed(tmp_27_reg_1113) > signed(ap_const_lv31_0)) else "0";
    icmp_ln1148_1_fu_662_p2 <= "0" when (p_Result_24_fu_657_p2 = ap_const_lv16_0) else "1";
    icmp_ln1148_fu_560_p2 <= "0" when (p_Result_17_fu_555_p2 = ap_const_lv16_0) else "1";
    icmp_ln1159_1_fu_722_p2 <= "1" when (signed(lsb_index_1_reg_1133) > signed(ap_const_lv32_0)) else "0";
    icmp_ln1159_fu_620_p2 <= "1" when (signed(lsb_index_reg_1107) > signed(ap_const_lv32_0)) else "0";
    
    l_1_fu_455_p3_proc : process(sext_ln1244_1_fu_451_p1)
    begin
        l_1_fu_455_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln1244_1_fu_451_p1(i) = '1' then
                l_1_fu_455_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    l_fu_397_p3_proc : process(sext_ln1244_fu_393_p1)
    begin
        l_fu_397_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln1244_fu_393_p1(i) = '1' then
                l_fu_397_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_1_fu_511_p2 <= std_logic_vector(unsigned(sub_ln1145_1_reg_1085) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_fu_481_p2 <= std_logic_vector(unsigned(sub_ln1145_reg_1051) + unsigned(ap_const_lv32_FFFFFFE8));
    lshr_ln1148_1_fu_651_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln1148_1_fu_648_p1(16-1 downto 0)))));
    lshr_ln1148_fu_549_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln1148_fu_546_p1(16-1 downto 0)))));
    m_2_fu_745_p3 <= 
        lshr_ln1159_reg_1211 when (icmp_ln1159_reg_1170(0) = '1') else 
        shl_ln1160_reg_1216;
    m_3_fu_753_p2 <= std_logic_vector(unsigned(m_2_fu_745_p3) + unsigned(zext_ln1162_fu_750_p1));
    m_7_fu_777_p3 <= 
        lshr_ln1159_1_reg_1221 when (icmp_ln1159_1_reg_1196(0) = '1') else 
        shl_ln1160_1_reg_1226;
    m_8_fu_785_p2 <= std_logic_vector(unsigned(m_7_fu_777_p3) + unsigned(zext_ln1162_1_fu_782_p1));
    or_ln1150_1_fu_705_p2 <= (and_ln1150_1_fu_699_p2 or a_1_fu_668_p2);
    or_ln1150_1_i_fu_711_p3 <= (ap_const_lv1_0 & or_ln1150_1_fu_705_p2);
    or_ln1150_fu_603_p2 <= (and_ln1150_fu_597_p2 or a_fu_566_p2);
    or_ln420_fu_317_p2 <= (r_5_fu_312_p2 or p_Result_s_fu_289_p3);
    or_ln_i_fu_609_p3 <= (ap_const_lv1_0 & or_ln1150_fu_603_p2);

    outStream_r_read_assign_proc : process(ap_CS_fsm_state9, outStream_r_empty_n, outStream_theta_empty_n)
    begin
        if ((not(((outStream_theta_empty_n = ap_const_logic_0) or (outStream_r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            outStream_r_read <= ap_const_logic_1;
        else 
            outStream_r_read <= ap_const_logic_0;
        end if; 
    end process;


    outStream_r_write_assign_proc : process(outStream_theta_full_n, ap_CS_fsm_state8, outStream_r_full_n)
    begin
        if ((not(((outStream_r_full_n = ap_const_logic_0) or (outStream_theta_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            outStream_r_write <= ap_const_logic_1;
        else 
            outStream_r_write <= ap_const_logic_0;
        end if; 
    end process;


    outStream_theta_read_assign_proc : process(ap_CS_fsm_state9, outStream_r_empty_n, outStream_theta_empty_n)
    begin
        if ((not(((outStream_theta_empty_n = ap_const_logic_0) or (outStream_r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            outStream_theta_read <= ap_const_logic_1;
        else 
            outStream_theta_read <= ap_const_logic_0;
        end if; 
    end process;


    outStream_theta_write_assign_proc : process(outStream_theta_full_n, ap_CS_fsm_state8, outStream_r_full_n)
    begin
        if ((not(((outStream_r_full_n = ap_const_logic_0) or (outStream_theta_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            outStream_theta_write <= ap_const_logic_1;
        else 
            outStream_theta_write <= ap_const_logic_0;
        end if; 
    end process;

    
    p_Result_15_fu_375_p4_proc : process(tmp_V_7_fu_370_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable p_Result_15_fu_375_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_7_fu_370_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for p_Result_15_fu_375_p4_i in 0 to 16-1 loop
                v0_cpy(p_Result_15_fu_375_p4_i) := tmp_V_7_fu_370_p3(16-1-p_Result_15_fu_375_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_15_fu_375_p4 <= resvalue(16-1 downto 0);
    end process;

    p_Result_17_fu_555_p2 <= (tmp_V_7_reg_1044 and lshr_ln1148_fu_549_p2);
    p_Result_18_fu_590_p3 <= tmp_V_7_reg_1044(to_integer(unsigned(add_ln1150_fu_585_p2)) downto to_integer(unsigned(add_ln1150_fu_585_p2))) when (to_integer(unsigned(add_ln1150_fu_585_p2)) >= 0 and to_integer(unsigned(add_ln1150_fu_585_p2)) <=15) else "-";
    
    p_Result_22_fu_433_p4_proc : process(tmp_V_9_fu_428_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable p_Result_22_fu_433_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_9_fu_428_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for p_Result_22_fu_433_p4_i in 0 to 16-1 loop
                v0_cpy(p_Result_22_fu_433_p4_i) := tmp_V_9_fu_428_p3(16-1-p_Result_22_fu_433_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_22_fu_433_p4 <= resvalue(16-1 downto 0);
    end process;

    p_Result_24_fu_657_p2 <= (tmp_V_9_reg_1078 and lshr_ln1148_1_fu_651_p2);
    p_Result_25_fu_692_p3 <= tmp_V_9_reg_1078(to_integer(unsigned(add_ln1150_1_fu_687_p2)) downto to_integer(unsigned(add_ln1150_1_fu_687_p2))) when (to_integer(unsigned(add_ln1150_1_fu_687_p2)) >= 0 and to_integer(unsigned(add_ln1150_1_fu_687_p2)) <=15) else "-";
    p_Result_28_fu_305_p3 <= r_V_4_reg_986(9 downto 9);
    p_Result_30_fu_385_p3 <= (ap_const_lv1_1 & p_Result_15_fu_375_p4);
    p_Result_31_fu_843_p5 <= (zext_ln1163_fu_823_p1(63 downto 32) & tmp_9_i_fu_836_p3 & zext_ln1163_fu_823_p1(22 downto 0));
    p_Result_33_fu_443_p3 <= (ap_const_lv1_1 & p_Result_22_fu_433_p4);
    p_Result_34_fu_879_p5 <= (zext_ln1163_1_fu_859_p1(63 downto 32) & tmp_11_i_fu_872_p3 & zext_ln1163_1_fu_859_p1(22 downto 0));
    p_Result_s_fu_289_p3 <= r_V_4_reg_986(10 downto 10);
    p_Val2_8_fu_296_p4 <= r_V_4_reg_986(25 downto 10);

    r_assign_proc : process(select_ln1136_fu_895_p3, r_preg, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            r <= select_ln1136_fu_895_p3;
        else 
            r <= r_preg;
        end if; 
    end process;

    r_5_fu_312_p2 <= "0" when (trunc_ln874_reg_993 = ap_const_lv9_0) else "1";
    r_V_fu_243_p3 <= 
        sub_ln859_fu_233_p2 when (p_Repl2_s_reg_928(0) = '1') else 
        add_ln859_fu_238_p2;

    r_ap_vld_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            r_ap_vld <= ap_const_logic_1;
        else 
            r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1136_1_fu_902_p3 <= 
        ap_const_lv32_0 when (icmp_ln1136_1_reg_1073(0) = '1') else 
        trunc_ln809_1_reg_1266;
    select_ln1136_fu_895_p3 <= 
        ap_const_lv32_0 when (icmp_ln1136_reg_1039(0) = '1') else 
        trunc_ln809_reg_1261;
    select_ln1144_1_fu_816_p3 <= 
        ap_const_lv8_7F when (p_Result_26_reg_1246(0) = '1') else 
        ap_const_lv8_7E;
    select_ln1144_fu_809_p3 <= 
        ap_const_lv8_7F when (p_Result_19_reg_1236(0) = '1') else 
        ap_const_lv8_7E;
    select_ln859_13_fu_260_p3 <= 
        add_ln859_13_fu_250_p2 when (p_Repl2_s_reg_928(0) = '1') else 
        sub_ln859_7_fu_255_p2;
    select_ln859_14_fu_267_p3 <= 
        ap_const_lv16_FFC0 when (tmp_23_reg_951(0) = '1') else 
        ap_const_lv16_40;
        sext_ln1244_1_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_33_fu_443_p3),32));

        sext_ln1244_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_30_fu_385_p3),32));

        sext_ln1534_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_3_reg_946),16));

    sub_ln1145_1_fu_463_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(l_1_fu_455_p3));
    sub_ln1145_fu_405_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(l_fu_397_p3));
    sub_ln1148_1_fu_526_p2 <= std_logic_vector(unsigned(ap_const_lv5_9) - unsigned(trunc_ln1148_1_reg_1097));
    sub_ln1148_fu_496_p2 <= std_logic_vector(unsigned(ap_const_lv5_9) - unsigned(trunc_ln1148_reg_1063));
    sub_ln1160_1_fu_536_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln1145_1_reg_1085));
    sub_ln1160_fu_506_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln1145_reg_1051));
    sub_ln1165_1_fu_862_p2 <= std_logic_vector(unsigned(ap_const_lv8_3) - unsigned(trunc_ln1144_1_reg_1102));
    sub_ln1165_fu_826_p2 <= std_logic_vector(unsigned(ap_const_lv8_3) - unsigned(trunc_ln1144_reg_1068));
    sub_ln859_7_fu_255_p2 <= std_logic_vector(unsigned(p_read1) - unsigned(sext_ln1534_fu_230_p1));
    sub_ln859_fu_233_p2 <= std_logic_vector(unsigned(p_read) - unsigned(y_sft_V_fu_218_p9));

    theta_assign_proc : process(ap_CS_fsm_state18, select_ln1136_1_fu_902_p3, theta_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            theta <= select_ln1136_1_fu_902_p3;
        else 
            theta <= theta_preg;
        end if; 
    end process;


    theta_ap_vld_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            theta_ap_vld <= ap_const_logic_1;
        else 
            theta_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_i_fu_872_p3 <= (p_Result_32_reg_1023 & add_ln1170_1_fu_867_p2);
    tmp_28_fu_572_p3 <= lsb_index_reg_1107(31 downto 31);
    tmp_32_fu_674_p3 <= lsb_index_1_reg_1133(31 downto 31);
    tmp_9_i_fu_836_p3 <= (p_Result_29_reg_1010 & add_ln1170_fu_831_p2);
    tmp_V_4_fu_360_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_V_8_reg_1016));
    tmp_V_7_fu_370_p3 <= 
        tmp_V_reg_1029 when (p_Result_29_reg_1010(0) = '1') else 
        tmp_V_6_reg_1003;
    tmp_V_9_fu_428_p3 <= 
        tmp_V_4_reg_1034 when (p_Result_32_reg_1023(0) = '1') else 
        tmp_V_8_reg_1016;
    tmp_V_fu_355_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_V_6_reg_1003));
    trunc_ln1144_1_fu_477_p1 <= l_1_fu_455_p3(8 - 1 downto 0);
    trunc_ln1144_fu_419_p1 <= l_fu_397_p3(8 - 1 downto 0);
    trunc_ln1145_1_fu_469_p1 <= sub_ln1145_1_fu_463_p2(16 - 1 downto 0);
    trunc_ln1145_fu_411_p1 <= sub_ln1145_fu_405_p2(16 - 1 downto 0);
    trunc_ln1148_1_fu_473_p1 <= sub_ln1145_1_fu_463_p2(5 - 1 downto 0);
    trunc_ln1148_fu_415_p1 <= sub_ln1145_fu_405_p2(5 - 1 downto 0);
    trunc_ln809_1_fu_891_p1 <= p_Result_34_fu_879_p5(32 - 1 downto 0);
    trunc_ln809_fu_855_p1 <= p_Result_31_fu_843_p5(32 - 1 downto 0);
    trunc_ln874_fu_286_p1 <= grp_fu_909_p2(9 - 1 downto 0);
    xor_ln1150_1_fu_681_p2 <= (tmp_32_fu_674_p3 xor ap_const_lv1_1);
    xor_ln1150_fu_579_p2 <= (tmp_28_fu_572_p3 xor ap_const_lv1_1);
    y_sft_V_fu_218_p9 <= (((((((p_Repl2_s_reg_928 & p_Repl2_s_reg_928) & p_Repl2_s_reg_928) & p_Repl2_s_reg_928) & p_Repl2_s_reg_928) & p_Repl2_s_reg_928) & p_Repl2_s_reg_928) & tmp_reg_941);
    zext_ln1148_1_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1148_1_reg_1144),16));
    zext_ln1148_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1148_reg_1118),16));
    zext_ln1158_1_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_9_reg_1078),64));
    zext_ln1158_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_7_reg_1044),64));
    zext_ln1162_1_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1150_1_i_reg_1185),64));
    zext_ln1162_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_i_reg_1159),64));
    zext_ln1163_1_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_10_reg_1241),64));
    zext_ln1163_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_9_reg_1231),64));
    zext_ln423_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln420_fu_323_p2),16));
end behav;
