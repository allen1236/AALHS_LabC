// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cordiccart2pol_cordiccart2pol,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.350000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.903000,HLS_SYN_LAT=43,HLS_SYN_TPT=19,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=7037,HLS_SYN_LUT=7671,HLS_VERSION=2022_1}" *)

module cordiccart2pol (
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        ap_clk,
        ap_rst_n,
        r,
        theta,
        ap_start,
        r_ap_vld,
        theta_ap_vld,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);

parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   ap_clk;
input   ap_rst_n;
output  [31:0] r;
output  [31:0] theta;
input   ap_start;
output   r_ap_vld;
output   theta_ap_vld;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

 reg    ap_rst_n_inv;
wire   [31:0] x;
wire   [31:0] y;
wire    Block_entry44_proc9_U0_ap_start;
wire    Block_entry44_proc9_U0_ap_done;
wire    Block_entry44_proc9_U0_ap_continue;
wire    Block_entry44_proc9_U0_ap_idle;
wire    Block_entry44_proc9_U0_ap_ready;
wire    Block_entry44_proc9_U0_start_out;
wire    Block_entry44_proc9_U0_start_write;
wire   [31:0] Block_entry44_proc9_U0_inStream_x_din;
wire    Block_entry44_proc9_U0_inStream_x_write;
wire   [31:0] Block_entry44_proc9_U0_inStream_y_din;
wire    Block_entry44_proc9_U0_inStream_y_write;
wire    ini_trans_U0_ap_start;
wire    ini_trans_U0_ap_done;
wire    ini_trans_U0_ap_continue;
wire    ini_trans_U0_ap_idle;
wire    ini_trans_U0_ap_ready;
wire    ini_trans_U0_inStream_x_read;
wire    ini_trans_U0_inStream_y_read;
wire   [15:0] ini_trans_U0_ap_return_0;
wire   [15:0] ini_trans_U0_ap_return_1;
wire   [15:0] ini_trans_U0_ap_return_2;
wire    ap_channel_done_theta_pip_V_0_c_channel;
wire    theta_pip_V_0_c_channel_full_n;
reg    ap_sync_reg_channel_write_theta_pip_V_0_c_channel;
wire    ap_sync_channel_write_theta_pip_V_0_c_channel;
wire    ap_channel_done_y_pip_V_0_c_channel;
wire    y_pip_V_0_c_channel_full_n;
reg    ap_sync_reg_channel_write_y_pip_V_0_c_channel;
wire    ap_sync_channel_write_y_pip_V_0_c_channel;
wire    ap_channel_done_x_pip_V_0_c_channel;
wire    x_pip_V_0_c_channel_full_n;
reg    ap_sync_reg_channel_write_x_pip_V_0_c_channel;
wire    ap_sync_channel_write_x_pip_V_0_c_channel;
wire    cordic_cr_unsigned_short_1_U0_ap_start;
wire    cordic_cr_unsigned_short_1_U0_ap_done;
wire    cordic_cr_unsigned_short_1_U0_ap_continue;
wire    cordic_cr_unsigned_short_1_U0_ap_idle;
wire    cordic_cr_unsigned_short_1_U0_ap_ready;
wire   [15:0] cordic_cr_unsigned_short_1_U0_ap_return_0;
wire   [15:0] cordic_cr_unsigned_short_1_U0_ap_return_1;
wire   [15:0] cordic_cr_unsigned_short_1_U0_ap_return_2;
wire    ap_channel_done_theta_pip_V_1_c_channel;
wire    theta_pip_V_1_c_channel_full_n;
reg    ap_sync_reg_channel_write_theta_pip_V_1_c_channel;
wire    ap_sync_channel_write_theta_pip_V_1_c_channel;
wire    ap_channel_done_y_pip_V_1_c_channel;
wire    y_pip_V_1_c_channel_full_n;
reg    ap_sync_reg_channel_write_y_pip_V_1_c_channel;
wire    ap_sync_channel_write_y_pip_V_1_c_channel;
wire    ap_channel_done_x_pip_V_1_c_channel;
wire    x_pip_V_1_c_channel_full_n;
reg    ap_sync_reg_channel_write_x_pip_V_1_c_channel;
wire    ap_sync_channel_write_x_pip_V_1_c_channel;
wire    cordic_cr_unsigned_short_2_U0_ap_start;
wire    cordic_cr_unsigned_short_2_U0_ap_done;
wire    cordic_cr_unsigned_short_2_U0_ap_continue;
wire    cordic_cr_unsigned_short_2_U0_ap_idle;
wire    cordic_cr_unsigned_short_2_U0_ap_ready;
wire   [15:0] cordic_cr_unsigned_short_2_U0_ap_return_0;
wire   [15:0] cordic_cr_unsigned_short_2_U0_ap_return_1;
wire   [15:0] cordic_cr_unsigned_short_2_U0_ap_return_2;
wire    ap_channel_done_theta_pip_V_2_c_channel;
wire    theta_pip_V_2_c_channel_full_n;
reg    ap_sync_reg_channel_write_theta_pip_V_2_c_channel;
wire    ap_sync_channel_write_theta_pip_V_2_c_channel;
wire    ap_channel_done_y_pip_V_2_c_channel;
wire    y_pip_V_2_c_channel_full_n;
reg    ap_sync_reg_channel_write_y_pip_V_2_c_channel;
wire    ap_sync_channel_write_y_pip_V_2_c_channel;
wire    ap_channel_done_x_pip_V_2_c_channel;
wire    x_pip_V_2_c_channel_full_n;
reg    ap_sync_reg_channel_write_x_pip_V_2_c_channel;
wire    ap_sync_channel_write_x_pip_V_2_c_channel;
wire    cordic_cr_unsigned_short_3_U0_ap_start;
wire    cordic_cr_unsigned_short_3_U0_ap_done;
wire    cordic_cr_unsigned_short_3_U0_ap_continue;
wire    cordic_cr_unsigned_short_3_U0_ap_idle;
wire    cordic_cr_unsigned_short_3_U0_ap_ready;
wire   [15:0] cordic_cr_unsigned_short_3_U0_ap_return_0;
wire   [15:0] cordic_cr_unsigned_short_3_U0_ap_return_1;
wire   [15:0] cordic_cr_unsigned_short_3_U0_ap_return_2;
wire    ap_channel_done_theta_pip_V_3_c_channel;
wire    theta_pip_V_3_c_channel_full_n;
reg    ap_sync_reg_channel_write_theta_pip_V_3_c_channel;
wire    ap_sync_channel_write_theta_pip_V_3_c_channel;
wire    ap_channel_done_y_pip_V_3_c_channel;
wire    y_pip_V_3_c_channel_full_n;
reg    ap_sync_reg_channel_write_y_pip_V_3_c_channel;
wire    ap_sync_channel_write_y_pip_V_3_c_channel;
wire    ap_channel_done_x_pip_V_3_c_channel;
wire    x_pip_V_3_c_channel_full_n;
reg    ap_sync_reg_channel_write_x_pip_V_3_c_channel;
wire    ap_sync_channel_write_x_pip_V_3_c_channel;
wire    cordic_cr_unsigned_short_4_U0_ap_start;
wire    cordic_cr_unsigned_short_4_U0_ap_done;
wire    cordic_cr_unsigned_short_4_U0_ap_continue;
wire    cordic_cr_unsigned_short_4_U0_ap_idle;
wire    cordic_cr_unsigned_short_4_U0_ap_ready;
wire   [15:0] cordic_cr_unsigned_short_4_U0_ap_return_0;
wire   [15:0] cordic_cr_unsigned_short_4_U0_ap_return_1;
wire   [15:0] cordic_cr_unsigned_short_4_U0_ap_return_2;
wire    ap_channel_done_theta_pip_V_4_c_channel;
wire    theta_pip_V_4_c_channel_full_n;
reg    ap_sync_reg_channel_write_theta_pip_V_4_c_channel;
wire    ap_sync_channel_write_theta_pip_V_4_c_channel;
wire    ap_channel_done_y_pip_V_4_c_channel;
wire    y_pip_V_4_c_channel_full_n;
reg    ap_sync_reg_channel_write_y_pip_V_4_c_channel;
wire    ap_sync_channel_write_y_pip_V_4_c_channel;
wire    ap_channel_done_x_pip_V_4_c_channel;
wire    x_pip_V_4_c_channel_full_n;
reg    ap_sync_reg_channel_write_x_pip_V_4_c_channel;
wire    ap_sync_channel_write_x_pip_V_4_c_channel;
wire    cordic_cr_unsigned_short_5_U0_ap_start;
wire    cordic_cr_unsigned_short_5_U0_ap_done;
wire    cordic_cr_unsigned_short_5_U0_ap_continue;
wire    cordic_cr_unsigned_short_5_U0_ap_idle;
wire    cordic_cr_unsigned_short_5_U0_ap_ready;
wire   [15:0] cordic_cr_unsigned_short_5_U0_ap_return_0;
wire   [15:0] cordic_cr_unsigned_short_5_U0_ap_return_1;
wire   [15:0] cordic_cr_unsigned_short_5_U0_ap_return_2;
wire    ap_channel_done_theta_pip_V_5_c_channel;
wire    theta_pip_V_5_c_channel_full_n;
reg    ap_sync_reg_channel_write_theta_pip_V_5_c_channel;
wire    ap_sync_channel_write_theta_pip_V_5_c_channel;
wire    ap_channel_done_y_pip_V_5_c_channel;
wire    y_pip_V_5_c_channel_full_n;
reg    ap_sync_reg_channel_write_y_pip_V_5_c_channel;
wire    ap_sync_channel_write_y_pip_V_5_c_channel;
wire    ap_channel_done_x_pip_V_5_c_channel;
wire    x_pip_V_5_c_channel_full_n;
reg    ap_sync_reg_channel_write_x_pip_V_5_c_channel;
wire    ap_sync_channel_write_x_pip_V_5_c_channel;
wire    cordic_cr_unsigned_short_6_U0_ap_start;
wire    cordic_cr_unsigned_short_6_U0_ap_done;
wire    cordic_cr_unsigned_short_6_U0_ap_continue;
wire    cordic_cr_unsigned_short_6_U0_ap_idle;
wire    cordic_cr_unsigned_short_6_U0_ap_ready;
wire   [15:0] cordic_cr_unsigned_short_6_U0_ap_return_0;
wire   [15:0] cordic_cr_unsigned_short_6_U0_ap_return_1;
wire   [15:0] cordic_cr_unsigned_short_6_U0_ap_return_2;
wire    ap_channel_done_theta_pip_V_6_c_channel;
wire    theta_pip_V_6_c_channel_full_n;
reg    ap_sync_reg_channel_write_theta_pip_V_6_c_channel;
wire    ap_sync_channel_write_theta_pip_V_6_c_channel;
wire    ap_channel_done_y_pip_V_6_c_channel;
wire    y_pip_V_6_c_channel_full_n;
reg    ap_sync_reg_channel_write_y_pip_V_6_c_channel;
wire    ap_sync_channel_write_y_pip_V_6_c_channel;
wire    ap_channel_done_x_pip_V_6_c_channel;
wire    x_pip_V_6_c_channel_full_n;
reg    ap_sync_reg_channel_write_x_pip_V_6_c_channel;
wire    ap_sync_channel_write_x_pip_V_6_c_channel;
wire    Block_entry4452_proc_U0_ap_start;
wire    Block_entry4452_proc_U0_ap_done;
wire    Block_entry4452_proc_U0_ap_continue;
wire    Block_entry4452_proc_U0_ap_idle;
wire    Block_entry4452_proc_U0_ap_ready;
wire   [31:0] Block_entry4452_proc_U0_r;
wire    Block_entry4452_proc_U0_r_ap_vld;
wire   [31:0] Block_entry4452_proc_U0_theta;
wire    Block_entry4452_proc_U0_theta_ap_vld;
wire    inStream_x_full_n;
wire   [31:0] inStream_x_dout;
wire   [1:0] inStream_x_num_data_valid;
wire   [1:0] inStream_x_fifo_cap;
wire    inStream_x_empty_n;
wire    inStream_y_full_n;
wire   [31:0] inStream_y_dout;
wire   [1:0] inStream_y_num_data_valid;
wire   [1:0] inStream_y_fifo_cap;
wire    inStream_y_empty_n;
wire   [15:0] x_pip_V_0_c_channel_dout;
wire   [1:0] x_pip_V_0_c_channel_num_data_valid;
wire   [1:0] x_pip_V_0_c_channel_fifo_cap;
wire    x_pip_V_0_c_channel_empty_n;
wire   [15:0] y_pip_V_0_c_channel_dout;
wire   [1:0] y_pip_V_0_c_channel_num_data_valid;
wire   [1:0] y_pip_V_0_c_channel_fifo_cap;
wire    y_pip_V_0_c_channel_empty_n;
wire   [15:0] theta_pip_V_0_c_channel_dout;
wire   [1:0] theta_pip_V_0_c_channel_num_data_valid;
wire   [1:0] theta_pip_V_0_c_channel_fifo_cap;
wire    theta_pip_V_0_c_channel_empty_n;
wire   [15:0] x_pip_V_1_c_channel_dout;
wire   [1:0] x_pip_V_1_c_channel_num_data_valid;
wire   [1:0] x_pip_V_1_c_channel_fifo_cap;
wire    x_pip_V_1_c_channel_empty_n;
wire   [15:0] y_pip_V_1_c_channel_dout;
wire   [1:0] y_pip_V_1_c_channel_num_data_valid;
wire   [1:0] y_pip_V_1_c_channel_fifo_cap;
wire    y_pip_V_1_c_channel_empty_n;
wire   [15:0] theta_pip_V_1_c_channel_dout;
wire   [1:0] theta_pip_V_1_c_channel_num_data_valid;
wire   [1:0] theta_pip_V_1_c_channel_fifo_cap;
wire    theta_pip_V_1_c_channel_empty_n;
wire   [15:0] x_pip_V_2_c_channel_dout;
wire   [1:0] x_pip_V_2_c_channel_num_data_valid;
wire   [1:0] x_pip_V_2_c_channel_fifo_cap;
wire    x_pip_V_2_c_channel_empty_n;
wire   [15:0] y_pip_V_2_c_channel_dout;
wire   [1:0] y_pip_V_2_c_channel_num_data_valid;
wire   [1:0] y_pip_V_2_c_channel_fifo_cap;
wire    y_pip_V_2_c_channel_empty_n;
wire   [15:0] theta_pip_V_2_c_channel_dout;
wire   [1:0] theta_pip_V_2_c_channel_num_data_valid;
wire   [1:0] theta_pip_V_2_c_channel_fifo_cap;
wire    theta_pip_V_2_c_channel_empty_n;
wire   [15:0] x_pip_V_3_c_channel_dout;
wire   [1:0] x_pip_V_3_c_channel_num_data_valid;
wire   [1:0] x_pip_V_3_c_channel_fifo_cap;
wire    x_pip_V_3_c_channel_empty_n;
wire   [15:0] y_pip_V_3_c_channel_dout;
wire   [1:0] y_pip_V_3_c_channel_num_data_valid;
wire   [1:0] y_pip_V_3_c_channel_fifo_cap;
wire    y_pip_V_3_c_channel_empty_n;
wire   [15:0] theta_pip_V_3_c_channel_dout;
wire   [1:0] theta_pip_V_3_c_channel_num_data_valid;
wire   [1:0] theta_pip_V_3_c_channel_fifo_cap;
wire    theta_pip_V_3_c_channel_empty_n;
wire   [15:0] x_pip_V_4_c_channel_dout;
wire   [1:0] x_pip_V_4_c_channel_num_data_valid;
wire   [1:0] x_pip_V_4_c_channel_fifo_cap;
wire    x_pip_V_4_c_channel_empty_n;
wire   [15:0] y_pip_V_4_c_channel_dout;
wire   [1:0] y_pip_V_4_c_channel_num_data_valid;
wire   [1:0] y_pip_V_4_c_channel_fifo_cap;
wire    y_pip_V_4_c_channel_empty_n;
wire   [15:0] theta_pip_V_4_c_channel_dout;
wire   [1:0] theta_pip_V_4_c_channel_num_data_valid;
wire   [1:0] theta_pip_V_4_c_channel_fifo_cap;
wire    theta_pip_V_4_c_channel_empty_n;
wire   [15:0] x_pip_V_5_c_channel_dout;
wire   [1:0] x_pip_V_5_c_channel_num_data_valid;
wire   [1:0] x_pip_V_5_c_channel_fifo_cap;
wire    x_pip_V_5_c_channel_empty_n;
wire   [15:0] y_pip_V_5_c_channel_dout;
wire   [1:0] y_pip_V_5_c_channel_num_data_valid;
wire   [1:0] y_pip_V_5_c_channel_fifo_cap;
wire    y_pip_V_5_c_channel_empty_n;
wire   [15:0] theta_pip_V_5_c_channel_dout;
wire   [1:0] theta_pip_V_5_c_channel_num_data_valid;
wire   [1:0] theta_pip_V_5_c_channel_fifo_cap;
wire    theta_pip_V_5_c_channel_empty_n;
wire   [15:0] x_pip_V_6_c_channel_dout;
wire   [1:0] x_pip_V_6_c_channel_num_data_valid;
wire   [1:0] x_pip_V_6_c_channel_fifo_cap;
wire    x_pip_V_6_c_channel_empty_n;
wire   [15:0] y_pip_V_6_c_channel_dout;
wire   [1:0] y_pip_V_6_c_channel_num_data_valid;
wire   [1:0] y_pip_V_6_c_channel_fifo_cap;
wire    y_pip_V_6_c_channel_empty_n;
wire   [15:0] theta_pip_V_6_c_channel_dout;
wire   [1:0] theta_pip_V_6_c_channel_num_data_valid;
wire   [1:0] theta_pip_V_6_c_channel_fifo_cap;
wire    theta_pip_V_6_c_channel_empty_n;
wire   [0:0] start_for_ini_trans_U0_din;
wire    start_for_ini_trans_U0_full_n;
wire   [0:0] start_for_ini_trans_U0_dout;
wire    start_for_ini_trans_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_theta_pip_V_0_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_y_pip_V_0_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_x_pip_V_0_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_theta_pip_V_1_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_y_pip_V_1_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_x_pip_V_1_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_theta_pip_V_2_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_y_pip_V_2_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_x_pip_V_2_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_theta_pip_V_3_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_y_pip_V_3_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_x_pip_V_3_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_theta_pip_V_4_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_y_pip_V_4_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_x_pip_V_4_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_theta_pip_V_5_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_y_pip_V_5_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_x_pip_V_5_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_theta_pip_V_6_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_y_pip_V_6_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_x_pip_V_6_c_channel = 1'b0;
end

cordiccart2pol_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .x(x),
    .y(y)
);

cordiccart2pol_Block_entry44_proc9 Block_entry44_proc9_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(Block_entry44_proc9_U0_ap_start),
    .start_full_n(start_for_ini_trans_U0_full_n),
    .ap_done(Block_entry44_proc9_U0_ap_done),
    .ap_continue(Block_entry44_proc9_U0_ap_continue),
    .ap_idle(Block_entry44_proc9_U0_ap_idle),
    .ap_ready(Block_entry44_proc9_U0_ap_ready),
    .start_out(Block_entry44_proc9_U0_start_out),
    .start_write(Block_entry44_proc9_U0_start_write),
    .x(x),
    .y(y),
    .inStream_x_din(Block_entry44_proc9_U0_inStream_x_din),
    .inStream_x_num_data_valid(inStream_x_num_data_valid),
    .inStream_x_fifo_cap(inStream_x_fifo_cap),
    .inStream_x_full_n(inStream_x_full_n),
    .inStream_x_write(Block_entry44_proc9_U0_inStream_x_write),
    .inStream_y_din(Block_entry44_proc9_U0_inStream_y_din),
    .inStream_y_num_data_valid(inStream_y_num_data_valid),
    .inStream_y_fifo_cap(inStream_y_fifo_cap),
    .inStream_y_full_n(inStream_y_full_n),
    .inStream_y_write(Block_entry44_proc9_U0_inStream_y_write)
);

cordiccart2pol_ini_trans ini_trans_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(ini_trans_U0_ap_start),
    .ap_done(ini_trans_U0_ap_done),
    .ap_continue(ini_trans_U0_ap_continue),
    .ap_idle(ini_trans_U0_ap_idle),
    .ap_ready(ini_trans_U0_ap_ready),
    .inStream_x_dout(inStream_x_dout),
    .inStream_x_num_data_valid(inStream_x_num_data_valid),
    .inStream_x_fifo_cap(inStream_x_fifo_cap),
    .inStream_x_empty_n(inStream_x_empty_n),
    .inStream_x_read(ini_trans_U0_inStream_x_read),
    .inStream_y_dout(inStream_y_dout),
    .inStream_y_num_data_valid(inStream_y_num_data_valid),
    .inStream_y_fifo_cap(inStream_y_fifo_cap),
    .inStream_y_empty_n(inStream_y_empty_n),
    .inStream_y_read(ini_trans_U0_inStream_y_read),
    .ap_return_0(ini_trans_U0_ap_return_0),
    .ap_return_1(ini_trans_U0_ap_return_1),
    .ap_return_2(ini_trans_U0_ap_return_2)
);

cordiccart2pol_cordic_cr_unsigned_short_1_s cordic_cr_unsigned_short_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(cordic_cr_unsigned_short_1_U0_ap_start),
    .ap_done(cordic_cr_unsigned_short_1_U0_ap_done),
    .ap_continue(cordic_cr_unsigned_short_1_U0_ap_continue),
    .ap_idle(cordic_cr_unsigned_short_1_U0_ap_idle),
    .ap_ready(cordic_cr_unsigned_short_1_U0_ap_ready),
    .p_read(x_pip_V_0_c_channel_dout),
    .p_read1(y_pip_V_0_c_channel_dout),
    .p_read2(theta_pip_V_0_c_channel_dout),
    .ap_return_0(cordic_cr_unsigned_short_1_U0_ap_return_0),
    .ap_return_1(cordic_cr_unsigned_short_1_U0_ap_return_1),
    .ap_return_2(cordic_cr_unsigned_short_1_U0_ap_return_2)
);

cordiccart2pol_cordic_cr_unsigned_short_2_s cordic_cr_unsigned_short_2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(cordic_cr_unsigned_short_2_U0_ap_start),
    .ap_done(cordic_cr_unsigned_short_2_U0_ap_done),
    .ap_continue(cordic_cr_unsigned_short_2_U0_ap_continue),
    .ap_idle(cordic_cr_unsigned_short_2_U0_ap_idle),
    .ap_ready(cordic_cr_unsigned_short_2_U0_ap_ready),
    .p_read(x_pip_V_1_c_channel_dout),
    .p_read1(y_pip_V_1_c_channel_dout),
    .p_read2(theta_pip_V_1_c_channel_dout),
    .ap_return_0(cordic_cr_unsigned_short_2_U0_ap_return_0),
    .ap_return_1(cordic_cr_unsigned_short_2_U0_ap_return_1),
    .ap_return_2(cordic_cr_unsigned_short_2_U0_ap_return_2)
);

cordiccart2pol_cordic_cr_unsigned_short_3_s cordic_cr_unsigned_short_3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(cordic_cr_unsigned_short_3_U0_ap_start),
    .ap_done(cordic_cr_unsigned_short_3_U0_ap_done),
    .ap_continue(cordic_cr_unsigned_short_3_U0_ap_continue),
    .ap_idle(cordic_cr_unsigned_short_3_U0_ap_idle),
    .ap_ready(cordic_cr_unsigned_short_3_U0_ap_ready),
    .p_read(x_pip_V_2_c_channel_dout),
    .p_read1(y_pip_V_2_c_channel_dout),
    .p_read2(theta_pip_V_2_c_channel_dout),
    .ap_return_0(cordic_cr_unsigned_short_3_U0_ap_return_0),
    .ap_return_1(cordic_cr_unsigned_short_3_U0_ap_return_1),
    .ap_return_2(cordic_cr_unsigned_short_3_U0_ap_return_2)
);

cordiccart2pol_cordic_cr_unsigned_short_4_s cordic_cr_unsigned_short_4_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(cordic_cr_unsigned_short_4_U0_ap_start),
    .ap_done(cordic_cr_unsigned_short_4_U0_ap_done),
    .ap_continue(cordic_cr_unsigned_short_4_U0_ap_continue),
    .ap_idle(cordic_cr_unsigned_short_4_U0_ap_idle),
    .ap_ready(cordic_cr_unsigned_short_4_U0_ap_ready),
    .p_read(x_pip_V_3_c_channel_dout),
    .p_read1(y_pip_V_3_c_channel_dout),
    .p_read2(theta_pip_V_3_c_channel_dout),
    .ap_return_0(cordic_cr_unsigned_short_4_U0_ap_return_0),
    .ap_return_1(cordic_cr_unsigned_short_4_U0_ap_return_1),
    .ap_return_2(cordic_cr_unsigned_short_4_U0_ap_return_2)
);

cordiccart2pol_cordic_cr_unsigned_short_5_s cordic_cr_unsigned_short_5_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(cordic_cr_unsigned_short_5_U0_ap_start),
    .ap_done(cordic_cr_unsigned_short_5_U0_ap_done),
    .ap_continue(cordic_cr_unsigned_short_5_U0_ap_continue),
    .ap_idle(cordic_cr_unsigned_short_5_U0_ap_idle),
    .ap_ready(cordic_cr_unsigned_short_5_U0_ap_ready),
    .p_read(x_pip_V_4_c_channel_dout),
    .p_read1(y_pip_V_4_c_channel_dout),
    .p_read2(theta_pip_V_4_c_channel_dout),
    .ap_return_0(cordic_cr_unsigned_short_5_U0_ap_return_0),
    .ap_return_1(cordic_cr_unsigned_short_5_U0_ap_return_1),
    .ap_return_2(cordic_cr_unsigned_short_5_U0_ap_return_2)
);

cordiccart2pol_cordic_cr_unsigned_short_6_s cordic_cr_unsigned_short_6_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(cordic_cr_unsigned_short_6_U0_ap_start),
    .ap_done(cordic_cr_unsigned_short_6_U0_ap_done),
    .ap_continue(cordic_cr_unsigned_short_6_U0_ap_continue),
    .ap_idle(cordic_cr_unsigned_short_6_U0_ap_idle),
    .ap_ready(cordic_cr_unsigned_short_6_U0_ap_ready),
    .p_read(x_pip_V_5_c_channel_dout),
    .p_read1(y_pip_V_5_c_channel_dout),
    .p_read2(theta_pip_V_5_c_channel_dout),
    .ap_return_0(cordic_cr_unsigned_short_6_U0_ap_return_0),
    .ap_return_1(cordic_cr_unsigned_short_6_U0_ap_return_1),
    .ap_return_2(cordic_cr_unsigned_short_6_U0_ap_return_2)
);

cordiccart2pol_Block_entry4452_proc Block_entry4452_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(Block_entry4452_proc_U0_ap_start),
    .ap_done(Block_entry4452_proc_U0_ap_done),
    .ap_continue(Block_entry4452_proc_U0_ap_continue),
    .ap_idle(Block_entry4452_proc_U0_ap_idle),
    .ap_ready(Block_entry4452_proc_U0_ap_ready),
    .p_read(x_pip_V_6_c_channel_dout),
    .p_read1(y_pip_V_6_c_channel_dout),
    .p_read2(theta_pip_V_6_c_channel_dout),
    .r(Block_entry4452_proc_U0_r),
    .r_ap_vld(Block_entry4452_proc_U0_r_ap_vld),
    .theta(Block_entry4452_proc_U0_theta),
    .theta_ap_vld(Block_entry4452_proc_U0_theta_ap_vld)
);

cordiccart2pol_fifo_w32_d1_S inStream_x_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry44_proc9_U0_inStream_x_din),
    .if_full_n(inStream_x_full_n),
    .if_write(Block_entry44_proc9_U0_inStream_x_write),
    .if_dout(inStream_x_dout),
    .if_num_data_valid(inStream_x_num_data_valid),
    .if_fifo_cap(inStream_x_fifo_cap),
    .if_empty_n(inStream_x_empty_n),
    .if_read(ini_trans_U0_inStream_x_read)
);

cordiccart2pol_fifo_w32_d1_S inStream_y_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry44_proc9_U0_inStream_y_din),
    .if_full_n(inStream_y_full_n),
    .if_write(Block_entry44_proc9_U0_inStream_y_write),
    .if_dout(inStream_y_dout),
    .if_num_data_valid(inStream_y_num_data_valid),
    .if_fifo_cap(inStream_y_fifo_cap),
    .if_empty_n(inStream_y_empty_n),
    .if_read(ini_trans_U0_inStream_y_read)
);

cordiccart2pol_fifo_w16_d2_S x_pip_V_0_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(ini_trans_U0_ap_return_0),
    .if_full_n(x_pip_V_0_c_channel_full_n),
    .if_write(ap_channel_done_x_pip_V_0_c_channel),
    .if_dout(x_pip_V_0_c_channel_dout),
    .if_num_data_valid(x_pip_V_0_c_channel_num_data_valid),
    .if_fifo_cap(x_pip_V_0_c_channel_fifo_cap),
    .if_empty_n(x_pip_V_0_c_channel_empty_n),
    .if_read(cordic_cr_unsigned_short_1_U0_ap_ready)
);

cordiccart2pol_fifo_w16_d2_S y_pip_V_0_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(ini_trans_U0_ap_return_1),
    .if_full_n(y_pip_V_0_c_channel_full_n),
    .if_write(ap_channel_done_y_pip_V_0_c_channel),
    .if_dout(y_pip_V_0_c_channel_dout),
    .if_num_data_valid(y_pip_V_0_c_channel_num_data_valid),
    .if_fifo_cap(y_pip_V_0_c_channel_fifo_cap),
    .if_empty_n(y_pip_V_0_c_channel_empty_n),
    .if_read(cordic_cr_unsigned_short_1_U0_ap_ready)
);

cordiccart2pol_fifo_w16_d2_S theta_pip_V_0_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(ini_trans_U0_ap_return_2),
    .if_full_n(theta_pip_V_0_c_channel_full_n),
    .if_write(ap_channel_done_theta_pip_V_0_c_channel),
    .if_dout(theta_pip_V_0_c_channel_dout),
    .if_num_data_valid(theta_pip_V_0_c_channel_num_data_valid),
    .if_fifo_cap(theta_pip_V_0_c_channel_fifo_cap),
    .if_empty_n(theta_pip_V_0_c_channel_empty_n),
    .if_read(cordic_cr_unsigned_short_1_U0_ap_ready)
);

cordiccart2pol_fifo_w16_d2_S x_pip_V_1_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cordic_cr_unsigned_short_1_U0_ap_return_0),
    .if_full_n(x_pip_V_1_c_channel_full_n),
    .if_write(ap_channel_done_x_pip_V_1_c_channel),
    .if_dout(x_pip_V_1_c_channel_dout),
    .if_num_data_valid(x_pip_V_1_c_channel_num_data_valid),
    .if_fifo_cap(x_pip_V_1_c_channel_fifo_cap),
    .if_empty_n(x_pip_V_1_c_channel_empty_n),
    .if_read(cordic_cr_unsigned_short_2_U0_ap_ready)
);

cordiccart2pol_fifo_w16_d2_S y_pip_V_1_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cordic_cr_unsigned_short_1_U0_ap_return_1),
    .if_full_n(y_pip_V_1_c_channel_full_n),
    .if_write(ap_channel_done_y_pip_V_1_c_channel),
    .if_dout(y_pip_V_1_c_channel_dout),
    .if_num_data_valid(y_pip_V_1_c_channel_num_data_valid),
    .if_fifo_cap(y_pip_V_1_c_channel_fifo_cap),
    .if_empty_n(y_pip_V_1_c_channel_empty_n),
    .if_read(cordic_cr_unsigned_short_2_U0_ap_ready)
);

cordiccart2pol_fifo_w16_d2_S theta_pip_V_1_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cordic_cr_unsigned_short_1_U0_ap_return_2),
    .if_full_n(theta_pip_V_1_c_channel_full_n),
    .if_write(ap_channel_done_theta_pip_V_1_c_channel),
    .if_dout(theta_pip_V_1_c_channel_dout),
    .if_num_data_valid(theta_pip_V_1_c_channel_num_data_valid),
    .if_fifo_cap(theta_pip_V_1_c_channel_fifo_cap),
    .if_empty_n(theta_pip_V_1_c_channel_empty_n),
    .if_read(cordic_cr_unsigned_short_2_U0_ap_ready)
);

cordiccart2pol_fifo_w16_d2_S x_pip_V_2_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cordic_cr_unsigned_short_2_U0_ap_return_0),
    .if_full_n(x_pip_V_2_c_channel_full_n),
    .if_write(ap_channel_done_x_pip_V_2_c_channel),
    .if_dout(x_pip_V_2_c_channel_dout),
    .if_num_data_valid(x_pip_V_2_c_channel_num_data_valid),
    .if_fifo_cap(x_pip_V_2_c_channel_fifo_cap),
    .if_empty_n(x_pip_V_2_c_channel_empty_n),
    .if_read(cordic_cr_unsigned_short_3_U0_ap_ready)
);

cordiccart2pol_fifo_w16_d2_S y_pip_V_2_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cordic_cr_unsigned_short_2_U0_ap_return_1),
    .if_full_n(y_pip_V_2_c_channel_full_n),
    .if_write(ap_channel_done_y_pip_V_2_c_channel),
    .if_dout(y_pip_V_2_c_channel_dout),
    .if_num_data_valid(y_pip_V_2_c_channel_num_data_valid),
    .if_fifo_cap(y_pip_V_2_c_channel_fifo_cap),
    .if_empty_n(y_pip_V_2_c_channel_empty_n),
    .if_read(cordic_cr_unsigned_short_3_U0_ap_ready)
);

cordiccart2pol_fifo_w16_d2_S theta_pip_V_2_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cordic_cr_unsigned_short_2_U0_ap_return_2),
    .if_full_n(theta_pip_V_2_c_channel_full_n),
    .if_write(ap_channel_done_theta_pip_V_2_c_channel),
    .if_dout(theta_pip_V_2_c_channel_dout),
    .if_num_data_valid(theta_pip_V_2_c_channel_num_data_valid),
    .if_fifo_cap(theta_pip_V_2_c_channel_fifo_cap),
    .if_empty_n(theta_pip_V_2_c_channel_empty_n),
    .if_read(cordic_cr_unsigned_short_3_U0_ap_ready)
);

cordiccart2pol_fifo_w16_d2_S x_pip_V_3_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cordic_cr_unsigned_short_3_U0_ap_return_0),
    .if_full_n(x_pip_V_3_c_channel_full_n),
    .if_write(ap_channel_done_x_pip_V_3_c_channel),
    .if_dout(x_pip_V_3_c_channel_dout),
    .if_num_data_valid(x_pip_V_3_c_channel_num_data_valid),
    .if_fifo_cap(x_pip_V_3_c_channel_fifo_cap),
    .if_empty_n(x_pip_V_3_c_channel_empty_n),
    .if_read(cordic_cr_unsigned_short_4_U0_ap_ready)
);

cordiccart2pol_fifo_w16_d2_S y_pip_V_3_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cordic_cr_unsigned_short_3_U0_ap_return_1),
    .if_full_n(y_pip_V_3_c_channel_full_n),
    .if_write(ap_channel_done_y_pip_V_3_c_channel),
    .if_dout(y_pip_V_3_c_channel_dout),
    .if_num_data_valid(y_pip_V_3_c_channel_num_data_valid),
    .if_fifo_cap(y_pip_V_3_c_channel_fifo_cap),
    .if_empty_n(y_pip_V_3_c_channel_empty_n),
    .if_read(cordic_cr_unsigned_short_4_U0_ap_ready)
);

cordiccart2pol_fifo_w16_d2_S theta_pip_V_3_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cordic_cr_unsigned_short_3_U0_ap_return_2),
    .if_full_n(theta_pip_V_3_c_channel_full_n),
    .if_write(ap_channel_done_theta_pip_V_3_c_channel),
    .if_dout(theta_pip_V_3_c_channel_dout),
    .if_num_data_valid(theta_pip_V_3_c_channel_num_data_valid),
    .if_fifo_cap(theta_pip_V_3_c_channel_fifo_cap),
    .if_empty_n(theta_pip_V_3_c_channel_empty_n),
    .if_read(cordic_cr_unsigned_short_4_U0_ap_ready)
);

cordiccart2pol_fifo_w16_d2_S x_pip_V_4_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cordic_cr_unsigned_short_4_U0_ap_return_0),
    .if_full_n(x_pip_V_4_c_channel_full_n),
    .if_write(ap_channel_done_x_pip_V_4_c_channel),
    .if_dout(x_pip_V_4_c_channel_dout),
    .if_num_data_valid(x_pip_V_4_c_channel_num_data_valid),
    .if_fifo_cap(x_pip_V_4_c_channel_fifo_cap),
    .if_empty_n(x_pip_V_4_c_channel_empty_n),
    .if_read(cordic_cr_unsigned_short_5_U0_ap_ready)
);

cordiccart2pol_fifo_w16_d2_S y_pip_V_4_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cordic_cr_unsigned_short_4_U0_ap_return_1),
    .if_full_n(y_pip_V_4_c_channel_full_n),
    .if_write(ap_channel_done_y_pip_V_4_c_channel),
    .if_dout(y_pip_V_4_c_channel_dout),
    .if_num_data_valid(y_pip_V_4_c_channel_num_data_valid),
    .if_fifo_cap(y_pip_V_4_c_channel_fifo_cap),
    .if_empty_n(y_pip_V_4_c_channel_empty_n),
    .if_read(cordic_cr_unsigned_short_5_U0_ap_ready)
);

cordiccart2pol_fifo_w16_d2_S theta_pip_V_4_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cordic_cr_unsigned_short_4_U0_ap_return_2),
    .if_full_n(theta_pip_V_4_c_channel_full_n),
    .if_write(ap_channel_done_theta_pip_V_4_c_channel),
    .if_dout(theta_pip_V_4_c_channel_dout),
    .if_num_data_valid(theta_pip_V_4_c_channel_num_data_valid),
    .if_fifo_cap(theta_pip_V_4_c_channel_fifo_cap),
    .if_empty_n(theta_pip_V_4_c_channel_empty_n),
    .if_read(cordic_cr_unsigned_short_5_U0_ap_ready)
);

cordiccart2pol_fifo_w16_d2_S x_pip_V_5_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cordic_cr_unsigned_short_5_U0_ap_return_0),
    .if_full_n(x_pip_V_5_c_channel_full_n),
    .if_write(ap_channel_done_x_pip_V_5_c_channel),
    .if_dout(x_pip_V_5_c_channel_dout),
    .if_num_data_valid(x_pip_V_5_c_channel_num_data_valid),
    .if_fifo_cap(x_pip_V_5_c_channel_fifo_cap),
    .if_empty_n(x_pip_V_5_c_channel_empty_n),
    .if_read(cordic_cr_unsigned_short_6_U0_ap_ready)
);

cordiccart2pol_fifo_w16_d2_S y_pip_V_5_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cordic_cr_unsigned_short_5_U0_ap_return_1),
    .if_full_n(y_pip_V_5_c_channel_full_n),
    .if_write(ap_channel_done_y_pip_V_5_c_channel),
    .if_dout(y_pip_V_5_c_channel_dout),
    .if_num_data_valid(y_pip_V_5_c_channel_num_data_valid),
    .if_fifo_cap(y_pip_V_5_c_channel_fifo_cap),
    .if_empty_n(y_pip_V_5_c_channel_empty_n),
    .if_read(cordic_cr_unsigned_short_6_U0_ap_ready)
);

cordiccart2pol_fifo_w16_d2_S theta_pip_V_5_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cordic_cr_unsigned_short_5_U0_ap_return_2),
    .if_full_n(theta_pip_V_5_c_channel_full_n),
    .if_write(ap_channel_done_theta_pip_V_5_c_channel),
    .if_dout(theta_pip_V_5_c_channel_dout),
    .if_num_data_valid(theta_pip_V_5_c_channel_num_data_valid),
    .if_fifo_cap(theta_pip_V_5_c_channel_fifo_cap),
    .if_empty_n(theta_pip_V_5_c_channel_empty_n),
    .if_read(cordic_cr_unsigned_short_6_U0_ap_ready)
);

cordiccart2pol_fifo_w16_d2_S x_pip_V_6_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cordic_cr_unsigned_short_6_U0_ap_return_0),
    .if_full_n(x_pip_V_6_c_channel_full_n),
    .if_write(ap_channel_done_x_pip_V_6_c_channel),
    .if_dout(x_pip_V_6_c_channel_dout),
    .if_num_data_valid(x_pip_V_6_c_channel_num_data_valid),
    .if_fifo_cap(x_pip_V_6_c_channel_fifo_cap),
    .if_empty_n(x_pip_V_6_c_channel_empty_n),
    .if_read(Block_entry4452_proc_U0_ap_ready)
);

cordiccart2pol_fifo_w16_d2_S y_pip_V_6_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cordic_cr_unsigned_short_6_U0_ap_return_1),
    .if_full_n(y_pip_V_6_c_channel_full_n),
    .if_write(ap_channel_done_y_pip_V_6_c_channel),
    .if_dout(y_pip_V_6_c_channel_dout),
    .if_num_data_valid(y_pip_V_6_c_channel_num_data_valid),
    .if_fifo_cap(y_pip_V_6_c_channel_fifo_cap),
    .if_empty_n(y_pip_V_6_c_channel_empty_n),
    .if_read(Block_entry4452_proc_U0_ap_ready)
);

cordiccart2pol_fifo_w16_d2_S theta_pip_V_6_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cordic_cr_unsigned_short_6_U0_ap_return_2),
    .if_full_n(theta_pip_V_6_c_channel_full_n),
    .if_write(ap_channel_done_theta_pip_V_6_c_channel),
    .if_dout(theta_pip_V_6_c_channel_dout),
    .if_num_data_valid(theta_pip_V_6_c_channel_num_data_valid),
    .if_fifo_cap(theta_pip_V_6_c_channel_fifo_cap),
    .if_empty_n(theta_pip_V_6_c_channel_empty_n),
    .if_read(Block_entry4452_proc_U0_ap_ready)
);

cordiccart2pol_start_for_ini_trans_U0 start_for_ini_trans_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_ini_trans_U0_din),
    .if_full_n(start_for_ini_trans_U0_full_n),
    .if_write(Block_entry44_proc9_U0_start_write),
    .if_dout(start_for_ini_trans_U0_dout),
    .if_empty_n(start_for_ini_trans_U0_empty_n),
    .if_read(ini_trans_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_theta_pip_V_0_c_channel <= 1'b0;
    end else begin
        if (((ini_trans_U0_ap_done & ini_trans_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_theta_pip_V_0_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_theta_pip_V_0_c_channel <= ap_sync_channel_write_theta_pip_V_0_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_theta_pip_V_1_c_channel <= 1'b0;
    end else begin
        if (((cordic_cr_unsigned_short_1_U0_ap_done & cordic_cr_unsigned_short_1_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_theta_pip_V_1_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_theta_pip_V_1_c_channel <= ap_sync_channel_write_theta_pip_V_1_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_theta_pip_V_2_c_channel <= 1'b0;
    end else begin
        if (((cordic_cr_unsigned_short_2_U0_ap_done & cordic_cr_unsigned_short_2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_theta_pip_V_2_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_theta_pip_V_2_c_channel <= ap_sync_channel_write_theta_pip_V_2_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_theta_pip_V_3_c_channel <= 1'b0;
    end else begin
        if (((cordic_cr_unsigned_short_3_U0_ap_done & cordic_cr_unsigned_short_3_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_theta_pip_V_3_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_theta_pip_V_3_c_channel <= ap_sync_channel_write_theta_pip_V_3_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_theta_pip_V_4_c_channel <= 1'b0;
    end else begin
        if (((cordic_cr_unsigned_short_4_U0_ap_done & cordic_cr_unsigned_short_4_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_theta_pip_V_4_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_theta_pip_V_4_c_channel <= ap_sync_channel_write_theta_pip_V_4_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_theta_pip_V_5_c_channel <= 1'b0;
    end else begin
        if (((cordic_cr_unsigned_short_5_U0_ap_done & cordic_cr_unsigned_short_5_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_theta_pip_V_5_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_theta_pip_V_5_c_channel <= ap_sync_channel_write_theta_pip_V_5_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_theta_pip_V_6_c_channel <= 1'b0;
    end else begin
        if (((cordic_cr_unsigned_short_6_U0_ap_done & cordic_cr_unsigned_short_6_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_theta_pip_V_6_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_theta_pip_V_6_c_channel <= ap_sync_channel_write_theta_pip_V_6_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_x_pip_V_0_c_channel <= 1'b0;
    end else begin
        if (((ini_trans_U0_ap_done & ini_trans_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_x_pip_V_0_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_x_pip_V_0_c_channel <= ap_sync_channel_write_x_pip_V_0_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_x_pip_V_1_c_channel <= 1'b0;
    end else begin
        if (((cordic_cr_unsigned_short_1_U0_ap_done & cordic_cr_unsigned_short_1_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_x_pip_V_1_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_x_pip_V_1_c_channel <= ap_sync_channel_write_x_pip_V_1_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_x_pip_V_2_c_channel <= 1'b0;
    end else begin
        if (((cordic_cr_unsigned_short_2_U0_ap_done & cordic_cr_unsigned_short_2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_x_pip_V_2_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_x_pip_V_2_c_channel <= ap_sync_channel_write_x_pip_V_2_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_x_pip_V_3_c_channel <= 1'b0;
    end else begin
        if (((cordic_cr_unsigned_short_3_U0_ap_done & cordic_cr_unsigned_short_3_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_x_pip_V_3_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_x_pip_V_3_c_channel <= ap_sync_channel_write_x_pip_V_3_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_x_pip_V_4_c_channel <= 1'b0;
    end else begin
        if (((cordic_cr_unsigned_short_4_U0_ap_done & cordic_cr_unsigned_short_4_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_x_pip_V_4_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_x_pip_V_4_c_channel <= ap_sync_channel_write_x_pip_V_4_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_x_pip_V_5_c_channel <= 1'b0;
    end else begin
        if (((cordic_cr_unsigned_short_5_U0_ap_done & cordic_cr_unsigned_short_5_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_x_pip_V_5_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_x_pip_V_5_c_channel <= ap_sync_channel_write_x_pip_V_5_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_x_pip_V_6_c_channel <= 1'b0;
    end else begin
        if (((cordic_cr_unsigned_short_6_U0_ap_done & cordic_cr_unsigned_short_6_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_x_pip_V_6_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_x_pip_V_6_c_channel <= ap_sync_channel_write_x_pip_V_6_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_y_pip_V_0_c_channel <= 1'b0;
    end else begin
        if (((ini_trans_U0_ap_done & ini_trans_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_y_pip_V_0_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_y_pip_V_0_c_channel <= ap_sync_channel_write_y_pip_V_0_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_y_pip_V_1_c_channel <= 1'b0;
    end else begin
        if (((cordic_cr_unsigned_short_1_U0_ap_done & cordic_cr_unsigned_short_1_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_y_pip_V_1_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_y_pip_V_1_c_channel <= ap_sync_channel_write_y_pip_V_1_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_y_pip_V_2_c_channel <= 1'b0;
    end else begin
        if (((cordic_cr_unsigned_short_2_U0_ap_done & cordic_cr_unsigned_short_2_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_y_pip_V_2_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_y_pip_V_2_c_channel <= ap_sync_channel_write_y_pip_V_2_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_y_pip_V_3_c_channel <= 1'b0;
    end else begin
        if (((cordic_cr_unsigned_short_3_U0_ap_done & cordic_cr_unsigned_short_3_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_y_pip_V_3_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_y_pip_V_3_c_channel <= ap_sync_channel_write_y_pip_V_3_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_y_pip_V_4_c_channel <= 1'b0;
    end else begin
        if (((cordic_cr_unsigned_short_4_U0_ap_done & cordic_cr_unsigned_short_4_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_y_pip_V_4_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_y_pip_V_4_c_channel <= ap_sync_channel_write_y_pip_V_4_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_y_pip_V_5_c_channel <= 1'b0;
    end else begin
        if (((cordic_cr_unsigned_short_5_U0_ap_done & cordic_cr_unsigned_short_5_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_y_pip_V_5_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_y_pip_V_5_c_channel <= ap_sync_channel_write_y_pip_V_5_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_y_pip_V_6_c_channel <= 1'b0;
    end else begin
        if (((cordic_cr_unsigned_short_6_U0_ap_done & cordic_cr_unsigned_short_6_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_y_pip_V_6_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_y_pip_V_6_c_channel <= ap_sync_channel_write_y_pip_V_6_c_channel;
        end
    end
end

assign Block_entry4452_proc_U0_ap_continue = ap_continue;

assign Block_entry4452_proc_U0_ap_start = (y_pip_V_6_c_channel_empty_n & x_pip_V_6_c_channel_empty_n & theta_pip_V_6_c_channel_empty_n);

assign Block_entry44_proc9_U0_ap_continue = 1'b1;

assign Block_entry44_proc9_U0_ap_start = ap_start;

assign ap_channel_done_theta_pip_V_0_c_channel = (ini_trans_U0_ap_done & (ap_sync_reg_channel_write_theta_pip_V_0_c_channel ^ 1'b1));

assign ap_channel_done_theta_pip_V_1_c_channel = ((ap_sync_reg_channel_write_theta_pip_V_1_c_channel ^ 1'b1) & cordic_cr_unsigned_short_1_U0_ap_done);

assign ap_channel_done_theta_pip_V_2_c_channel = ((ap_sync_reg_channel_write_theta_pip_V_2_c_channel ^ 1'b1) & cordic_cr_unsigned_short_2_U0_ap_done);

assign ap_channel_done_theta_pip_V_3_c_channel = ((ap_sync_reg_channel_write_theta_pip_V_3_c_channel ^ 1'b1) & cordic_cr_unsigned_short_3_U0_ap_done);

assign ap_channel_done_theta_pip_V_4_c_channel = ((ap_sync_reg_channel_write_theta_pip_V_4_c_channel ^ 1'b1) & cordic_cr_unsigned_short_4_U0_ap_done);

assign ap_channel_done_theta_pip_V_5_c_channel = ((ap_sync_reg_channel_write_theta_pip_V_5_c_channel ^ 1'b1) & cordic_cr_unsigned_short_5_U0_ap_done);

assign ap_channel_done_theta_pip_V_6_c_channel = ((ap_sync_reg_channel_write_theta_pip_V_6_c_channel ^ 1'b1) & cordic_cr_unsigned_short_6_U0_ap_done);

assign ap_channel_done_x_pip_V_0_c_channel = (ini_trans_U0_ap_done & (ap_sync_reg_channel_write_x_pip_V_0_c_channel ^ 1'b1));

assign ap_channel_done_x_pip_V_1_c_channel = ((ap_sync_reg_channel_write_x_pip_V_1_c_channel ^ 1'b1) & cordic_cr_unsigned_short_1_U0_ap_done);

assign ap_channel_done_x_pip_V_2_c_channel = ((ap_sync_reg_channel_write_x_pip_V_2_c_channel ^ 1'b1) & cordic_cr_unsigned_short_2_U0_ap_done);

assign ap_channel_done_x_pip_V_3_c_channel = ((ap_sync_reg_channel_write_x_pip_V_3_c_channel ^ 1'b1) & cordic_cr_unsigned_short_3_U0_ap_done);

assign ap_channel_done_x_pip_V_4_c_channel = ((ap_sync_reg_channel_write_x_pip_V_4_c_channel ^ 1'b1) & cordic_cr_unsigned_short_4_U0_ap_done);

assign ap_channel_done_x_pip_V_5_c_channel = ((ap_sync_reg_channel_write_x_pip_V_5_c_channel ^ 1'b1) & cordic_cr_unsigned_short_5_U0_ap_done);

assign ap_channel_done_x_pip_V_6_c_channel = ((ap_sync_reg_channel_write_x_pip_V_6_c_channel ^ 1'b1) & cordic_cr_unsigned_short_6_U0_ap_done);

assign ap_channel_done_y_pip_V_0_c_channel = (ini_trans_U0_ap_done & (ap_sync_reg_channel_write_y_pip_V_0_c_channel ^ 1'b1));

assign ap_channel_done_y_pip_V_1_c_channel = ((ap_sync_reg_channel_write_y_pip_V_1_c_channel ^ 1'b1) & cordic_cr_unsigned_short_1_U0_ap_done);

assign ap_channel_done_y_pip_V_2_c_channel = ((ap_sync_reg_channel_write_y_pip_V_2_c_channel ^ 1'b1) & cordic_cr_unsigned_short_2_U0_ap_done);

assign ap_channel_done_y_pip_V_3_c_channel = ((ap_sync_reg_channel_write_y_pip_V_3_c_channel ^ 1'b1) & cordic_cr_unsigned_short_3_U0_ap_done);

assign ap_channel_done_y_pip_V_4_c_channel = ((ap_sync_reg_channel_write_y_pip_V_4_c_channel ^ 1'b1) & cordic_cr_unsigned_short_4_U0_ap_done);

assign ap_channel_done_y_pip_V_5_c_channel = ((ap_sync_reg_channel_write_y_pip_V_5_c_channel ^ 1'b1) & cordic_cr_unsigned_short_5_U0_ap_done);

assign ap_channel_done_y_pip_V_6_c_channel = ((ap_sync_reg_channel_write_y_pip_V_6_c_channel ^ 1'b1) & cordic_cr_unsigned_short_6_U0_ap_done);

assign ap_done = Block_entry4452_proc_U0_ap_done;

assign ap_idle = (ini_trans_U0_ap_idle & (theta_pip_V_6_c_channel_empty_n ^ 1'b1) & (y_pip_V_6_c_channel_empty_n ^ 1'b1) & (x_pip_V_6_c_channel_empty_n ^ 1'b1) & (theta_pip_V_5_c_channel_empty_n ^ 1'b1) & (y_pip_V_5_c_channel_empty_n ^ 1'b1) & (x_pip_V_5_c_channel_empty_n ^ 1'b1) & (theta_pip_V_4_c_channel_empty_n ^ 1'b1) & (y_pip_V_4_c_channel_empty_n ^ 1'b1) & (x_pip_V_4_c_channel_empty_n ^ 1'b1) & (theta_pip_V_3_c_channel_empty_n ^ 1'b1) & (y_pip_V_3_c_channel_empty_n ^ 1'b1) & (x_pip_V_3_c_channel_empty_n ^ 1'b1) & (theta_pip_V_2_c_channel_empty_n ^ 1'b1) & (y_pip_V_2_c_channel_empty_n ^ 1'b1) & (x_pip_V_2_c_channel_empty_n ^ 1'b1) & (theta_pip_V_1_c_channel_empty_n ^ 1'b1) & (y_pip_V_1_c_channel_empty_n ^ 1'b1) & (x_pip_V_1_c_channel_empty_n ^ 1'b1) & (theta_pip_V_0_c_channel_empty_n ^ 1'b1) & (y_pip_V_0_c_channel_empty_n ^ 1'b1) & (x_pip_V_0_c_channel_empty_n ^ 1'b1) & cordic_cr_unsigned_short_6_U0_ap_idle & cordic_cr_unsigned_short_5_U0_ap_idle & cordic_cr_unsigned_short_4_U0_ap_idle & cordic_cr_unsigned_short_3_U0_ap_idle & cordic_cr_unsigned_short_2_U0_ap_idle & cordic_cr_unsigned_short_1_U0_ap_idle & Block_entry44_proc9_U0_ap_idle & Block_entry4452_proc_U0_ap_idle);

assign ap_ready = Block_entry44_proc9_U0_ap_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_channel_write_theta_pip_V_0_c_channel = ((theta_pip_V_0_c_channel_full_n & ap_channel_done_theta_pip_V_0_c_channel) | ap_sync_reg_channel_write_theta_pip_V_0_c_channel);

assign ap_sync_channel_write_theta_pip_V_1_c_channel = ((theta_pip_V_1_c_channel_full_n & ap_channel_done_theta_pip_V_1_c_channel) | ap_sync_reg_channel_write_theta_pip_V_1_c_channel);

assign ap_sync_channel_write_theta_pip_V_2_c_channel = ((theta_pip_V_2_c_channel_full_n & ap_channel_done_theta_pip_V_2_c_channel) | ap_sync_reg_channel_write_theta_pip_V_2_c_channel);

assign ap_sync_channel_write_theta_pip_V_3_c_channel = ((theta_pip_V_3_c_channel_full_n & ap_channel_done_theta_pip_V_3_c_channel) | ap_sync_reg_channel_write_theta_pip_V_3_c_channel);

assign ap_sync_channel_write_theta_pip_V_4_c_channel = ((theta_pip_V_4_c_channel_full_n & ap_channel_done_theta_pip_V_4_c_channel) | ap_sync_reg_channel_write_theta_pip_V_4_c_channel);

assign ap_sync_channel_write_theta_pip_V_5_c_channel = ((theta_pip_V_5_c_channel_full_n & ap_channel_done_theta_pip_V_5_c_channel) | ap_sync_reg_channel_write_theta_pip_V_5_c_channel);

assign ap_sync_channel_write_theta_pip_V_6_c_channel = ((theta_pip_V_6_c_channel_full_n & ap_channel_done_theta_pip_V_6_c_channel) | ap_sync_reg_channel_write_theta_pip_V_6_c_channel);

assign ap_sync_channel_write_x_pip_V_0_c_channel = ((x_pip_V_0_c_channel_full_n & ap_channel_done_x_pip_V_0_c_channel) | ap_sync_reg_channel_write_x_pip_V_0_c_channel);

assign ap_sync_channel_write_x_pip_V_1_c_channel = ((x_pip_V_1_c_channel_full_n & ap_channel_done_x_pip_V_1_c_channel) | ap_sync_reg_channel_write_x_pip_V_1_c_channel);

assign ap_sync_channel_write_x_pip_V_2_c_channel = ((x_pip_V_2_c_channel_full_n & ap_channel_done_x_pip_V_2_c_channel) | ap_sync_reg_channel_write_x_pip_V_2_c_channel);

assign ap_sync_channel_write_x_pip_V_3_c_channel = ((x_pip_V_3_c_channel_full_n & ap_channel_done_x_pip_V_3_c_channel) | ap_sync_reg_channel_write_x_pip_V_3_c_channel);

assign ap_sync_channel_write_x_pip_V_4_c_channel = ((x_pip_V_4_c_channel_full_n & ap_channel_done_x_pip_V_4_c_channel) | ap_sync_reg_channel_write_x_pip_V_4_c_channel);

assign ap_sync_channel_write_x_pip_V_5_c_channel = ((x_pip_V_5_c_channel_full_n & ap_channel_done_x_pip_V_5_c_channel) | ap_sync_reg_channel_write_x_pip_V_5_c_channel);

assign ap_sync_channel_write_x_pip_V_6_c_channel = ((x_pip_V_6_c_channel_full_n & ap_channel_done_x_pip_V_6_c_channel) | ap_sync_reg_channel_write_x_pip_V_6_c_channel);

assign ap_sync_channel_write_y_pip_V_0_c_channel = ((y_pip_V_0_c_channel_full_n & ap_channel_done_y_pip_V_0_c_channel) | ap_sync_reg_channel_write_y_pip_V_0_c_channel);

assign ap_sync_channel_write_y_pip_V_1_c_channel = ((y_pip_V_1_c_channel_full_n & ap_channel_done_y_pip_V_1_c_channel) | ap_sync_reg_channel_write_y_pip_V_1_c_channel);

assign ap_sync_channel_write_y_pip_V_2_c_channel = ((y_pip_V_2_c_channel_full_n & ap_channel_done_y_pip_V_2_c_channel) | ap_sync_reg_channel_write_y_pip_V_2_c_channel);

assign ap_sync_channel_write_y_pip_V_3_c_channel = ((y_pip_V_3_c_channel_full_n & ap_channel_done_y_pip_V_3_c_channel) | ap_sync_reg_channel_write_y_pip_V_3_c_channel);

assign ap_sync_channel_write_y_pip_V_4_c_channel = ((y_pip_V_4_c_channel_full_n & ap_channel_done_y_pip_V_4_c_channel) | ap_sync_reg_channel_write_y_pip_V_4_c_channel);

assign ap_sync_channel_write_y_pip_V_5_c_channel = ((y_pip_V_5_c_channel_full_n & ap_channel_done_y_pip_V_5_c_channel) | ap_sync_reg_channel_write_y_pip_V_5_c_channel);

assign ap_sync_channel_write_y_pip_V_6_c_channel = ((y_pip_V_6_c_channel_full_n & ap_channel_done_y_pip_V_6_c_channel) | ap_sync_reg_channel_write_y_pip_V_6_c_channel);

assign cordic_cr_unsigned_short_1_U0_ap_continue = (ap_sync_channel_write_y_pip_V_1_c_channel & ap_sync_channel_write_x_pip_V_1_c_channel & ap_sync_channel_write_theta_pip_V_1_c_channel);

assign cordic_cr_unsigned_short_1_U0_ap_start = (y_pip_V_0_c_channel_empty_n & x_pip_V_0_c_channel_empty_n & theta_pip_V_0_c_channel_empty_n);

assign cordic_cr_unsigned_short_2_U0_ap_continue = (ap_sync_channel_write_y_pip_V_2_c_channel & ap_sync_channel_write_x_pip_V_2_c_channel & ap_sync_channel_write_theta_pip_V_2_c_channel);

assign cordic_cr_unsigned_short_2_U0_ap_start = (y_pip_V_1_c_channel_empty_n & x_pip_V_1_c_channel_empty_n & theta_pip_V_1_c_channel_empty_n);

assign cordic_cr_unsigned_short_3_U0_ap_continue = (ap_sync_channel_write_y_pip_V_3_c_channel & ap_sync_channel_write_x_pip_V_3_c_channel & ap_sync_channel_write_theta_pip_V_3_c_channel);

assign cordic_cr_unsigned_short_3_U0_ap_start = (y_pip_V_2_c_channel_empty_n & x_pip_V_2_c_channel_empty_n & theta_pip_V_2_c_channel_empty_n);

assign cordic_cr_unsigned_short_4_U0_ap_continue = (ap_sync_channel_write_y_pip_V_4_c_channel & ap_sync_channel_write_x_pip_V_4_c_channel & ap_sync_channel_write_theta_pip_V_4_c_channel);

assign cordic_cr_unsigned_short_4_U0_ap_start = (y_pip_V_3_c_channel_empty_n & x_pip_V_3_c_channel_empty_n & theta_pip_V_3_c_channel_empty_n);

assign cordic_cr_unsigned_short_5_U0_ap_continue = (ap_sync_channel_write_y_pip_V_5_c_channel & ap_sync_channel_write_x_pip_V_5_c_channel & ap_sync_channel_write_theta_pip_V_5_c_channel);

assign cordic_cr_unsigned_short_5_U0_ap_start = (y_pip_V_4_c_channel_empty_n & x_pip_V_4_c_channel_empty_n & theta_pip_V_4_c_channel_empty_n);

assign cordic_cr_unsigned_short_6_U0_ap_continue = (ap_sync_channel_write_y_pip_V_6_c_channel & ap_sync_channel_write_x_pip_V_6_c_channel & ap_sync_channel_write_theta_pip_V_6_c_channel);

assign cordic_cr_unsigned_short_6_U0_ap_start = (y_pip_V_5_c_channel_empty_n & x_pip_V_5_c_channel_empty_n & theta_pip_V_5_c_channel_empty_n);

assign ini_trans_U0_ap_continue = (ap_sync_channel_write_y_pip_V_0_c_channel & ap_sync_channel_write_x_pip_V_0_c_channel & ap_sync_channel_write_theta_pip_V_0_c_channel);

assign ini_trans_U0_ap_start = start_for_ini_trans_U0_empty_n;

assign r = Block_entry4452_proc_U0_r;

assign r_ap_vld = Block_entry4452_proc_U0_r_ap_vld;

assign start_for_ini_trans_U0_din = 1'b1;

assign theta = Block_entry4452_proc_U0_theta;

assign theta_ap_vld = Block_entry4452_proc_U0_theta_ap_vld;

endmodule //cordiccart2pol
