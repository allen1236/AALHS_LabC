-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_dut_Pipeline_VITIS_LOOP_38_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    src_buff : IN STD_LOGIC_VECTOR (63 downto 0);
    add_ln41 : IN STD_LOGIC_VECTOR (63 downto 0);
    ptr_col_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ptr_col_ce0 : OUT STD_LOGIC;
    ptr_col_we0 : OUT STD_LOGIC;
    ptr_col_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ptr_col_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ptr_col_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ptr_col_ce1 : OUT STD_LOGIC;
    ptr_col_we1 : OUT STD_LOGIC;
    ptr_col_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ptr_col_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ptr_col2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ptr_col2_ce0 : OUT STD_LOGIC;
    ptr_col2_we0 : OUT STD_LOGIC;
    ptr_col2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ptr_col2_base_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ptr_col2_base_ce0 : OUT STD_LOGIC;
    ptr_col2_base_we0 : OUT STD_LOGIC;
    ptr_col2_base_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dst_buff : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of dut_dut_Pipeline_VITIS_LOOP_38_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_D0 : STD_LOGIC_VECTOR (7 downto 0) := "11010000";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_FA4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000111110100100";
    constant ap_const_lv32_1390 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001110010000";
    constant ap_const_lv32_FA8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000111110101000";
    constant ap_const_lv32_1F40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001111101000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_state20_pp0_stage9_iter1 : BOOLEAN;
    signal ap_block_state30_pp0_stage9_iter2 : BOOLEAN;
    signal icmp_ln1065_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_476_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_29_reg_492 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_29_reg_492_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op132_write_state30 : BOOLEAN;
    signal ap_block_state30_io : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal icmp_ln38_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage9 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter2 : BOOLEAN;
    signal ap_predicate_op133_writeresp_state31 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal idx_load_reg_439 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_445 : STD_LOGIC_VECTOR (63 downto 0);
    signal type_reg_451 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_state19_pp0_stage8_iter1 : BOOLEAN;
    signal ap_block_state29_pp0_stage8_iter2 : BOOLEAN;
    signal ap_predicate_op130_write_state29 : BOOLEAN;
    signal ap_block_state29_io : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal icmp_ln38_reg_458 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal icmp_ln38_reg_458_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_2_reg_462 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_idx_V_fu_309_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_idx_V_reg_468 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_state28_pp0_stage7_iter2 : BOOLEAN;
    signal ap_predicate_op128_write_state28 : BOOLEAN;
    signal ap_block_state28_io : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal icmp_ln1065_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln587_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln587_reg_480 : STD_LOGIC_VECTOR (63 downto 0);
    signal ptr_col_addr_reg_486 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_29_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ptr_col_load_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal ptr_col_load_1_reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln60_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln60_reg_509 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_5_reg_514 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_6_reg_520 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state25_pp0_stage4_iter2 : BOOLEAN;
    signal ap_predicate_op122_write_state25 : BOOLEAN;
    signal ap_block_state25_io : BOOLEAN;
    signal ap_predicate_op138_writeresp_state35 : BOOLEAN;
    signal ap_block_state35_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal zext_ln587_2_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln587_1_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cur_src_fu_254_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln41_1_fu_289_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln56_fu_372_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln60_1_fu_386_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter2 : BOOLEAN;
    signal ap_predicate_op119_writereq_state22 : BOOLEAN;
    signal ap_block_state22_io : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state23_pp0_stage2_iter2 : BOOLEAN;
    signal ap_predicate_op120_write_state23 : BOOLEAN;
    signal ap_block_state23_io : BOOLEAN;
    signal ap_block_state33_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state24_pp0_stage3_iter2 : BOOLEAN;
    signal ap_predicate_op121_write_state24 : BOOLEAN;
    signal ap_block_state24_io : BOOLEAN;
    signal ap_block_state34_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_pp0_stage4_01001 : BOOLEAN;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state26_pp0_stage5_iter2 : BOOLEAN;
    signal ap_predicate_op123_write_state26 : BOOLEAN;
    signal ap_predicate_op124_writereq_state26 : BOOLEAN;
    signal ap_block_state26_io : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_pp0_stage5_01001 : BOOLEAN;
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_state27_pp0_stage6_iter2 : BOOLEAN;
    signal ap_predicate_op126_write_state27 : BOOLEAN;
    signal ap_block_state27_io : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_pp0_stage6_01001 : BOOLEAN;
    signal ap_block_pp0_stage7_01001 : BOOLEAN;
    signal ap_block_pp0_stage8_01001 : BOOLEAN;
    signal ap_block_pp0_stage9_01001 : BOOLEAN;
    signal idx_fu_92 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln42_fu_299_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_idx_load : STD_LOGIC_VECTOR (63 downto 0);
    signal prev_col_idx_V_fu_96 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln64_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln49_fu_403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_fu_362_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln_fu_276_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_28_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln60_fu_345_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_236_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln56_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln60_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter2_stage4 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_825 : BOOLEAN;
    signal ap_condition_829 : BOOLEAN;
    signal ap_condition_832 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage9,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage9)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage4))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage4))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    idx_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                idx_fu_92 <= ap_const_lv64_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (icmp_ln38_fu_283_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001))) then 
                idx_fu_92 <= add_ln42_fu_299_p2;
            end if; 
        end if;
    end process;

    prev_col_idx_V_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                prev_col_idx_V_fu_96 <= ap_const_lv3_7;
            elsif (((icmp_ln1065_fu_316_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001))) then 
                prev_col_idx_V_fu_96 <= col_idx_V_reg_468;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0))) then
                add_ln60_reg_509 <= add_ln60_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001))) then
                col_idx_V_reg_468 <= col_idx_V_fu_309_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1065_fu_316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001))) then
                empty_29_reg_492 <= empty_29_fu_335_p2;
                ptr_col_addr_reg_486 <= zext_ln587_fu_321_p1(3 - 1 downto 0);
                    zext_ln587_reg_480(2 downto 0) <= zext_ln587_fu_321_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001))) then
                empty_29_reg_492_pp0_iter2_reg <= empty_29_reg_492;
                icmp_ln1065_reg_476 <= icmp_ln1065_fu_316_p2;
                icmp_ln1065_reg_476_pp0_iter2_reg <= icmp_ln1065_reg_476;
                type_reg_451 <= m_axi_gmem_RDATA(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (icmp_ln38_fu_283_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001))) then
                gmem_addr_2_reg_462 <= add_ln41_1_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0))) then
                gmem_addr_5_reg_514 <= add_ln56_fu_372_p2;
                gmem_addr_6_reg_520 <= add_ln60_1_fu_386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_reg_445 <= cur_src_fu_254_p2;
                idx_load_reg_439 <= ap_sig_allocacmp_idx_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001))) then
                icmp_ln38_reg_458 <= icmp_ln38_fu_283_p2;
                icmp_ln38_reg_458_pp0_iter1_reg <= icmp_ln38_reg_458;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0))) then
                ptr_col_load_1_reg_502 <= ptr_col_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (icmp_ln1065_reg_476 = ap_const_lv1_0))) then
                ptr_col_load_reg_496 <= ptr_col_q0;
            end if;
        end if;
    end process;
    zext_ln587_reg_480(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage9_subdone, ap_block_pp0_stage4_subdone, ap_condition_exit_pp0_iter2_stage4, ap_idle_pp0_0to1, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to3, ap_done_pending_pp0, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage4))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln41_1_fu_289_p2 <= std_logic_vector(unsigned(idx_load_reg_439) + unsigned(add_ln41));
    add_ln42_fu_299_p2 <= std_logic_vector(unsigned(idx_load_reg_439) + unsigned(ap_const_lv64_B));
    add_ln49_fu_403_p2 <= std_logic_vector(unsigned(ptr_col_load_reg_496) + unsigned(ap_const_lv32_1F40));
    add_ln54_fu_362_p2 <= std_logic_vector(signed(ptr_col_load_1_reg_502) + signed(ap_const_lv32_FA8));
    add_ln56_fu_372_p2 <= std_logic_vector(signed(sext_ln56_fu_369_p1) + signed(dst_buff));
    add_ln60_1_fu_386_p2 <= std_logic_vector(signed(sext_ln60_fu_383_p1) + signed(dst_buff));
    add_ln60_fu_345_p0 <= ptr_col_q1;
    add_ln60_fu_345_p2 <= std_logic_vector(signed(add_ln60_fu_345_p0) + signed(ap_const_lv32_FA4));
    add_ln64_fu_397_p2 <= std_logic_vector(signed(ptr_col_load_1_reg_502) + signed(ap_const_lv32_4));
    and_ln_fu_276_p3 <= (type_reg_451 & ap_const_lv4_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, m_axi_gmem_ARREADY, m_axi_gmem_BVALID, ap_predicate_op133_writeresp_state31)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_gmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_predicate_op133_writeresp_state31 = ap_const_boolean_1)) or ((m_axi_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, m_axi_gmem_ARREADY, m_axi_gmem_BVALID, ap_predicate_op133_writeresp_state31)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_gmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_predicate_op133_writeresp_state31 = ap_const_boolean_1)) or ((m_axi_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, m_axi_gmem_ARREADY, ap_block_state22_io)
    begin
                ap_block_pp0_stage1_11001 <= (((m_axi_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state22_io)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, m_axi_gmem_ARREADY, ap_block_state22_io)
    begin
                ap_block_pp0_stage1_subdone <= (((m_axi_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state22_io)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state23_io)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state23_io));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state23_io)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state23_io));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state24_io)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state24_io));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state24_io)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state24_io));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_01001_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_gmem_BVALID, ap_predicate_op138_writeresp_state35)
    begin
                ap_block_pp0_stage4_01001 <= ((m_axi_gmem_BVALID = ap_const_logic_0) and (ap_predicate_op138_writeresp_state35 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, m_axi_gmem_BVALID, ap_block_state25_io, ap_predicate_op138_writeresp_state35)
    begin
                ap_block_pp0_stage4_11001 <= (((m_axi_gmem_BVALID = ap_const_logic_0) and (ap_predicate_op138_writeresp_state35 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state25_io)));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, m_axi_gmem_BVALID, ap_block_state25_io, ap_predicate_op138_writeresp_state35)
    begin
                ap_block_pp0_stage4_subdone <= (((m_axi_gmem_BVALID = ap_const_logic_0) and (ap_predicate_op138_writeresp_state35 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state25_io)));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state26_io)
    begin
                ap_block_pp0_stage5_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state26_io));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state26_io)
    begin
                ap_block_pp0_stage5_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state26_io));
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state27_io)
    begin
                ap_block_pp0_stage6_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state27_io));
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state27_io)
    begin
                ap_block_pp0_stage6_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state27_io));
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_01001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage7_01001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage7_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, m_axi_gmem_RVALID, ap_block_state28_io)
    begin
                ap_block_pp0_stage7_11001 <= (((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state28_io)));
    end process;


    ap_block_pp0_stage7_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, m_axi_gmem_RVALID, ap_block_state28_io)
    begin
                ap_block_pp0_stage7_subdone <= (((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state28_io)));
    end process;

        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage8_01001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage8_01001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage8_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, m_axi_gmem_RVALID, ap_block_state29_io)
    begin
                ap_block_pp0_stage8_11001 <= (((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state29_io)));
    end process;


    ap_block_pp0_stage8_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, m_axi_gmem_RVALID, ap_block_state29_io)
    begin
                ap_block_pp0_stage8_subdone <= (((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state29_io)));
    end process;

        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage9_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state30_io)
    begin
                ap_block_pp0_stage9_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state30_io));
    end process;


    ap_block_pp0_stage9_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state30_io)
    begin
                ap_block_pp0_stage9_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state30_io));
    end process;

        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_pp0_stage7_iter1_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state18_pp0_stage7_iter1 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;

        ap_block_state19_pp0_stage8_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage9_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_io_assign_proc : process(m_axi_gmem_AWREADY, ap_predicate_op119_writereq_state22)
    begin
                ap_block_state22_io <= ((m_axi_gmem_AWREADY = ap_const_logic_0) and (ap_predicate_op119_writereq_state22 = ap_const_boolean_1));
    end process;

        ap_block_state22_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_io_assign_proc : process(m_axi_gmem_WREADY, ap_predicate_op120_write_state23)
    begin
                ap_block_state23_io <= ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_predicate_op120_write_state23 = ap_const_boolean_1));
    end process;

        ap_block_state23_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_io_assign_proc : process(m_axi_gmem_WREADY, ap_predicate_op121_write_state24)
    begin
                ap_block_state24_io <= ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_predicate_op121_write_state24 = ap_const_boolean_1));
    end process;

        ap_block_state24_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state25_io_assign_proc : process(m_axi_gmem_WREADY, ap_predicate_op122_write_state25)
    begin
                ap_block_state25_io <= ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_predicate_op122_write_state25 = ap_const_boolean_1));
    end process;

        ap_block_state25_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state26_io_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_WREADY, ap_predicate_op123_write_state26, ap_predicate_op124_writereq_state26)
    begin
                ap_block_state26_io <= (((m_axi_gmem_AWREADY = ap_const_logic_0) and (ap_predicate_op124_writereq_state26 = ap_const_boolean_1)) or ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_predicate_op123_write_state26 = ap_const_boolean_1)));
    end process;

        ap_block_state26_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state27_io_assign_proc : process(m_axi_gmem_WREADY, ap_predicate_op126_write_state27)
    begin
                ap_block_state27_io <= ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_predicate_op126_write_state27 = ap_const_boolean_1));
    end process;

        ap_block_state27_pp0_stage6_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state28_io_assign_proc : process(m_axi_gmem_WREADY, ap_predicate_op128_write_state28)
    begin
                ap_block_state28_io <= ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_predicate_op128_write_state28 = ap_const_boolean_1));
    end process;

        ap_block_state28_pp0_stage7_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state29_io_assign_proc : process(m_axi_gmem_WREADY, ap_predicate_op130_write_state29)
    begin
                ap_block_state29_io <= ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_predicate_op130_write_state29 = ap_const_boolean_1));
    end process;

        ap_block_state29_pp0_stage8_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state30_io_assign_proc : process(m_axi_gmem_WREADY, ap_predicate_op132_write_state30)
    begin
                ap_block_state30_io <= ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_predicate_op132_write_state30 = ap_const_boolean_1));
    end process;

        ap_block_state30_pp0_stage9_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state31_pp0_stage0_iter3_assign_proc : process(m_axi_gmem_BVALID, ap_predicate_op133_writeresp_state31)
    begin
                ap_block_state31_pp0_stage0_iter3 <= ((m_axi_gmem_BVALID = ap_const_logic_0) and (ap_predicate_op133_writeresp_state31 = ap_const_boolean_1));
    end process;

        ap_block_state32_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state35_pp0_stage4_iter3_assign_proc : process(m_axi_gmem_BVALID, ap_predicate_op138_writeresp_state35)
    begin
                ap_block_state35_pp0_stage4_iter3 <= ((m_axi_gmem_BVALID = ap_const_logic_0) and (ap_predicate_op138_writeresp_state35 = ap_const_boolean_1));
    end process;

        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage8_iter0_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state9_pp0_stage8_iter0 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_condition_825_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_predicate_op119_writereq_state22, ap_block_pp0_stage1_11001)
    begin
                ap_condition_825 <= ((ap_predicate_op119_writereq_state22 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001));
    end process;


    ap_condition_829_assign_proc : process(ap_CS_fsm_pp0_stage5, ap_predicate_op124_writereq_state26, ap_block_pp0_stage5_11001)
    begin
                ap_condition_829 <= ((ap_predicate_op124_writereq_state26 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001));
    end process;


    ap_condition_832_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln1065_reg_476, ap_block_pp0_stage0)
    begin
                ap_condition_832 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1065_reg_476 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage9_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_subdone, icmp_ln38_fu_283_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (icmp_ln38_fu_283_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_subdone))) then 
            ap_condition_exit_pp0_iter0_stage9 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage4_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, icmp_ln38_reg_458_pp0_iter1_reg, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln38_reg_458_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
            ap_condition_exit_pp0_iter2_stage4 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (not(((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_loop_exit_ready = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage9;

    ap_predicate_op119_writereq_state22_assign_proc : process(icmp_ln1065_reg_476, empty_29_reg_492)
    begin
                ap_predicate_op119_writereq_state22 <= ((empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0));
    end process;


    ap_predicate_op120_write_state23_assign_proc : process(icmp_ln1065_reg_476, empty_29_reg_492)
    begin
                ap_predicate_op120_write_state23 <= ((empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0));
    end process;


    ap_predicate_op121_write_state24_assign_proc : process(icmp_ln1065_reg_476, empty_29_reg_492)
    begin
                ap_predicate_op121_write_state24 <= ((empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0));
    end process;


    ap_predicate_op122_write_state25_assign_proc : process(icmp_ln1065_reg_476, empty_29_reg_492)
    begin
                ap_predicate_op122_write_state25 <= ((empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0));
    end process;


    ap_predicate_op123_write_state26_assign_proc : process(icmp_ln1065_reg_476, empty_29_reg_492)
    begin
                ap_predicate_op123_write_state26 <= ((empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0));
    end process;


    ap_predicate_op124_writereq_state26_assign_proc : process(icmp_ln1065_reg_476, empty_29_reg_492)
    begin
                ap_predicate_op124_writereq_state26 <= ((empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0));
    end process;


    ap_predicate_op126_write_state27_assign_proc : process(icmp_ln1065_reg_476, empty_29_reg_492)
    begin
                ap_predicate_op126_write_state27 <= ((empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0));
    end process;


    ap_predicate_op128_write_state28_assign_proc : process(icmp_ln1065_reg_476, empty_29_reg_492)
    begin
                ap_predicate_op128_write_state28 <= ((empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0));
    end process;


    ap_predicate_op130_write_state29_assign_proc : process(icmp_ln1065_reg_476, empty_29_reg_492)
    begin
                ap_predicate_op130_write_state29 <= ((empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0));
    end process;


    ap_predicate_op132_write_state30_assign_proc : process(icmp_ln1065_reg_476_pp0_iter2_reg, empty_29_reg_492_pp0_iter2_reg)
    begin
                ap_predicate_op132_write_state30 <= ((empty_29_reg_492_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln1065_reg_476_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op133_writeresp_state31_assign_proc : process(icmp_ln1065_reg_476_pp0_iter2_reg, empty_29_reg_492_pp0_iter2_reg)
    begin
                ap_predicate_op133_writeresp_state31 <= ((empty_29_reg_492_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln1065_reg_476_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op138_writeresp_state35_assign_proc : process(icmp_ln1065_reg_476_pp0_iter2_reg, empty_29_reg_492_pp0_iter2_reg)
    begin
                ap_predicate_op138_writeresp_state35 <= ((empty_29_reg_492_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln1065_reg_476_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_idx_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, idx_fu_92, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_idx_load <= ap_const_lv64_0;
        else 
            ap_sig_allocacmp_idx_load <= idx_fu_92;
        end if; 
    end process;

    col_idx_V_fu_309_p1 <= m_axi_gmem_RDATA(3 - 1 downto 0);
    cur_src_fu_254_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_idx_load) + unsigned(src_buff));
    empty_28_fu_330_p2 <= "1" when (type_reg_451 = ap_const_lv4_1) else "0";
    empty_29_fu_335_p2 <= (empty_fu_325_p2 or empty_28_fu_330_p2);
    empty_fu_325_p2 <= "1" when (type_reg_451 = ap_const_lv4_3) else "0";

    gmem_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, m_axi_gmem_ARREADY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem_AWREADY, icmp_ln1065_reg_476, empty_29_reg_492, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0)))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, m_axi_gmem_BVALID, icmp_ln1065_reg_476_pp0_iter2_reg, empty_29_reg_492_pp0_iter2_reg, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (empty_29_reg_492_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln1065_reg_476_pp0_iter2_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (empty_29_reg_492_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln1065_reg_476_pp0_iter2_reg = ap_const_lv1_0)))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage9, m_axi_gmem_WREADY, icmp_ln1065_reg_476, empty_29_reg_492, ap_predicate_op132_write_state30, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_block_pp0_stage9)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_predicate_op132_write_state30 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0)))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_236_p2 <= std_logic_vector(unsigned(col_idx_V_reg_468) + unsigned(ap_const_lv3_1));
    icmp_ln1065_fu_316_p2 <= "1" when (col_idx_V_reg_468 = prev_col_idx_V_fu_96) else "0";
    icmp_ln38_fu_283_p2 <= "1" when (and_ln_fu_276_p3 = ap_const_lv8_D0) else "0";

    m_axi_gmem_ARADDR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, gmem_addr_reg_445, gmem_addr_2_reg_462, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_ARADDR <= gmem_addr_2_reg_462;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_gmem_ARADDR <= gmem_addr_reg_445;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_AWADDR_assign_proc : process(ap_enable_reg_pp0_iter2, gmem_addr_5_reg_514, gmem_addr_6_reg_520, ap_condition_825, ap_condition_829)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_829)) then 
                m_axi_gmem_AWADDR <= gmem_addr_6_reg_520;
            elsif ((ap_const_boolean_1 = ap_condition_825)) then 
                m_axi_gmem_AWADDR <= gmem_addr_5_reg_514;
            else 
                m_axi_gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_4;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage5, ap_predicate_op119_writereq_state22, ap_block_pp0_stage1_11001, ap_predicate_op124_writereq_state26, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_predicate_op124_writereq_state26 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_predicate_op119_writereq_state22 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage4, ap_predicate_op133_writeresp_state31, ap_block_pp0_stage0_11001, ap_predicate_op138_writeresp_state35, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_predicate_op138_writeresp_state35 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_predicate_op133_writeresp_state31 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage8_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv8_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv1_1;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage9, ap_predicate_op132_write_state30, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_predicate_op130_write_state29, ap_block_pp0_stage8_11001, ap_block_pp0_stage9_11001, ap_predicate_op128_write_state28, ap_block_pp0_stage7_11001, ap_predicate_op122_write_state25, ap_predicate_op120_write_state23, ap_block_pp0_stage2_11001, ap_predicate_op121_write_state24, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_predicate_op123_write_state26, ap_block_pp0_stage5_11001, ap_predicate_op126_write_state27, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_predicate_op126_write_state27 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_predicate_op123_write_state26 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_predicate_op121_write_state24 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_predicate_op120_write_state23 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_predicate_op122_write_state25 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_predicate_op128_write_state28 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_predicate_op132_write_state30 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op130_write_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    ptr_col2_address0 <= zext_ln587_reg_480(3 - 1 downto 0);
    ptr_col2_base_address0 <= zext_ln587_reg_480(3 - 1 downto 0);

    ptr_col2_base_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ptr_col2_base_ce0 <= ap_const_logic_1;
        else 
            ptr_col2_base_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ptr_col2_base_d0 <= add_ln54_fu_362_p2;

    ptr_col2_base_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln1065_reg_476, empty_29_reg_492, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0))) then 
            ptr_col2_base_we0 <= ap_const_logic_1;
        else 
            ptr_col2_base_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ptr_col2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ptr_col2_ce0 <= ap_const_logic_1;
        else 
            ptr_col2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ptr_col2_d0 <= add_ln54_fu_362_p2;

    ptr_col2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln1065_reg_476, empty_29_reg_492, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0))) then 
            ptr_col2_we0 <= ap_const_logic_1;
        else 
            ptr_col2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ptr_col_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln1065_reg_476, empty_29_reg_492, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8, ap_block_pp0_stage0, zext_ln587_fu_321_p1, ptr_col_addr_reg_486, zext_ln587_1_fu_409_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (empty_29_reg_492 = ap_const_lv1_1) and (icmp_ln1065_reg_476 = ap_const_lv1_0))) then 
            ptr_col_address0 <= zext_ln587_1_fu_409_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0))) then 
            ptr_col_address0 <= ptr_col_addr_reg_486;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8))) then 
            ptr_col_address0 <= zext_ln587_fu_321_p1(3 - 1 downto 0);
        else 
            ptr_col_address0 <= "XXX";
        end if; 
    end process;


    ptr_col_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8, ap_block_pp0_stage0, zext_ln587_fu_321_p1, zext_ln587_2_fu_357_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ptr_col_address1 <= zext_ln587_2_fu_357_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8))) then 
            ptr_col_address1 <= zext_ln587_fu_321_p1(3 - 1 downto 0);
        else 
            ptr_col_address1 <= "XXX";
        end if; 
    end process;


    ptr_col_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln1065_reg_476, empty_29_reg_492, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage0_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_29_reg_492 = ap_const_lv1_1) and (icmp_ln1065_reg_476 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0)))) then 
            ptr_col_ce0 <= ap_const_logic_1;
        else 
            ptr_col_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ptr_col_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage0_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            ptr_col_ce1 <= ap_const_logic_1;
        else 
            ptr_col_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ptr_col_d0_assign_proc : process(empty_29_reg_492, add_ln64_fu_397_p2, add_ln49_fu_403_p2, ap_condition_832)
    begin
        if ((ap_const_boolean_1 = ap_condition_832)) then
            if ((empty_29_reg_492 = ap_const_lv1_1)) then 
                ptr_col_d0 <= add_ln49_fu_403_p2;
            elsif ((empty_29_reg_492 = ap_const_lv1_0)) then 
                ptr_col_d0 <= add_ln64_fu_397_p2;
            else 
                ptr_col_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ptr_col_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    ptr_col_d1 <= std_logic_vector(unsigned(ptr_col_load_reg_496) + unsigned(ap_const_lv32_1390));

    ptr_col_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln1065_reg_476, empty_29_reg_492, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_29_reg_492 = ap_const_lv1_1) and (icmp_ln1065_reg_476 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0)))) then 
            ptr_col_we0 <= ap_const_logic_1;
        else 
            ptr_col_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ptr_col_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln1065_reg_476, empty_29_reg_492, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_29_reg_492 = ap_const_lv1_0) and (icmp_ln1065_reg_476 = ap_const_lv1_0))) then 
            ptr_col_we1 <= ap_const_logic_1;
        else 
            ptr_col_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln56_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ptr_col_load_1_reg_502),64));

        sext_ln60_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln60_reg_509),64));

    zext_ln587_1_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_236_p2),64));
    zext_ln587_2_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_236_p2),64));
    zext_ln587_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_idx_V_reg_468),64));
end behav;
