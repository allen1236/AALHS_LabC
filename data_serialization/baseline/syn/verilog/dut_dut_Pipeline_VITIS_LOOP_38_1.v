// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_dut_Pipeline_VITIS_LOOP_38_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        src_buff,
        add_ln41,
        ptr_col_address0,
        ptr_col_ce0,
        ptr_col_we0,
        ptr_col_d0,
        ptr_col_q0,
        ptr_col_address1,
        ptr_col_ce1,
        ptr_col_we1,
        ptr_col_d1,
        ptr_col_q1,
        ptr_col2_address0,
        ptr_col2_ce0,
        ptr_col2_we0,
        ptr_col2_d0,
        ptr_col2_base_address0,
        ptr_col2_base_ce0,
        ptr_col2_base_we0,
        ptr_col2_base_d0,
        dst_buff
);

parameter    ap_ST_fsm_pp0_stage0 = 10'd1;
parameter    ap_ST_fsm_pp0_stage1 = 10'd2;
parameter    ap_ST_fsm_pp0_stage2 = 10'd4;
parameter    ap_ST_fsm_pp0_stage3 = 10'd8;
parameter    ap_ST_fsm_pp0_stage4 = 10'd16;
parameter    ap_ST_fsm_pp0_stage5 = 10'd32;
parameter    ap_ST_fsm_pp0_stage6 = 10'd64;
parameter    ap_ST_fsm_pp0_stage7 = 10'd128;
parameter    ap_ST_fsm_pp0_stage8 = 10'd256;
parameter    ap_ST_fsm_pp0_stage9 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [7:0] m_axi_gmem_WDATA;
output  [0:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [7:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [10:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] src_buff;
input  [63:0] add_ln41;
output  [2:0] ptr_col_address0;
output   ptr_col_ce0;
output   ptr_col_we0;
output  [31:0] ptr_col_d0;
input  [31:0] ptr_col_q0;
output  [2:0] ptr_col_address1;
output   ptr_col_ce1;
output   ptr_col_we1;
output  [31:0] ptr_col_d1;
input  [31:0] ptr_col_q1;
output  [2:0] ptr_col2_address0;
output   ptr_col2_ce0;
output   ptr_col2_we0;
output  [31:0] ptr_col2_d0;
output  [2:0] ptr_col2_base_address0;
output   ptr_col2_base_ce0;
output   ptr_col2_base_we0;
output  [31:0] ptr_col2_base_d0;
input  [63:0] dst_buff;

reg ap_idle;
reg m_axi_gmem_AWVALID;
reg[63:0] m_axi_gmem_AWADDR;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;
reg[2:0] ptr_col_address0;
reg ptr_col_ce0;
reg ptr_col_we0;
reg[31:0] ptr_col_d0;
reg[2:0] ptr_col_address1;
reg ptr_col_ce1;
reg ptr_col_we1;
reg ptr_col2_ce0;
reg ptr_col2_we0;
reg ptr_col2_base_ce0;
reg ptr_col2_base_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_state20_pp0_stage9_iter1;
wire    ap_block_state30_pp0_stage9_iter2;
reg   [0:0] icmp_ln1065_reg_476;
reg   [0:0] icmp_ln1065_reg_476_pp0_iter2_reg;
reg   [0:0] empty_29_reg_492;
reg   [0:0] empty_29_reg_492_pp0_iter2_reg;
reg    ap_predicate_op132_write_state30;
reg    ap_block_state30_io;
reg    ap_block_pp0_stage9_subdone;
wire   [0:0] icmp_ln38_fu_283_p2;
reg    ap_condition_exit_pp0_iter0_stage9;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
reg    gmem_blk_n_AW;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage9;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state21_pp0_stage0_iter2;
reg    ap_predicate_op133_writeresp_state31;
reg    ap_block_state31_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] idx_load_reg_439;
reg   [63:0] gmem_addr_reg_445;
reg   [3:0] type_reg_451;
reg    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_state19_pp0_stage8_iter1;
wire    ap_block_state29_pp0_stage8_iter2;
reg    ap_predicate_op130_write_state29;
reg    ap_block_state29_io;
reg    ap_block_pp0_stage8_11001;
reg   [0:0] icmp_ln38_reg_458;
reg    ap_block_pp0_stage9_11001;
reg   [0:0] icmp_ln38_reg_458_pp0_iter1_reg;
reg   [63:0] gmem_addr_2_reg_462;
wire   [2:0] col_idx_V_fu_309_p1;
reg   [2:0] col_idx_V_reg_468;
wire    ap_block_state8_pp0_stage7_iter0;
reg    ap_block_state18_pp0_stage7_iter1;
wire    ap_block_state28_pp0_stage7_iter2;
reg    ap_predicate_op128_write_state28;
reg    ap_block_state28_io;
reg    ap_block_pp0_stage7_11001;
wire   [0:0] icmp_ln1065_fu_316_p2;
wire   [63:0] zext_ln587_fu_321_p1;
reg   [63:0] zext_ln587_reg_480;
reg   [2:0] ptr_col_addr_reg_486;
wire   [0:0] empty_29_fu_335_p2;
reg   [31:0] ptr_col_load_reg_496;
reg  signed [31:0] ptr_col_load_1_reg_502;
wire   [31:0] add_ln60_fu_345_p2;
reg   [31:0] add_ln60_reg_509;
reg   [63:0] gmem_addr_5_reg_514;
reg   [63:0] gmem_addr_6_reg_520;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state15_pp0_stage4_iter1;
wire    ap_block_state25_pp0_stage4_iter2;
reg    ap_predicate_op122_write_state25;
reg    ap_block_state25_io;
reg    ap_predicate_op138_writeresp_state35;
reg    ap_block_state35_pp0_stage4_iter3;
reg    ap_block_pp0_stage4_subdone;
wire   [63:0] zext_ln587_2_fu_357_p1;
wire   [63:0] zext_ln587_1_fu_409_p1;
wire   [63:0] cur_src_fu_254_p2;
wire   [63:0] add_ln41_1_fu_289_p2;
wire   [63:0] add_ln56_fu_372_p2;
wire   [63:0] add_ln60_1_fu_386_p2;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state12_pp0_stage1_iter1;
wire    ap_block_state22_pp0_stage1_iter2;
reg    ap_predicate_op119_writereq_state22;
reg    ap_block_state22_io;
wire    ap_block_state32_pp0_stage1_iter3;
reg    ap_block_pp0_stage1_11001;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state13_pp0_stage2_iter1;
wire    ap_block_state23_pp0_stage2_iter2;
reg    ap_predicate_op120_write_state23;
reg    ap_block_state23_io;
wire    ap_block_state33_pp0_stage2_iter3;
reg    ap_block_pp0_stage2_11001;
wire    ap_block_pp0_stage2_01001;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state14_pp0_stage3_iter1;
wire    ap_block_state24_pp0_stage3_iter2;
reg    ap_predicate_op121_write_state24;
reg    ap_block_state24_io;
wire    ap_block_state34_pp0_stage3_iter3;
reg    ap_block_pp0_stage3_11001;
wire    ap_block_pp0_stage3_01001;
reg    ap_block_pp0_stage4_11001;
reg    ap_block_pp0_stage4_01001;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state16_pp0_stage5_iter1;
wire    ap_block_state26_pp0_stage5_iter2;
reg    ap_predicate_op123_write_state26;
reg    ap_predicate_op124_writereq_state26;
reg    ap_block_state26_io;
reg    ap_block_pp0_stage5_11001;
wire    ap_block_pp0_stage5_01001;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_state17_pp0_stage6_iter1;
wire    ap_block_state27_pp0_stage6_iter2;
reg    ap_predicate_op126_write_state27;
reg    ap_block_state27_io;
reg    ap_block_pp0_stage6_11001;
wire    ap_block_pp0_stage6_01001;
reg    ap_block_pp0_stage7_01001;
reg    ap_block_pp0_stage8_01001;
wire    ap_block_pp0_stage9_01001;
reg   [63:0] idx_fu_92;
wire   [63:0] add_ln42_fu_299_p2;
wire    ap_loop_init;
reg   [63:0] ap_sig_allocacmp_idx_load;
reg   [2:0] prev_col_idx_V_fu_96;
wire   [31:0] add_ln64_fu_397_p2;
wire   [31:0] add_ln49_fu_403_p2;
wire   [31:0] add_ln54_fu_362_p2;
wire   [7:0] and_ln_fu_276_p3;
wire   [0:0] empty_28_fu_330_p2;
wire   [0:0] empty_fu_325_p2;
wire  signed [31:0] add_ln60_fu_345_p0;
wire   [2:0] grp_fu_236_p2;
wire  signed [63:0] sext_ln56_fu_369_p1;
wire  signed [63:0] sext_ln60_fu_383_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage4;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [9:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to3;
reg    ap_done_pending_pp0;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp0_stage7_subdone;
reg    ap_block_pp0_stage8_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_825;
reg    ap_condition_829;
reg    ap_condition_832;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage9),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage9)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage4))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage4))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idx_fu_92 <= 64'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln38_fu_283_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001))) begin
        idx_fu_92 <= add_ln42_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        prev_col_idx_V_fu_96 <= 3'd7;
    end else if (((icmp_ln1065_fu_316_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001))) begin
        prev_col_idx_V_fu_96 <= col_idx_V_reg_468;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001) & (empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0))) begin
        add_ln60_reg_509 <= add_ln60_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        col_idx_V_reg_468 <= col_idx_V_fu_309_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_fu_316_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001))) begin
        empty_29_reg_492 <= empty_29_fu_335_p2;
        ptr_col_addr_reg_486 <= zext_ln587_fu_321_p1;
        zext_ln587_reg_480[2 : 0] <= zext_ln587_fu_321_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001))) begin
        empty_29_reg_492_pp0_iter2_reg <= empty_29_reg_492;
        icmp_ln1065_reg_476 <= icmp_ln1065_fu_316_p2;
        icmp_ln1065_reg_476_pp0_iter2_reg <= icmp_ln1065_reg_476;
        type_reg_451 <= {{m_axi_gmem_RDATA[7:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln38_fu_283_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001))) begin
        gmem_addr_2_reg_462 <= add_ln41_1_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0))) begin
        gmem_addr_5_reg_514 <= add_ln56_fu_372_p2;
        gmem_addr_6_reg_520 <= add_ln60_1_fu_386_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_reg_445 <= cur_src_fu_254_p2;
        idx_load_reg_439 <= ap_sig_allocacmp_idx_load;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001))) begin
        icmp_ln38_reg_458 <= icmp_ln38_fu_283_p2;
        icmp_ln38_reg_458_pp0_iter1_reg <= icmp_ln38_reg_458;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001) & (empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0))) begin
        ptr_col_load_1_reg_502 <= ptr_col_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001) & (icmp_ln1065_reg_476 == 1'd0))) begin
        ptr_col_load_reg_496 <= ptr_col_q0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln38_fu_283_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage9_subdone))) begin
        ap_condition_exit_pp0_iter0_stage9 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage9 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln38_reg_458_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
        ap_condition_exit_pp0_iter2_stage4 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (ap_loop_exit_ready == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_idx_load = 64'd0;
    end else begin
        ap_sig_allocacmp_idx_load = idx_fu_92;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5) & (empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0)))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (empty_29_reg_492_pp0_iter2_reg == 1'd0) & (icmp_ln1065_reg_476_pp0_iter2_reg == 1'd0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4) & (empty_29_reg_492_pp0_iter2_reg == 1'd0) & (icmp_ln1065_reg_476_pp0_iter2_reg == 1'd0)))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9) & (ap_predicate_op132_write_state30 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6) & (empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5) & (empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4) & (empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3) & (empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7) & (empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8) & (empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0)))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_ARADDR = gmem_addr_2_reg_462;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_gmem_ARADDR = gmem_addr_reg_445;
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if ((1'b1 == ap_condition_829)) begin
            m_axi_gmem_AWADDR = gmem_addr_6_reg_520;
        end else if ((1'b1 == ap_condition_825)) begin
            m_axi_gmem_AWADDR = gmem_addr_5_reg_514;
        end else begin
            m_axi_gmem_AWADDR = 'bx;
        end
    end else begin
        m_axi_gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op124_writereq_state26 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_predicate_op119_writereq_state22 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op138_writeresp_state35 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_predicate_op133_writeresp_state31 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op126_write_state27 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_predicate_op123_write_state26 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_predicate_op121_write_state24 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_predicate_op120_write_state23 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_predicate_op122_write_state25 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_predicate_op128_write_state28 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_predicate_op132_write_state30 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op130_write_state29 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ptr_col2_base_ce0 = 1'b1;
    end else begin
        ptr_col2_base_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0))) begin
        ptr_col2_base_we0 = 1'b1;
    end else begin
        ptr_col2_base_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ptr_col2_ce0 = 1'b1;
    end else begin
        ptr_col2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0))) begin
        ptr_col2_we0 = 1'b1;
    end else begin
        ptr_col2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (empty_29_reg_492 == 1'd1) & (icmp_ln1065_reg_476 == 1'd0))) begin
        ptr_col_address0 = zext_ln587_1_fu_409_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0))) begin
        ptr_col_address0 = ptr_col_addr_reg_486;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        ptr_col_address0 = zext_ln587_fu_321_p1;
    end else begin
        ptr_col_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ptr_col_address1 = zext_ln587_2_fu_357_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        ptr_col_address1 = zext_ln587_fu_321_p1;
    end else begin
        ptr_col_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_29_reg_492 == 1'd1) & (icmp_ln1065_reg_476 == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0)))) begin
        ptr_col_ce0 = 1'b1;
    end else begin
        ptr_col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ptr_col_ce1 = 1'b1;
    end else begin
        ptr_col_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_832)) begin
        if ((empty_29_reg_492 == 1'd1)) begin
            ptr_col_d0 = add_ln49_fu_403_p2;
        end else if ((empty_29_reg_492 == 1'd0)) begin
            ptr_col_d0 = add_ln64_fu_397_p2;
        end else begin
            ptr_col_d0 = 'bx;
        end
    end else begin
        ptr_col_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_29_reg_492 == 1'd1) & (icmp_ln1065_reg_476 == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0)))) begin
        ptr_col_we0 = 1'b1;
    end else begin
        ptr_col_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0))) begin
        ptr_col_we1 = 1'b1;
    end else begin
        ptr_col_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage4))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln41_1_fu_289_p2 = (idx_load_reg_439 + add_ln41);

assign add_ln42_fu_299_p2 = (idx_load_reg_439 + 64'd11);

assign add_ln49_fu_403_p2 = (ptr_col_load_reg_496 + 32'd8000);

assign add_ln54_fu_362_p2 = ($signed(ptr_col_load_1_reg_502) + $signed(32'd4008));

assign add_ln56_fu_372_p2 = ($signed(sext_ln56_fu_369_p1) + $signed(dst_buff));

assign add_ln60_1_fu_386_p2 = ($signed(sext_ln60_fu_383_p1) + $signed(dst_buff));

assign add_ln60_fu_345_p0 = ptr_col_q1;

assign add_ln60_fu_345_p2 = ($signed(add_ln60_fu_345_p0) + $signed(32'd4004));

assign add_ln64_fu_397_p2 = ($signed(ptr_col_load_1_reg_502) + $signed(32'd4));

assign and_ln_fu_276_p3 = {{type_reg_451}, {4'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_predicate_op133_writeresp_state31 == 1'b1)) | ((m_axi_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_predicate_op133_writeresp_state31 == 1'b1)) | ((m_axi_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((m_axi_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state22_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((m_axi_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state22_io)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state23_io));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state23_io));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state24_io));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state24_io));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_01001 = ((m_axi_gmem_BVALID == 1'b0) & (ap_predicate_op138_writeresp_state35 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_11001 = (((m_axi_gmem_BVALID == 1'b0) & (ap_predicate_op138_writeresp_state35 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state25_io)));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = (((m_axi_gmem_BVALID == 1'b0) & (ap_predicate_op138_writeresp_state35 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state25_io)));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state26_io));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state26_io));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state27_io));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state27_io));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_01001 = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_11001 = (((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state28_io)));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = (((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state28_io)));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_01001 = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage8_11001 = (((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state29_io)));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = (((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state29_io)));
end

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state30_io));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state30_io));
end

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_pp0_stage7_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

assign ap_block_state19_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_io = ((m_axi_gmem_AWREADY == 1'b0) & (ap_predicate_op119_writereq_state22 == 1'b1));
end

assign ap_block_state22_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_io = ((m_axi_gmem_WREADY == 1'b0) & (ap_predicate_op120_write_state23 == 1'b1));
end

assign ap_block_state23_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_io = ((m_axi_gmem_WREADY == 1'b0) & (ap_predicate_op121_write_state24 == 1'b1));
end

assign ap_block_state24_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state25_io = ((m_axi_gmem_WREADY == 1'b0) & (ap_predicate_op122_write_state25 == 1'b1));
end

assign ap_block_state25_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_io = (((m_axi_gmem_AWREADY == 1'b0) & (ap_predicate_op124_writereq_state26 == 1'b1)) | ((m_axi_gmem_WREADY == 1'b0) & (ap_predicate_op123_write_state26 == 1'b1)));
end

assign ap_block_state26_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state27_io = ((m_axi_gmem_WREADY == 1'b0) & (ap_predicate_op126_write_state27 == 1'b1));
end

assign ap_block_state27_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_io = ((m_axi_gmem_WREADY == 1'b0) & (ap_predicate_op128_write_state28 == 1'b1));
end

assign ap_block_state28_pp0_stage7_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state29_io = ((m_axi_gmem_WREADY == 1'b0) & (ap_predicate_op130_write_state29 == 1'b1));
end

assign ap_block_state29_pp0_stage8_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state30_io = ((m_axi_gmem_WREADY == 1'b0) & (ap_predicate_op132_write_state30 == 1'b1));
end

assign ap_block_state30_pp0_stage9_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state31_pp0_stage0_iter3 = ((m_axi_gmem_BVALID == 1'b0) & (ap_predicate_op133_writeresp_state31 == 1'b1));
end

assign ap_block_state32_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state35_pp0_stage4_iter3 = ((m_axi_gmem_BVALID == 1'b0) & (ap_predicate_op138_writeresp_state35 == 1'b1));
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage8_iter0 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_condition_825 = ((ap_predicate_op119_writereq_state22 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001));
end

always @ (*) begin
    ap_condition_829 = ((ap_predicate_op124_writereq_state26 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001));
end

always @ (*) begin
    ap_condition_832 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln1065_reg_476 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage9;

always @ (*) begin
    ap_predicate_op119_writereq_state22 = ((empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0));
end

always @ (*) begin
    ap_predicate_op120_write_state23 = ((empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0));
end

always @ (*) begin
    ap_predicate_op121_write_state24 = ((empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0));
end

always @ (*) begin
    ap_predicate_op122_write_state25 = ((empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0));
end

always @ (*) begin
    ap_predicate_op123_write_state26 = ((empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0));
end

always @ (*) begin
    ap_predicate_op124_writereq_state26 = ((empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0));
end

always @ (*) begin
    ap_predicate_op126_write_state27 = ((empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0));
end

always @ (*) begin
    ap_predicate_op128_write_state28 = ((empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0));
end

always @ (*) begin
    ap_predicate_op130_write_state29 = ((empty_29_reg_492 == 1'd0) & (icmp_ln1065_reg_476 == 1'd0));
end

always @ (*) begin
    ap_predicate_op132_write_state30 = ((empty_29_reg_492_pp0_iter2_reg == 1'd0) & (icmp_ln1065_reg_476_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op133_writeresp_state31 = ((empty_29_reg_492_pp0_iter2_reg == 1'd0) & (icmp_ln1065_reg_476_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op138_writeresp_state35 = ((empty_29_reg_492_pp0_iter2_reg == 1'd0) & (icmp_ln1065_reg_476_pp0_iter2_reg == 1'd0));
end

assign col_idx_V_fu_309_p1 = m_axi_gmem_RDATA[2:0];

assign cur_src_fu_254_p2 = (ap_sig_allocacmp_idx_load + src_buff);

assign empty_28_fu_330_p2 = ((type_reg_451 == 4'd1) ? 1'b1 : 1'b0);

assign empty_29_fu_335_p2 = (empty_fu_325_p2 | empty_28_fu_330_p2);

assign empty_fu_325_p2 = ((type_reg_451 == 4'd3) ? 1'b1 : 1'b0);

assign grp_fu_236_p2 = (col_idx_V_reg_468 + 3'd1);

assign icmp_ln1065_fu_316_p2 = ((col_idx_V_reg_468 == prev_col_idx_V_fu_96) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_283_p2 = ((and_ln_fu_276_p3 == 8'd208) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd4;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = 8'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 1'd1;

assign m_axi_gmem_WUSER = 1'd0;

assign ptr_col2_address0 = zext_ln587_reg_480;

assign ptr_col2_base_address0 = zext_ln587_reg_480;

assign ptr_col2_base_d0 = add_ln54_fu_362_p2;

assign ptr_col2_d0 = add_ln54_fu_362_p2;

assign ptr_col_d1 = (ptr_col_load_reg_496 + 32'd5008);

assign sext_ln56_fu_369_p1 = ptr_col_load_1_reg_502;

assign sext_ln60_fu_383_p1 = $signed(add_ln60_reg_509);

assign zext_ln587_1_fu_409_p1 = grp_fu_236_p2;

assign zext_ln587_2_fu_357_p1 = grp_fu_236_p2;

assign zext_ln587_fu_321_p1 = col_idx_V_reg_468;

always @ (posedge ap_clk) begin
    zext_ln587_reg_480[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //dut_dut_Pipeline_VITIS_LOOP_38_1
